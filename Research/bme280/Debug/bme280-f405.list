
bme280-f405.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  08008e40  08008e40  00018e40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800934c  0800934c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800934c  0800934c  0001934c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009354  08009354  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009354  08009354  00019354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009358  08009358  00019358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800935c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          0000012c  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000308  20000308  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019900  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002490  00000000  00000000  00039b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001450  00000000  00000000  0003bfa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001390  00000000  00000000  0003d3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020888  00000000  00000000  0003e780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000129ed  00000000  00000000  0005f008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c39d6  00000000  00000000  000719f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001353cb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006780  00000000  00000000  00135420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008e24 	.word	0x08008e24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08008e24 	.word	0x08008e24

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <bme_spi_cs_down>:
#include "lsm6ds3_reg.h"
#include "bme280.h"


static void bme_spi_cs_down(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2110      	movs	r1, #16
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <bme_spi_cs_down+0x14>)
 8000f4a:	f002 fd6f 	bl	8003a2c <HAL_GPIO_WritePin>
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40020800 	.word	0x40020800

08000f58 <bme_spi_cs_up>:


static void bme_spi_cs_up(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	2110      	movs	r1, #16
 8000f60:	4802      	ldr	r0, [pc, #8]	; (8000f6c <bme_spi_cs_up+0x14>)
 8000f62:	f002 fd63 	bl	8003a2c <HAL_GPIO_WritePin>
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40020800 	.word	0x40020800

08000f70 <bme_spi_read>:


static BME280_INTF_RET_TYPE bme_spi_read(
		uint8_t reg_addr, uint8_t * data, uint32_t data_len, void *intf_ptr
)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60b9      	str	r1, [r7, #8]
 8000f78:	607a      	str	r2, [r7, #4]
 8000f7a:	603b      	str	r3, [r7, #0]
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	73fb      	strb	r3, [r7, #15]
	extern SPI_HandleTypeDef hspi1;

	bme_spi_cs_down();
 8000f80:	f7ff ffde 	bl	8000f40 <bme_spi_cs_down>
	reg_addr |= (1 << 7);
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi1, &reg_addr, 1, HAL_MAX_DELAY);
 8000f8e:	f107 010f 	add.w	r1, r7, #15
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295
 8000f96:	2201      	movs	r2, #1
 8000f98:	4808      	ldr	r0, [pc, #32]	; (8000fbc <bme_spi_read+0x4c>)
 8000f9a:	f004 f9f2 	bl	8005382 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, data, data_len, HAL_MAX_DELAY);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa6:	68b9      	ldr	r1, [r7, #8]
 8000fa8:	4804      	ldr	r0, [pc, #16]	; (8000fbc <bme_spi_read+0x4c>)
 8000faa:	f004 fb26 	bl	80055fa <HAL_SPI_Receive>
	bme_spi_cs_up();
 8000fae:	f7ff ffd3 	bl	8000f58 <bme_spi_cs_up>

	return 0;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	2000029c 	.word	0x2000029c

08000fc0 <bme_spi_write>:


static BME280_INTF_RET_TYPE bme_spi_write(
		uint8_t reg_addr, const uint8_t * data, uint32_t data_len, void *intf_ptr
)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60b9      	str	r1, [r7, #8]
 8000fc8:	607a      	str	r2, [r7, #4]
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	4603      	mov	r3, r0
 8000fce:	73fb      	strb	r3, [r7, #15]
	extern SPI_HandleTypeDef hspi1;

	bme_spi_cs_down();
 8000fd0:	f7ff ffb6 	bl	8000f40 <bme_spi_cs_down>
	reg_addr &= ~(1 << 7);
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi1, &reg_addr, 1, HAL_MAX_DELAY);
 8000fde:	f107 010f 	add.w	r1, r7, #15
 8000fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	4808      	ldr	r0, [pc, #32]	; (800100c <bme_spi_write+0x4c>)
 8000fea:	f004 f9ca 	bl	8005382 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)data, data_len, HAL_MAX_DELAY);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff6:	68b9      	ldr	r1, [r7, #8]
 8000ff8:	4804      	ldr	r0, [pc, #16]	; (800100c <bme_spi_write+0x4c>)
 8000ffa:	f004 f9c2 	bl	8005382 <HAL_SPI_Transmit>
	bme_spi_cs_up();
 8000ffe:	f7ff ffab 	bl	8000f58 <bme_spi_cs_up>

	return 0;
 8001002:	2300      	movs	r3, #0
}
 8001004:	4618      	mov	r0, r3
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	2000029c 	.word	0x2000029c

08001010 <bme_delay_us>:


static void bme_delay_us(uint32_t period, void *intf_ptr)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
	if (period < 1000)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001020:	d202      	bcs.n	8001028 <bme_delay_us+0x18>
		period = 1;
 8001022:	2301      	movs	r3, #1
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	e005      	b.n	8001034 <bme_delay_us+0x24>
	else
		period = period / 1000;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a06      	ldr	r2, [pc, #24]	; (8001044 <bme_delay_us+0x34>)
 800102c:	fba2 2303 	umull	r2, r3, r2, r3
 8001030:	099b      	lsrs	r3, r3, #6
 8001032:	607b      	str	r3, [r7, #4]

	HAL_Delay(period);
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f002 fa53 	bl	80034e0 <HAL_Delay>
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	10624dd3 	.word	0x10624dd3

08001048 <lsm_i2c_read>:




static int32_t lsm_i2c_read(void *handle, uint8_t reg_addr, uint8_t * data, uint16_t data_len)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af04      	add	r7, sp, #16
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	607a      	str	r2, [r7, #4]
 8001052:	461a      	mov	r2, r3
 8001054:	460b      	mov	r3, r1
 8001056:	72fb      	strb	r3, [r7, #11]
 8001058:	4613      	mov	r3, r2
 800105a:	813b      	strh	r3, [r7, #8]
	extern I2C_HandleTypeDef hi2c1;
	HAL_I2C_Mem_Read(&hi2c1, LSM6DS3_I2C_ADD_H, reg_addr, 1, data, data_len, HAL_MAX_DELAY);
 800105c:	7afb      	ldrb	r3, [r7, #11]
 800105e:	b29a      	uxth	r2, r3
 8001060:	f04f 33ff 	mov.w	r3, #4294967295
 8001064:	9302      	str	r3, [sp, #8]
 8001066:	893b      	ldrh	r3, [r7, #8]
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2301      	movs	r3, #1
 8001070:	21d7      	movs	r1, #215	; 0xd7
 8001072:	4804      	ldr	r0, [pc, #16]	; (8001084 <lsm_i2c_read+0x3c>)
 8001074:	f002 ff32 	bl	8003edc <HAL_I2C_Mem_Read>
	return 0;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000204 	.word	0x20000204

08001088 <lsm_i2c_write>:


static int32_t lsm_i2c_write(void * handle, uint8_t reg_addr, const uint8_t * data, uint16_t data_len)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b088      	sub	sp, #32
 800108c:	af04      	add	r7, sp, #16
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	607a      	str	r2, [r7, #4]
 8001092:	461a      	mov	r2, r3
 8001094:	460b      	mov	r3, r1
 8001096:	72fb      	strb	r3, [r7, #11]
 8001098:	4613      	mov	r3, r2
 800109a:	813b      	strh	r3, [r7, #8]
	extern I2C_HandleTypeDef hi2c1;
	HAL_I2C_Mem_Write(&hi2c1, LSM6DS3_I2C_ADD_H, reg_addr, 1, (uint8_t*)data, data_len, HAL_MAX_DELAY);
 800109c:	7afb      	ldrb	r3, [r7, #11]
 800109e:	b29a      	uxth	r2, r3
 80010a0:	f04f 33ff 	mov.w	r3, #4294967295
 80010a4:	9302      	str	r3, [sp, #8]
 80010a6:	893b      	ldrh	r3, [r7, #8]
 80010a8:	9301      	str	r3, [sp, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2301      	movs	r3, #1
 80010b0:	21d7      	movs	r1, #215	; 0xd7
 80010b2:	4804      	ldr	r0, [pc, #16]	; (80010c4 <lsm_i2c_write+0x3c>)
 80010b4:	f002 fe18 	bl	8003ce8 <HAL_I2C_Mem_Write>
	return 0;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000204 	.word	0x20000204

080010c8 <app_main>:



int app_main(void)
{
 80010c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010cc:	b0bc      	sub	sp, #240	; 0xf0
 80010ce:	af0c      	add	r7, sp, #48	; 0x30
	// Настройка bme280 =-=-=-=-=-=-=-=-=-=-=-=-
	// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
	struct bme280_dev bme = {0};
 80010d0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80010d4:	2248      	movs	r2, #72	; 0x48
 80010d6:	2100      	movs	r1, #0
 80010d8:	4618      	mov	r0, r3
 80010da:	f005 f9b1 	bl	8006440 <memset>
	bme.intf = BME280_SPI_INTF;
 80010de:	2300      	movs	r3, #0
 80010e0:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	bme.intf_ptr = NULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	66fb      	str	r3, [r7, #108]	; 0x6c
	bme.read = bme_spi_read;
 80010e8:	4bc0      	ldr	r3, [pc, #768]	; (80013ec <app_main+0x324>)
 80010ea:	677b      	str	r3, [r7, #116]	; 0x74
	bme.write = bme_spi_write;
 80010ec:	4bc0      	ldr	r3, [pc, #768]	; (80013f0 <app_main+0x328>)
 80010ee:	67bb      	str	r3, [r7, #120]	; 0x78
	bme.delay_us = bme_delay_us;
 80010f0:	4bc0      	ldr	r3, [pc, #768]	; (80013f4 <app_main+0x32c>)
 80010f2:	67fb      	str	r3, [r7, #124]	; 0x7c

	int rc = bme280_soft_reset(&bme);
 80010f4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 fb48 	bl	800178e <bme280_soft_reset>
 80010fe:	4603      	mov	r3, r0
 8001100:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	printf("bme280 reset rc = %d\n", (int)rc);
 8001104:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001108:	48bb      	ldr	r0, [pc, #748]	; (80013f8 <app_main+0x330>)
 800110a:	f005 fe0b 	bl	8006d24 <iprintf>

	rc = bme280_init(&bme);
 800110e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001112:	4618      	mov	r0, r3
 8001114:	f000 f984 	bl	8001420 <bme280_init>
 8001118:	4603      	mov	r3, r0
 800111a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	printf("bme280 init rc = %d\n", (int)rc);
 800111e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001122:	48b6      	ldr	r0, [pc, #728]	; (80013fc <app_main+0x334>)
 8001124:	f005 fdfe 	bl	8006d24 <iprintf>

	bme.settings.osr_h = BME280_OVERSAMPLING_1X;
 8001128:	2301      	movs	r3, #1
 800112a:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
	bme.settings.osr_p = BME280_OVERSAMPLING_16X;
 800112e:	2305      	movs	r3, #5
 8001130:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	bme.settings.osr_t = BME280_OVERSAMPLING_2X;
 8001134:	2302      	movs	r3, #2
 8001136:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
	bme.settings.filter = BME280_FILTER_COEFF_16;
 800113a:	2304      	movs	r3, #4
 800113c:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
	bme.settings.standby_time = BME280_STANDBY_TIME_0_5_MS;
 8001140:	2300      	movs	r3, #0
 8001142:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac

	uint8_t settings_sel;
	settings_sel = BME280_OSR_PRESS_SEL;
 8001146:	2301      	movs	r3, #1
 8001148:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	settings_sel |= BME280_OSR_TEMP_SEL;
 800114c:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001150:	f043 0302 	orr.w	r3, r3, #2
 8001154:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	settings_sel |= BME280_OSR_HUM_SEL;
 8001158:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800115c:	f043 0304 	orr.w	r3, r3, #4
 8001160:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	settings_sel |= BME280_FILTER_SEL;
 8001164:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001168:	f043 0308 	orr.w	r3, r3, #8
 800116c:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	settings_sel |= BME280_STANDBY_SEL;
 8001170:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001174:	f043 0310 	orr.w	r3, r3, #16
 8001178:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	rc = bme280_set_sensor_settings(settings_sel, &bme);
 800117c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001180:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001184:	4611      	mov	r1, r2
 8001186:	4618      	mov	r0, r3
 8001188:	f000 fa4f 	bl	800162a <bme280_set_sensor_settings>
 800118c:	4603      	mov	r3, r0
 800118e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	printf("bme280 settings set rc = %d\n", rc);
 8001192:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001196:	489a      	ldr	r0, [pc, #616]	; (8001400 <app_main+0x338>)
 8001198:	f005 fdc4 	bl	8006d24 <iprintf>
	rc = bme280_set_sensor_mode(BME280_NORMAL_MODE, &bme);
 800119c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80011a0:	4619      	mov	r1, r3
 80011a2:	2003      	movs	r0, #3
 80011a4:	f000 fa96 	bl	80016d4 <bme280_set_sensor_mode>
 80011a8:	4603      	mov	r3, r0
 80011aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	printf("bme280 set sensor mode rc = %d\n", rc);
 80011ae:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80011b2:	4894      	ldr	r0, [pc, #592]	; (8001404 <app_main+0x33c>)
 80011b4:	f005 fdb6 	bl	8006d24 <iprintf>


	// Настройка lsm6ds3 =-=-=-=-=-=-=-=-=-=-=-=-
	// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
	stmdev_ctx_t ctx = {0};
 80011b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
	ctx.handle = NULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	667b      	str	r3, [r7, #100]	; 0x64
	ctx.read_reg = lsm_i2c_read;
 80011c8:	4b8f      	ldr	r3, [pc, #572]	; (8001408 <app_main+0x340>)
 80011ca:	663b      	str	r3, [r7, #96]	; 0x60
	ctx.write_reg = lsm_i2c_write;
 80011cc:	4b8f      	ldr	r3, [pc, #572]	; (800140c <app_main+0x344>)
 80011ce:	65fb      	str	r3, [r7, #92]	; 0x5c

	uint8_t whoami = 0x00;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	lsm6ds3_device_id_get(&ctx, &whoami);
 80011d6:	f107 025b 	add.w	r2, r7, #91	; 0x5b
 80011da:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011de:	4611      	mov	r1, r2
 80011e0:	4618      	mov	r0, r3
 80011e2:	f001 fd4e 	bl	8002c82 <lsm6ds3_device_id_get>
	printf("got lsm6ds3 whoami 0x%02X, expected 0x%02X\n", (int)whoami, (int)LSM6DS3_ID);
 80011e6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80011ea:	2269      	movs	r2, #105	; 0x69
 80011ec:	4619      	mov	r1, r3
 80011ee:	4888      	ldr	r0, [pc, #544]	; (8001410 <app_main+0x348>)
 80011f0:	f005 fd98 	bl	8006d24 <iprintf>

	lsm6ds3_reset_set(&ctx, PROPERTY_ENABLE);
 80011f4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011f8:	2101      	movs	r1, #1
 80011fa:	4618      	mov	r0, r3
 80011fc:	f001 fd52 	bl	8002ca4 <lsm6ds3_reset_set>
	HAL_Delay(100);
 8001200:	2064      	movs	r0, #100	; 0x64
 8001202:	f002 f96d 	bl	80034e0 <HAL_Delay>

	lsm6ds3_xl_full_scale_set(&ctx, LSM6DS3_16g);
 8001206:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800120a:	2101      	movs	r1, #1
 800120c:	4618      	mov	r0, r3
 800120e:	f001 fbe7 	bl	80029e0 <lsm6ds3_xl_full_scale_set>
	lsm6ds3_xl_data_rate_set(&ctx, LSM6DS3_XL_ODR_104Hz);
 8001212:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001216:	2104      	movs	r1, #4
 8001218:	4618      	mov	r0, r3
 800121a:	f001 fc07 	bl	8002a2c <lsm6ds3_xl_data_rate_set>

	lsm6ds3_gy_full_scale_set(&ctx, LSM6DS3_2000dps);
 800121e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001222:	2106      	movs	r1, #6
 8001224:	4618      	mov	r0, r3
 8001226:	f001 fc27 	bl	8002a78 <lsm6ds3_gy_full_scale_set>
	lsm6ds3_gy_data_rate_set(&ctx, LSM6DS3_GY_ODR_104Hz);
 800122a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800122e:	2104      	movs	r1, #4
 8001230:	4618      	mov	r0, r3
 8001232:	f001 fc47 	bl	8002ac4 <lsm6ds3_gy_data_rate_set>
		// Чтение данных из lsm6ds3
		// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
		int16_t temperature_raw;
		int16_t acc_raw[3];
		int16_t gyro_raw[3];
		lsm6ds3_temperature_raw_get(&ctx, &temperature_raw);
 8001236:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800123a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800123e:	4611      	mov	r1, r2
 8001240:	4618      	mov	r0, r3
 8001242:	f001 fc65 	bl	8002b10 <lsm6ds3_temperature_raw_get>
		lsm6ds3_acceleration_raw_get(&ctx, acc_raw);
 8001246:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800124a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800124e:	4611      	mov	r1, r2
 8001250:	4618      	mov	r0, r3
 8001252:	f001 fccb 	bl	8002bec <lsm6ds3_acceleration_raw_get>
		lsm6ds3_angular_rate_raw_get(&ctx, gyro_raw);
 8001256:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800125a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f001 fc78 	bl	8002b56 <lsm6ds3_angular_rate_raw_get>

		// Пересчет из попугаев в человеческие величины
		float temperature_celsius;
		float acc_g[3];
		float gyro_dps[3];
		temperature_celsius = lsm6ds3_from_lsb_to_celsius(temperature_raw);
 8001266:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 800126a:	4618      	mov	r0, r3
 800126c:	f001 fb9e 	bl	80029ac <lsm6ds3_from_lsb_to_celsius>
 8001270:	ed87 0a2c 	vstr	s0, [r7, #176]	; 0xb0
		for (int i = 0; i < 3; i++)
 8001274:	2300      	movs	r3, #0
 8001276:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800127a:	e038      	b.n	80012ee <app_main+0x226>
		{
			acc_g[i] = lsm6ds3_from_fs16g_to_mg(acc_raw[i]) / 1000;
 800127c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8001286:	4413      	add	r3, r2
 8001288:	f933 3c70 	ldrsh.w	r3, [r3, #-112]
 800128c:	4618      	mov	r0, r3
 800128e:	f001 fb55 	bl	800293c <lsm6ds3_from_fs16g_to_mg>
 8001292:	eeb0 7a40 	vmov.f32	s14, s0
 8001296:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8001414 <app_main+0x34c>
 800129a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800129e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80012a8:	4413      	add	r3, r2
 80012aa:	3b84      	subs	r3, #132	; 0x84
 80012ac:	edc3 7a00 	vstr	s15, [r3]
			gyro_dps[i] = lsm6ds3_from_fs2000dps_to_mdps(gyro_raw[i]) / 1000;
 80012b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80012ba:	4413      	add	r3, r2
 80012bc:	f933 3c78 	ldrsh.w	r3, [r3, #-120]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f001 fb5b 	bl	800297c <lsm6ds3_from_fs2000dps_to_mdps>
 80012c6:	eeb0 7a40 	vmov.f32	s14, s0
 80012ca:	eddf 6a52 	vldr	s13, [pc, #328]	; 8001414 <app_main+0x34c>
 80012ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80012dc:	4413      	add	r3, r2
 80012de:	3b90      	subs	r3, #144	; 0x90
 80012e0:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < 3; i++)
 80012e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80012e8:	3301      	adds	r3, #1
 80012ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80012ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	ddc2      	ble.n	800127c <app_main+0x1b4>
		}

		// Вывод
		printf(
 80012f6:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80012fa:	f7ff f925 	bl	8000548 <__aeabi_f2d>
 80012fe:	e9c7 0104 	strd	r0, r1, [r7, #16]
			"t = %8.4f; acc = %10.4f,%10.4f,%10.4f; gyro=%10.4f,%10.4f,%10.4f" " ||| ", //\n",
			temperature_celsius,
			acc_g[0], acc_g[1], acc_g[2],
 8001302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
		printf(
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff f91f 	bl	8000548 <__aeabi_f2d>
 800130a:	4680      	mov	r8, r0
 800130c:	4689      	mov	r9, r1
			acc_g[0], acc_g[1], acc_g[2],
 800130e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
		printf(
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff f919 	bl	8000548 <__aeabi_f2d>
 8001316:	4682      	mov	sl, r0
 8001318:	468b      	mov	fp, r1
			acc_g[0], acc_g[1], acc_g[2],
 800131a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
		printf(
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff f913 	bl	8000548 <__aeabi_f2d>
 8001322:	e9c7 0102 	strd	r0, r1, [r7, #8]
			gyro_dps[0], gyro_dps[1], gyro_dps[2]
 8001326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
		printf(
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff f90d 	bl	8000548 <__aeabi_f2d>
 800132e:	e9c7 0100 	strd	r0, r1, [r7]
			gyro_dps[0], gyro_dps[1], gyro_dps[2]
 8001332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
		printf(
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff f907 	bl	8000548 <__aeabi_f2d>
 800133a:	4604      	mov	r4, r0
 800133c:	460d      	mov	r5, r1
			gyro_dps[0], gyro_dps[1], gyro_dps[2]
 800133e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
		printf(
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff f901 	bl	8000548 <__aeabi_f2d>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800134e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8001352:	ed97 7b00 	vldr	d7, [r7]
 8001356:	ed8d 7b06 	vstr	d7, [sp, #24]
 800135a:	ed97 7b02 	vldr	d7, [r7, #8]
 800135e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001362:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001366:	e9cd 8900 	strd	r8, r9, [sp]
 800136a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800136e:	482a      	ldr	r0, [pc, #168]	; (8001418 <app_main+0x350>)
 8001370:	f005 fcd8 	bl	8006d24 <iprintf>

		// Чтение данные из bme280
		// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

		//bme280_set_sensor_mode(BME280_FORCED_MODE, &bme);
		HAL_Delay(10);
 8001374:	200a      	movs	r0, #10
 8001376:	f002 f8b3 	bl	80034e0 <HAL_Delay>

		struct bme280_data comp_data;
		rc = bme280_get_sensor_data(BME280_ALL, &comp_data, &bme);
 800137a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800137e:	f107 0318 	add.w	r3, r7, #24
 8001382:	4619      	mov	r1, r3
 8001384:	2007      	movs	r0, #7
 8001386:	f000 fa51 	bl	800182c <bme280_get_sensor_data>
 800138a:	4603      	mov	r3, r0
 800138c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

		// Печать
		printf(
			"temp = %8.4f; pressure = %10.4f; hum = %10.4f\n",
			(float)comp_data.temperature,
 8001390:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001394:	4610      	mov	r0, r2
 8001396:	4619      	mov	r1, r3
 8001398:	f7ff fc06 	bl	8000ba8 <__aeabi_d2f>
 800139c:	4603      	mov	r3, r0
		printf(
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff f8d2 	bl	8000548 <__aeabi_f2d>
 80013a4:	4680      	mov	r8, r0
 80013a6:	4689      	mov	r9, r1
			(float)comp_data.pressure,
 80013a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013ac:	4610      	mov	r0, r2
 80013ae:	4619      	mov	r1, r3
 80013b0:	f7ff fbfa 	bl	8000ba8 <__aeabi_d2f>
 80013b4:	4603      	mov	r3, r0
		printf(
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff f8c6 	bl	8000548 <__aeabi_f2d>
 80013bc:	4604      	mov	r4, r0
 80013be:	460d      	mov	r5, r1
			(float)comp_data.humidity
 80013c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	f7ff fbee 	bl	8000ba8 <__aeabi_d2f>
 80013cc:	4603      	mov	r3, r0
		printf(
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f8ba 	bl	8000548 <__aeabi_f2d>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80013dc:	e9cd 4500 	strd	r4, r5, [sp]
 80013e0:	4642      	mov	r2, r8
 80013e2:	464b      	mov	r3, r9
 80013e4:	480d      	ldr	r0, [pc, #52]	; (800141c <app_main+0x354>)
 80013e6:	f005 fc9d 	bl	8006d24 <iprintf>
	{
 80013ea:	e724      	b.n	8001236 <app_main+0x16e>
 80013ec:	08000f71 	.word	0x08000f71
 80013f0:	08000fc1 	.word	0x08000fc1
 80013f4:	08001011 	.word	0x08001011
 80013f8:	08008e40 	.word	0x08008e40
 80013fc:	08008e58 	.word	0x08008e58
 8001400:	08008e70 	.word	0x08008e70
 8001404:	08008e90 	.word	0x08008e90
 8001408:	08001049 	.word	0x08001049
 800140c:	08001089 	.word	0x08001089
 8001410:	08008eb0 	.word	0x08008eb0
 8001414:	447a0000 	.word	0x447a0000
 8001418:	08008edc 	.word	0x08008edc
 800141c:	08008f24 	.word	0x08008f24

08001420 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* chip id read try count */
    uint8_t try_count = 5;
 8001428:	2305      	movs	r3, #5
 800142a:	73bb      	strb	r3, [r7, #14]
    uint8_t chip_id = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f001 fa33 	bl	800289c <null_ptr_check>
 8001436:	4603      	mov	r3, r0
 8001438:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 800143a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d137      	bne.n	80014b2 <bme280_init+0x92>
    {
        while (try_count)
 8001442:	e02c      	b.n	800149e <bme280_init+0x7e>
        {
            /* Read the chip-id of bme280 sensor */
            rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8001444:	f107 010d 	add.w	r1, r7, #13
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	20d0      	movs	r0, #208	; 0xd0
 800144e:	f000 f836 	bl	80014be <bme280_get_regs>
 8001452:	4603      	mov	r3, r0
 8001454:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID))
 8001456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d114      	bne.n	8001488 <bme280_init+0x68>
 800145e:	7b7b      	ldrb	r3, [r7, #13]
 8001460:	2b60      	cmp	r3, #96	; 0x60
 8001462:	d111      	bne.n	8001488 <bme280_init+0x68>
            {
                dev->chip_id = chip_id;
 8001464:	7b7a      	ldrb	r2, [r7, #13]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bme280_soft_reset(dev);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 f98f 	bl	800178e <bme280_soft_reset>
 8001470:	4603      	mov	r3, r0
 8001472:	73fb      	strb	r3, [r7, #15]

                if (rslt == BME280_OK)
 8001474:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d114      	bne.n	80014a6 <bme280_init+0x86>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f001 f883 	bl	8002588 <get_calib_data>
 8001482:	4603      	mov	r3, r0
 8001484:	73fb      	strb	r3, [r7, #15]
                }

                break;
 8001486:	e00e      	b.n	80014a6 <bme280_init+0x86>
            }

            /* Wait for 1 ms */
            dev->delay_us(1000, dev->intf_ptr);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	6852      	ldr	r2, [r2, #4]
 8001490:	4611      	mov	r1, r2
 8001492:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001496:	4798      	blx	r3
            --try_count;
 8001498:	7bbb      	ldrb	r3, [r7, #14]
 800149a:	3b01      	subs	r3, #1
 800149c:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 800149e:	7bbb      	ldrb	r3, [r7, #14]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1cf      	bne.n	8001444 <bme280_init+0x24>
 80014a4:	e000      	b.n	80014a8 <bme280_init+0x88>
                break;
 80014a6:	bf00      	nop
        }

        /* Chip id check failed */
        if (!try_count)
 80014a8:	7bbb      	ldrb	r3, [r7, #14]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <bme280_init+0x92>
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 80014ae:	23fe      	movs	r3, #254	; 0xfe
 80014b0:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80014b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme280_dev *dev)
{
 80014be:	b590      	push	{r4, r7, lr}
 80014c0:	b087      	sub	sp, #28
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	4603      	mov	r3, r0
 80014ca:	73fb      	strb	r3, [r7, #15]
 80014cc:	4613      	mov	r3, r2
 80014ce:	81bb      	strh	r3, [r7, #12]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f001 f9e3 	bl	800289c <null_ptr_check>
 80014d6:	4603      	mov	r3, r0
 80014d8:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BME280_OK) && (reg_data != NULL))
 80014da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d11f      	bne.n	8001522 <bme280_get_regs+0x64>
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d01c      	beq.n	8001522 <bme280_get_regs+0x64>
    {
        /* If interface selected is SPI */
        if (dev->intf != BME280_I2C_INTF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	7a1b      	ldrb	r3, [r3, #8]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d003      	beq.n	80014f8 <bme280_get_regs+0x3a>
        {
            reg_addr = reg_addr | 0x80;
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014f6:	73fb      	strb	r3, [r7, #15]
        }

        /* Read the data  */
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68dc      	ldr	r4, [r3, #12]
 80014fc:	89ba      	ldrh	r2, [r7, #12]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	7bf8      	ldrb	r0, [r7, #15]
 8001504:	68b9      	ldr	r1, [r7, #8]
 8001506:	47a0      	blx	r4
 8001508:	4603      	mov	r3, r0
 800150a:	461a      	mov	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        /* Check for communication error */
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f993 3045 	ldrsb.w	r3, [r3, #69]	; 0x45
 8001518:	2b00      	cmp	r3, #0
 800151a:	d004      	beq.n	8001526 <bme280_get_regs+0x68>
        {
            rslt = BME280_E_COMM_FAIL;
 800151c:	23fc      	movs	r3, #252	; 0xfc
 800151e:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 8001520:	e001      	b.n	8001526 <bme280_get_regs+0x68>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8001522:	23ff      	movs	r3, #255	; 0xff
 8001524:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001526:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800152a:	4618      	mov	r0, r3
 800152c:	371c      	adds	r7, #28
 800152e:	46bd      	mov	sp, r7
 8001530:	bd90      	pop	{r4, r7, pc}

08001532 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme280_dev *dev)
{
 8001532:	b590      	push	{r4, r7, lr}
 8001534:	b08d      	sub	sp, #52	; 0x34
 8001536:	af00      	add	r7, sp, #0
 8001538:	60f8      	str	r0, [r7, #12]
 800153a:	60b9      	str	r1, [r7, #8]
 800153c:	603b      	str	r3, [r7, #0]
 800153e:	4613      	mov	r3, r2
 8001540:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

    if (len > 10)
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	2b0a      	cmp	r3, #10
 8001546:	d901      	bls.n	800154c <bme280_set_regs+0x1a>
    {
        len = 10;
 8001548:	230a      	movs	r3, #10
 800154a:	71fb      	strb	r3, [r7, #7]

    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800154c:	6838      	ldr	r0, [r7, #0]
 800154e:	f001 f9a5 	bl	800289c <null_ptr_check>
 8001552:	4603      	mov	r3, r0
 8001554:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check for arguments validity */
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001558:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800155c:	2b00      	cmp	r3, #0
 800155e:	d159      	bne.n	8001614 <bme280_set_regs+0xe2>
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d056      	beq.n	8001614 <bme280_set_regs+0xe2>
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d053      	beq.n	8001614 <bme280_set_regs+0xe2>
    {
        if (len != 0)
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d04c      	beq.n	800160c <bme280_set_regs+0xda>
        {
            temp_buff[0] = reg_data[0];
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	753b      	strb	r3, [r7, #20]

            /* If interface selected is SPI */
            if (dev->intf != BME280_I2C_INTF)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	7a1b      	ldrb	r3, [r3, #8]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d01a      	beq.n	80015b6 <bme280_set_regs+0x84>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001580:	2300      	movs	r3, #0
 8001582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001586:	e011      	b.n	80015ac <bme280_set_regs+0x7a>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8001588:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	4413      	add	r3, r2
 8001590:	781a      	ldrb	r2, [r3, #0]
 8001592:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001596:	68f9      	ldr	r1, [r7, #12]
 8001598:	440b      	add	r3, r1
 800159a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80015a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80015a6:	3301      	adds	r3, #1
 80015a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80015ac:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d3e8      	bcc.n	8001588 <bme280_set_regs+0x56>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d90d      	bls.n	80015d8 <bme280_set_regs+0xa6>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	f107 0114 	add.w	r1, r7, #20
 80015c2:	68ba      	ldr	r2, [r7, #8]
 80015c4:	68f8      	ldr	r0, [r7, #12]
 80015c6:	f001 f824 	bl	8002612 <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	3b01      	subs	r3, #1
 80015d4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80015d6:	e001      	b.n	80015dc <bme280_set_regs+0xaa>
            }
            else
            {
                temp_len = len;
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	85bb      	strh	r3, [r7, #44]	; 0x2c
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	691c      	ldr	r4, [r3, #16]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	7818      	ldrb	r0, [r3, #0]
 80015e4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f107 0114 	add.w	r1, r7, #20
 80015ee:	47a0      	blx	r4
 80015f0:	4603      	mov	r3, r0
 80015f2:	461a      	mov	r2, r3
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            /* Check for communication error */
            if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	f993 3045 	ldrsb.w	r3, [r3, #69]	; 0x45
 8001600:	2b00      	cmp	r3, #0
 8001602:	d00b      	beq.n	800161c <bme280_set_regs+0xea>
            {
                rslt = BME280_E_COMM_FAIL;
 8001604:	23fc      	movs	r3, #252	; 0xfc
 8001606:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (len != 0)
 800160a:	e007      	b.n	800161c <bme280_set_regs+0xea>
            }
        }
        else
        {
            rslt = BME280_E_INVALID_LEN;
 800160c:	23fd      	movs	r3, #253	; 0xfd
 800160e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (len != 0)
 8001612:	e003      	b.n	800161c <bme280_set_regs+0xea>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8001614:	23ff      	movs	r3, #255	; 0xff
 8001616:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800161a:	e000      	b.n	800161e <bme280_set_regs+0xec>
        if (len != 0)
 800161c:	bf00      	nop
    }

    return rslt;
 800161e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001622:	4618      	mov	r0, r3
 8001624:	3734      	adds	r7, #52	; 0x34
 8001626:	46bd      	mov	sp, r7
 8001628:	bd90      	pop	{r4, r7, pc}

0800162a <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, struct bme280_dev *dev)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b084      	sub	sp, #16
 800162e:	af00      	add	r7, sp, #0
 8001630:	4603      	mov	r3, r0
 8001632:	6039      	str	r1, [r7, #0]
 8001634:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t sensor_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001636:	6838      	ldr	r0, [r7, #0]
 8001638:	f001 f930 	bl	800289c <null_ptr_check>
 800163c:	4603      	mov	r3, r0
 800163e:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8001640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d13f      	bne.n	80016c8 <bme280_set_sensor_settings+0x9e>
    {
        rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8001648:	f107 030e 	add.w	r3, r7, #14
 800164c:	6839      	ldr	r1, [r7, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f000 f874 	bl	800173c <bme280_get_sensor_mode>
 8001654:	4603      	mov	r3, r0
 8001656:	73fb      	strb	r3, [r7, #15]

        if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8001658:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d107      	bne.n	8001670 <bme280_set_sensor_settings+0x46>
 8001660:	7bbb      	ldrb	r3, [r7, #14]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d004      	beq.n	8001670 <bme280_set_sensor_settings+0x46>
        {
            rslt = put_device_to_sleep(dev);
 8001666:	6838      	ldr	r0, [r7, #0]
 8001668:	f000 fb7e 	bl	8001d68 <put_device_to_sleep>
 800166c:	4603      	mov	r3, r0
 800166e:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BME280_OK)
 8001670:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d127      	bne.n	80016c8 <bme280_set_sensor_settings+0x9e>
        {
            /* Check if user wants to change oversampling
             * settings
             */
            if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	4619      	mov	r1, r3
 800167c:	2007      	movs	r0, #7
 800167e:	f001 f8f1 	bl	8002864 <are_settings_changed>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d009      	beq.n	800169c <bme280_set_sensor_settings+0x72>
            {
                rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f000 f9ba 	bl	8001a0c <set_osr_settings>
 8001698:	4603      	mov	r3, r0
 800169a:	73fb      	strb	r3, [r7, #15]
            }

            /* Check if user wants to change filter and/or
             * standby settings
             */
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 800169c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d111      	bne.n	80016c8 <bme280_set_sensor_settings+0x9e>
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	4619      	mov	r1, r3
 80016a8:	2018      	movs	r0, #24
 80016aa:	f001 f8db 	bl	8002864 <are_settings_changed>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d009      	beq.n	80016c8 <bme280_set_sensor_settings+0x9e>
            {
                rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 fa41 	bl	8001b46 <set_filter_standby_settings>
 80016c4:	4603      	mov	r3, r0
 80016c6:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80016c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, struct bme280_dev *dev)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	6039      	str	r1, [r7, #0]
 80016de:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80016e0:	6838      	ldr	r0, [r7, #0]
 80016e2:	f001 f8db 	bl	800289c <null_ptr_check>
 80016e6:	4603      	mov	r3, r0
 80016e8:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME280_OK)
 80016ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d11e      	bne.n	8001730 <bme280_set_sensor_mode+0x5c>
    {
        rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 80016f2:	f107 030e 	add.w	r3, r7, #14
 80016f6:	6839      	ldr	r1, [r7, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f000 f81f 	bl	800173c <bme280_get_sensor_mode>
 80016fe:	4603      	mov	r3, r0
 8001700:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode
         */
        if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8001702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d107      	bne.n	800171a <bme280_set_sensor_mode+0x46>
 800170a:	7bbb      	ldrb	r3, [r7, #14]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d004      	beq.n	800171a <bme280_set_sensor_mode+0x46>
        {
            rslt = put_device_to_sleep(dev);
 8001710:	6838      	ldr	r0, [r7, #0]
 8001712:	f000 fb29 	bl	8001d68 <put_device_to_sleep>
 8001716:	4603      	mov	r3, r0
 8001718:	73fb      	strb	r3, [r7, #15]
        }

        /* Set the power mode */
        if (rslt == BME280_OK)
 800171a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d106      	bne.n	8001730 <bme280_set_sensor_mode+0x5c>
        {
            rslt = write_power_mode(sensor_mode, dev);
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	6839      	ldr	r1, [r7, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f000 faeb 	bl	8001d02 <write_power_mode>
 800172c:	4603      	mov	r3, r0
 800172e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001730:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, struct bme280_dev *dev)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001746:	6838      	ldr	r0, [r7, #0]
 8001748:	f001 f8a8 	bl	800289c <null_ptr_check>
 800174c:	4603      	mov	r3, r0
 800174e:	73fb      	strb	r3, [r7, #15]

    if ((rslt == BME280_OK) && (sensor_mode != NULL))
 8001750:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d112      	bne.n	800177e <bme280_get_sensor_mode+0x42>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00f      	beq.n	800177e <bme280_get_sensor_mode+0x42>
    {
        /* Read the power mode register */
        rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	2201      	movs	r2, #1
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	20f4      	movs	r0, #244	; 0xf4
 8001766:	f7ff feaa 	bl	80014be <bme280_get_regs>
 800176a:	4603      	mov	r3, r0
 800176c:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	b2da      	uxtb	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	701a      	strb	r2, [r3, #0]
 800177c:	e001      	b.n	8001782 <bme280_get_sensor_mode+0x46>
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 800177e:	23ff      	movs	r3, #255	; 0xff
 8001780:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001782:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(struct bme280_dev *dev)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b084      	sub	sp, #16
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_RESET_ADDR;
 8001796:	23e0      	movs	r3, #224	; 0xe0
 8001798:	737b      	strb	r3, [r7, #13]
    uint8_t status_reg = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	733b      	strb	r3, [r7, #12]
    uint8_t try_run = 5;
 800179e:	2305      	movs	r3, #5
 80017a0:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 80017a2:	23b6      	movs	r3, #182	; 0xb6
 80017a4:	72fb      	strb	r3, [r7, #11]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f001 f878 	bl	800289c <null_ptr_check>
 80017ac:	4603      	mov	r3, r0
 80017ae:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 80017b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d133      	bne.n	8001820 <bme280_soft_reset+0x92>
    {
        /* Write the soft reset command in the sensor */
        rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80017b8:	f107 010b 	add.w	r1, r7, #11
 80017bc:	f107 000d 	add.w	r0, r7, #13
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f7ff feb5 	bl	8001532 <bme280_set_regs>
 80017c8:	4603      	mov	r3, r0
 80017ca:	73fb      	strb	r3, [r7, #15]

        if (rslt == BME280_OK)
 80017cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d125      	bne.n	8001820 <bme280_soft_reset+0x92>
        {
            /* If NVM not copied yet, Wait for NVM to copy */
            do
            {
                /* As per data sheet - Table 1, startup time is 2 ms. */
                dev->delay_us(2000, dev->intf_ptr);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	695b      	ldr	r3, [r3, #20]
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	6852      	ldr	r2, [r2, #4]
 80017dc:	4611      	mov	r1, r2
 80017de:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80017e2:	4798      	blx	r3
                rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
 80017e4:	f107 010c 	add.w	r1, r7, #12
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	20f3      	movs	r0, #243	; 0xf3
 80017ee:	f7ff fe66 	bl	80014be <bme280_get_regs>
 80017f2:	4603      	mov	r3, r0
 80017f4:	73fb      	strb	r3, [r7, #15]

            } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 80017f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d109      	bne.n	8001812 <bme280_soft_reset+0x84>
 80017fe:	7bbb      	ldrb	r3, [r7, #14]
 8001800:	1e5a      	subs	r2, r3, #1
 8001802:	73ba      	strb	r2, [r7, #14]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d004      	beq.n	8001812 <bme280_soft_reset+0x84>
 8001808:	7b3b      	ldrb	r3, [r7, #12]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1e0      	bne.n	80017d4 <bme280_soft_reset+0x46>

            if (status_reg & BME280_STATUS_IM_UPDATE)
 8001812:	7b3b      	ldrb	r3, [r7, #12]
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <bme280_soft_reset+0x92>
            {
                rslt = BME280_E_NVM_COPY_FAILED;
 800181c:	23fa      	movs	r3, #250	; 0xfa
 800181e:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001820:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08a      	sub	sp, #40	; 0x28
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
 8001838:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure, temperature and humidity data read from
     * the sensor
     */
    uint8_t reg_data[BME280_P_T_H_DATA_LEN] = { 0 };
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
 800183e:	2300      	movs	r3, #0
 8001840:	623b      	str	r3, [r7, #32]
    struct bme280_uncomp_data uncomp_data = { 0 };
 8001842:	f107 0310 	add.w	r3, r7, #16
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f001 f824 	bl	800289c <null_ptr_check>
 8001854:	4603      	mov	r3, r0
 8001856:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((rslt == BME280_OK) && (comp_data != NULL))
 800185a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800185e:	2b00      	cmp	r3, #0
 8001860:	d124      	bne.n	80018ac <bme280_get_sensor_data+0x80>
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d021      	beq.n	80018ac <bme280_get_sensor_data+0x80>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8001868:	f107 011c 	add.w	r1, r7, #28
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2208      	movs	r2, #8
 8001870:	20f7      	movs	r0, #247	; 0xf7
 8001872:	f7ff fe24 	bl	80014be <bme280_get_regs>
 8001876:	4603      	mov	r3, r0
 8001878:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (rslt == BME280_OK)
 800187c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001880:	2b00      	cmp	r3, #0
 8001882:	d116      	bne.n	80018b2 <bme280_get_sensor_data+0x86>
        {
            /* Parse the read data from the sensor */
            bme280_parse_sensor_data(reg_data, &uncomp_data);
 8001884:	f107 0210 	add.w	r2, r7, #16
 8001888:	f107 031c 	add.w	r3, r7, #28
 800188c:	4611      	mov	r1, r2
 800188e:	4618      	mov	r0, r3
 8001890:	f000 f815 	bl	80018be <bme280_parse_sensor_data>

            /* Compensate the pressure and/or temperature and/or
             * humidity data from the sensor
             */
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3318      	adds	r3, #24
 8001898:	f107 0110 	add.w	r1, r7, #16
 800189c:	7bf8      	ldrb	r0, [r7, #15]
 800189e:	68ba      	ldr	r2, [r7, #8]
 80018a0:	f000 f853 	bl	800194a <bme280_compensate_data>
 80018a4:	4603      	mov	r3, r0
 80018a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BME280_OK)
 80018aa:	e002      	b.n	80018b2 <bme280_get_sensor_data+0x86>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 80018ac:	23ff      	movs	r3, #255	; 0xff
 80018ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 80018b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3728      	adds	r7, #40	; 0x28
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 80018be:	b480      	push	{r7}
 80018c0:	b087      	sub	sp, #28
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
 80018c6:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	031b      	lsls	r3, r3, #12
 80018ce:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3301      	adds	r3, #1
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	011b      	lsls	r3, r3, #4
 80018d8:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3302      	adds	r3, #2
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	091b      	lsrs	r3, r3, #4
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 80018e6:	697a      	ldr	r2, [r7, #20]
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	431a      	orrs	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	431a      	orrs	r2, r3
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_msb = (uint32_t)reg_data[3] << 12;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3303      	adds	r3, #3
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	031b      	lsls	r3, r3, #12
 80018fc:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 4;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3304      	adds	r3, #4
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	011b      	lsls	r3, r3, #4
 8001906:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[5] >> 4;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3305      	adds	r3, #5
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	091b      	lsrs	r3, r3, #4
 8001910:	b2db      	uxtb	r3, r3
 8001912:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	431a      	orrs	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	431a      	orrs	r2, r3
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for humidity data */
    data_msb = (uint32_t)reg_data[6] << 8;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	3306      	adds	r3, #6
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	021b      	lsls	r3, r3, #8
 800192a:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[7];
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3307      	adds	r3, #7
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	613b      	str	r3, [r7, #16]
    uncomp_data->humidity = data_msb | data_lsb;
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	431a      	orrs	r2, r3
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	609a      	str	r2, [r3, #8]
}
 800193e:	bf00      	nop
 8001940:	371c      	adds	r7, #28
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <bme280_compensate_data>:
 */
int8_t bme280_compensate_data(uint8_t sensor_comp,
                              const struct bme280_uncomp_data *uncomp_data,
                              struct bme280_data *comp_data,
                              struct bme280_calib_data *calib_data)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b086      	sub	sp, #24
 800194e:	af00      	add	r7, sp, #0
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
 8001954:	603b      	str	r3, [r7, #0]
 8001956:	4603      	mov	r3, r0
 8001958:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_OK;
 800195a:	2300      	movs	r3, #0
 800195c:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d04b      	beq.n	80019fc <bme280_compensate_data+0xb2>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d048      	beq.n	80019fc <bme280_compensate_data+0xb2>
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d045      	beq.n	80019fc <bme280_compensate_data+0xb2>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	f04f 0300 	mov.w	r3, #0
 800197a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	f04f 0300 	mov.w	r3, #0
 8001988:	e9c1 2300 	strd	r2, r3, [r1]
        comp_data->humidity = 0;
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	f04f 0300 	mov.w	r3, #0
 8001996:	e9c1 2304 	strd	r2, r3, [r1, #16]

        /* If pressure or temperature component is selected */
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 800199a:	7bfb      	ldrb	r3, [r7, #15]
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d00a      	beq.n	80019ba <bme280_compensate_data+0x70>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 80019a4:	6839      	ldr	r1, [r7, #0]
 80019a6:	68b8      	ldr	r0, [r7, #8]
 80019a8:	f000 fa2c 	bl	8001e04 <compensate_temperature>
 80019ac:	eeb0 7a40 	vmov.f32	s14, s0
 80019b0:	eef0 7a60 	vmov.f32	s15, s1
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	ed83 7b02 	vstr	d7, [r3, #8]
        }

        if (sensor_comp & BME280_PRESS)
 80019ba:	7bfb      	ldrb	r3, [r7, #15]
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d00a      	beq.n	80019da <bme280_compensate_data+0x90>
        {
            /* Compensate the pressure data */
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 80019c4:	6839      	ldr	r1, [r7, #0]
 80019c6:	68b8      	ldr	r0, [r7, #8]
 80019c8:	f000 faee 	bl	8001fa8 <compensate_pressure>
 80019cc:	eeb0 7a40 	vmov.f32	s14, s0
 80019d0:	eef0 7a60 	vmov.f32	s15, s1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	ed83 7b00 	vstr	d7, [r3]
        }

        if (sensor_comp & BME280_HUM)
 80019da:	7bfb      	ldrb	r3, [r7, #15]
 80019dc:	f003 0304 	and.w	r3, r3, #4
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d00d      	beq.n	8001a00 <bme280_compensate_data+0xb6>
        {
            /* Compensate the humidity data */
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 80019e4:	6839      	ldr	r1, [r7, #0]
 80019e6:	68b8      	ldr	r0, [r7, #8]
 80019e8:	f000 fcae 	bl	8002348 <compensate_humidity>
 80019ec:	eeb0 7a40 	vmov.f32	s14, s0
 80019f0:	eef0 7a60 	vmov.f32	s15, s1
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	ed83 7b04 	vstr	d7, [r3, #16]
        if (sensor_comp & BME280_HUM)
 80019fa:	e001      	b.n	8001a00 <bme280_compensate_data+0xb6>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 80019fc:	23ff      	movs	r3, #255	; 0xff
 80019fe:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001a00:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <set_osr_settings>:
/*!
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings, struct bme280_dev *dev)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
 8001a18:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	75fb      	strb	r3, [r7, #23]

    if (desired_settings & BME280_OSR_HUM_SEL)
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d005      	beq.n	8001a34 <set_osr_settings+0x28>
    {
        rslt = set_osr_humidity_settings(settings, dev);
 8001a28:	6879      	ldr	r1, [r7, #4]
 8001a2a:	68b8      	ldr	r0, [r7, #8]
 8001a2c:	f000 f815 	bl	8001a5a <set_osr_humidity_settings>
 8001a30:	4603      	mov	r3, r0
 8001a32:	75fb      	strb	r3, [r7, #23]
    }

    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d007      	beq.n	8001a4e <set_osr_settings+0x42>
    {
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	68b9      	ldr	r1, [r7, #8]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f000 f842 	bl	8001ace <set_osr_press_temp_settings>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001a4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b084      	sub	sp, #16
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t ctrl_hum;
    uint8_t ctrl_meas;
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8001a64:	23f2      	movs	r3, #242	; 0xf2
 8001a66:	733b      	strb	r3, [r7, #12]

    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	789b      	ldrb	r3, [r3, #2]
 8001a6c:	f003 0307 	and.w	r3, r3, #7
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	73bb      	strb	r3, [r7, #14]

    /* Write the humidity control value in the register */
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8001a74:	f107 010e 	add.w	r1, r7, #14
 8001a78:	f107 000c 	add.w	r0, r7, #12
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f7ff fd57 	bl	8001532 <bme280_set_regs>
 8001a84:	4603      	mov	r3, r0
 8001a86:	73fb      	strb	r3, [r7, #15]

    /* Humidity related changes will be only effective after a
     * write operation to ctrl_meas register
     */
    if (rslt == BME280_OK)
 8001a88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d118      	bne.n	8001ac2 <set_osr_humidity_settings+0x68>
    {
        reg_addr = BME280_CTRL_MEAS_ADDR;
 8001a90:	23f4      	movs	r3, #244	; 0xf4
 8001a92:	733b      	strb	r3, [r7, #12]
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8001a94:	7b38      	ldrb	r0, [r7, #12]
 8001a96:	f107 010d 	add.w	r1, r7, #13
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f7ff fd0e 	bl	80014be <bme280_get_regs>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	73fb      	strb	r3, [r7, #15]

        if (rslt == BME280_OK)
 8001aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d109      	bne.n	8001ac2 <set_osr_humidity_settings+0x68>
        {
            rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8001aae:	f107 010d 	add.w	r1, r7, #13
 8001ab2:	f107 000c 	add.w	r0, r7, #12
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f7ff fd3a 	bl	8001532 <bme280_set_regs>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <set_osr_press_temp_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          struct bme280_dev *dev)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b086      	sub	sp, #24
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	60b9      	str	r1, [r7, #8]
 8001ad8:	607a      	str	r2, [r7, #4]
 8001ada:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8001adc:	23f4      	movs	r3, #244	; 0xf4
 8001ade:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8001ae0:	7db8      	ldrb	r0, [r7, #22]
 8001ae2:	f107 0115 	add.w	r1, r7, #21
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f7ff fce8 	bl	80014be <bme280_get_regs>
 8001aee:	4603      	mov	r3, r0
 8001af0:	75fb      	strb	r3, [r7, #23]

    if (rslt == BME280_OK)
 8001af2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d11f      	bne.n	8001b3a <set_osr_press_temp_settings+0x6c>
    {
        if (desired_settings & BME280_OSR_PRESS_SEL)
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d005      	beq.n	8001b10 <set_osr_press_temp_settings+0x42>
        {
            fill_osr_press_settings(&reg_data, settings);
 8001b04:	f107 0315 	add.w	r3, r7, #21
 8001b08:	68b9      	ldr	r1, [r7, #8]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f000 f88e 	bl	8001c2c <fill_osr_press_settings>
        }

        if (desired_settings & BME280_OSR_TEMP_SEL)
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d005      	beq.n	8001b26 <set_osr_press_temp_settings+0x58>
        {
            fill_osr_temp_settings(&reg_data, settings);
 8001b1a:	f107 0315 	add.w	r3, r7, #21
 8001b1e:	68b9      	ldr	r1, [r7, #8]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f000 f8a0 	bl	8001c66 <fill_osr_temp_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001b26:	f107 0115 	add.w	r1, r7, #21
 8001b2a:	f107 0016 	add.w	r0, r7, #22
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f7ff fcfe 	bl	8001532 <bme280_set_regs>
 8001b36:	4603      	mov	r3, r0
 8001b38:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001b3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <set_filter_standby_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          struct bme280_dev *dev)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b086      	sub	sp, #24
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	607a      	str	r2, [r7, #4]
 8001b52:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 8001b54:	23f5      	movs	r3, #245	; 0xf5
 8001b56:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8001b58:	7db8      	ldrb	r0, [r7, #22]
 8001b5a:	f107 0115 	add.w	r1, r7, #21
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f7ff fcac 	bl	80014be <bme280_get_regs>
 8001b66:	4603      	mov	r3, r0
 8001b68:	75fb      	strb	r3, [r7, #23]

    if (rslt == BME280_OK)
 8001b6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d11f      	bne.n	8001bb2 <set_filter_standby_settings+0x6c>
    {
        if (desired_settings & BME280_FILTER_SEL)
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	f003 0308 	and.w	r3, r3, #8
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d005      	beq.n	8001b88 <set_filter_standby_settings+0x42>
        {
            fill_filter_settings(&reg_data, settings);
 8001b7c:	f107 0315 	add.w	r3, r7, #21
 8001b80:	68b9      	ldr	r1, [r7, #8]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f000 f81b 	bl	8001bbe <fill_filter_settings>
        }

        if (desired_settings & BME280_STANDBY_SEL)
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
 8001b8a:	f003 0310 	and.w	r3, r3, #16
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d005      	beq.n	8001b9e <set_filter_standby_settings+0x58>
        {
            fill_standby_settings(&reg_data, settings);
 8001b92:	f107 0315 	add.w	r3, r7, #21
 8001b96:	68b9      	ldr	r1, [r7, #8]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f000 f82d 	bl	8001bf8 <fill_standby_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001b9e:	f107 0115 	add.w	r1, r7, #21
 8001ba2:	f107 0016 	add.w	r0, r7, #22
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f7ff fcc2 	bl	8001532 <bme280_set_regs>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001bb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	b25b      	sxtb	r3, r3
 8001bce:	f023 031c 	bic.w	r3, r3, #28
 8001bd2:	b25a      	sxtb	r2, r3
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	78db      	ldrb	r3, [r3, #3]
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	b25b      	sxtb	r3, r3
 8001bdc:	f003 031c 	and.w	r3, r3, #28
 8001be0:	b25b      	sxtb	r3, r3
 8001be2:	4313      	orrs	r3, r2
 8001be4:	b25b      	sxtb	r3, r3
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	701a      	strb	r2, [r3, #0]
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	b25b      	sxtb	r3, r3
 8001c08:	f003 031f 	and.w	r3, r3, #31
 8001c0c:	b25a      	sxtb	r2, r3
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	791b      	ldrb	r3, [r3, #4]
 8001c12:	015b      	lsls	r3, r3, #5
 8001c14:	b25b      	sxtb	r3, r3
 8001c16:	4313      	orrs	r3, r2
 8001c18:	b25b      	sxtb	r3, r3
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	701a      	strb	r2, [r3, #0]
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	b25b      	sxtb	r3, r3
 8001c3c:	f023 031c 	bic.w	r3, r3, #28
 8001c40:	b25a      	sxtb	r2, r3
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	b25b      	sxtb	r3, r3
 8001c4a:	f003 031c 	and.w	r3, r3, #28
 8001c4e:	b25b      	sxtb	r3, r3
 8001c50:	4313      	orrs	r3, r2
 8001c52:	b25b      	sxtb	r3, r3
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	701a      	strb	r2, [r3, #0]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
 8001c6e:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	b25b      	sxtb	r3, r3
 8001c76:	f003 031f 	and.w	r3, r3, #31
 8001c7a:	b25a      	sxtb	r2, r3
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	785b      	ldrb	r3, [r3, #1]
 8001c80:	015b      	lsls	r3, r3, #5
 8001c82:	b25b      	sxtb	r3, r3
 8001c84:	4313      	orrs	r3, r2
 8001c86:	b25b      	sxtb	r3, r3
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	701a      	strb	r2, [r3, #0]
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
 8001ca2:	6039      	str	r1, [r7, #0]
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	709a      	strb	r2, [r3, #2]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3302      	adds	r3, #2
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	109b      	asrs	r3, r3, #2
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	701a      	strb	r2, [r3, #0]
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	3302      	adds	r3, #2
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	095b      	lsrs	r3, r3, #5
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	705a      	strb	r2, [r3, #1]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3303      	adds	r3, #3
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	109b      	asrs	r3, r3, #2
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	70da      	strb	r2, [r3, #3]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3303      	adds	r3, #3
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	095b      	lsrs	r3, r3, #5
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	711a      	strb	r2, [r3, #4]
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, struct bme280_dev *dev)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b084      	sub	sp, #16
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	4603      	mov	r3, r0
 8001d0a:	6039      	str	r1, [r7, #0]
 8001d0c:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8001d0e:	23f4      	movs	r3, #244	; 0xf4
 8001d10:	73bb      	strb	r3, [r7, #14]

    /* Variable to store the value read from power mode register */
    uint8_t sensor_mode_reg_val;

    /* Read the power mode register */
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8001d12:	7bb8      	ldrb	r0, [r7, #14]
 8001d14:	f107 010d 	add.w	r1, r7, #13
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f7ff fbcf 	bl	80014be <bme280_get_regs>
 8001d20:	4603      	mov	r3, r0
 8001d22:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BME280_OK)
 8001d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d117      	bne.n	8001d5c <write_power_mode+0x5a>
    {
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8001d2c:	7b7b      	ldrb	r3, [r7, #13]
 8001d2e:	b25b      	sxtb	r3, r3
 8001d30:	f023 0303 	bic.w	r3, r3, #3
 8001d34:	b25a      	sxtb	r2, r3
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	b25b      	sxtb	r3, r3
 8001d40:	4313      	orrs	r3, r2
 8001d42:	b25b      	sxtb	r3, r3
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8001d48:	f107 010d 	add.w	r1, r7, #13
 8001d4c:	f107 000e 	add.w	r0, r7, #14
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f7ff fbed 	bl	8001532 <bme280_set_regs>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001d5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bme280_dev *dev)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[4];
    struct bme280_settings settings;

    rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8001d70:	f107 0110 	add.w	r1, r7, #16
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2204      	movs	r2, #4
 8001d78:	20f2      	movs	r0, #242	; 0xf2
 8001d7a:	f7ff fba0 	bl	80014be <bme280_get_regs>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	75fb      	strb	r3, [r7, #23]

    if (rslt == BME280_OK)
 8001d82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d118      	bne.n	8001dbc <put_device_to_sleep+0x54>
    {
        parse_device_settings(reg_data, &settings);
 8001d8a:	f107 0208 	add.w	r2, r7, #8
 8001d8e:	f107 0310 	add.w	r3, r7, #16
 8001d92:	4611      	mov	r1, r2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff80 	bl	8001c9a <parse_device_settings>
        rslt = bme280_soft_reset(dev);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff fcf7 	bl	800178e <bme280_soft_reset>
 8001da0:	4603      	mov	r3, r0
 8001da2:	75fb      	strb	r3, [r7, #23]

        if (rslt == BME280_OK)
 8001da4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d107      	bne.n	8001dbc <put_device_to_sleep+0x54>
        {
            rslt = reload_device_settings(&settings, dev);
 8001dac:	f107 0308 	add.w	r3, r7, #8
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f000 f808 	bl	8001dc8 <reload_device_settings>
 8001db8:	4603      	mov	r3, r0
 8001dba:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8001dbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	6879      	ldr	r1, [r7, #4]
 8001dd6:	201f      	movs	r0, #31
 8001dd8:	f7ff fe18 	bl	8001a0c <set_osr_settings>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME280_OK)
 8001de0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d106      	bne.n	8001df6 <reload_device_settings+0x2e>
    {
        rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	201f      	movs	r0, #31
 8001dee:	f7ff feaa 	bl	8001b46 <set_filter_standby_settings>
 8001df2:	4603      	mov	r3, r0
 8001df4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
	...

08001e04 <compensate_temperature>:
/*!
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data, struct bme280_calib_data *calib_data)
{
 8001e04:	b5b0      	push	{r4, r5, r7, lr}
 8001e06:	b08c      	sub	sp, #48	; 0x30
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double temperature;
    double temperature_min = -40;
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	4b5f      	ldr	r3, [pc, #380]	; (8001f90 <compensate_temperature+0x18c>)
 8001e14:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double temperature_max = 85;
 8001e18:	f04f 0200 	mov.w	r2, #0
 8001e1c:	4b5d      	ldr	r3, [pc, #372]	; (8001f94 <compensate_temperature+0x190>)
 8001e1e:	e9c7 2306 	strd	r2, r3, [r7, #24]

    var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_t1) / 1024.0;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7fe fb6c 	bl	8000504 <__aeabi_ui2d>
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	4b59      	ldr	r3, [pc, #356]	; (8001f98 <compensate_temperature+0x194>)
 8001e32:	f7fe fd0b 	bl	800084c <__aeabi_ddiv>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4614      	mov	r4, r2
 8001e3c:	461d      	mov	r5, r3
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7fe fb5e 	bl	8000504 <__aeabi_ui2d>
 8001e48:	f04f 0200 	mov.w	r2, #0
 8001e4c:	4b53      	ldr	r3, [pc, #332]	; (8001f9c <compensate_temperature+0x198>)
 8001e4e:	f7fe fcfd 	bl	800084c <__aeabi_ddiv>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4620      	mov	r0, r4
 8001e58:	4629      	mov	r1, r5
 8001e5a:	f7fe fa15 	bl	8000288 <__aeabi_dsub>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = var1 * ((double)calib_data->dig_t2);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7fe fb59 	bl	8000524 <__aeabi_i2d>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e7a:	f7fe fbbd 	bl	80005f8 <__aeabi_dmul>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_t1) / 8192.0);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe fb3a 	bl	8000504 <__aeabi_ui2d>
 8001e90:	f04f 0200 	mov.w	r2, #0
 8001e94:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001e98:	f7fe fcd8 	bl	800084c <__aeabi_ddiv>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4614      	mov	r4, r2
 8001ea2:	461d      	mov	r5, r3
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7fe fb2b 	bl	8000504 <__aeabi_ui2d>
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	4b3b      	ldr	r3, [pc, #236]	; (8001fa0 <compensate_temperature+0x19c>)
 8001eb4:	f7fe fcca 	bl	800084c <__aeabi_ddiv>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4620      	mov	r0, r4
 8001ebe:	4629      	mov	r1, r5
 8001ec0:	f7fe f9e2 	bl	8000288 <__aeabi_dsub>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var2 = (var2 * var2) * ((double)calib_data->dig_t3);
 8001ecc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ed0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ed4:	f7fe fb90 	bl	80005f8 <__aeabi_dmul>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4614      	mov	r4, r2
 8001ede:	461d      	mov	r5, r3
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7fe fb1c 	bl	8000524 <__aeabi_i2d>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4620      	mov	r0, r4
 8001ef2:	4629      	mov	r1, r5
 8001ef4:	f7fe fb80 	bl	80005f8 <__aeabi_dmul>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	e9c7 2302 	strd	r2, r3, [r7, #8]
    calib_data->t_fine = (int32_t)(var1 + var2);
 8001f00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f04:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f08:	f7fe f9c0 	bl	800028c <__adddf3>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4610      	mov	r0, r2
 8001f12:	4619      	mov	r1, r3
 8001f14:	f7fe fe20 	bl	8000b58 <__aeabi_d2iz>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	625a      	str	r2, [r3, #36]	; 0x24
    temperature = (var1 + var2) / 5120.0;
 8001f1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f22:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f26:	f7fe f9b1 	bl	800028c <__adddf3>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	4610      	mov	r0, r2
 8001f30:	4619      	mov	r1, r3
 8001f32:	f04f 0200 	mov.w	r2, #0
 8001f36:	4b1b      	ldr	r3, [pc, #108]	; (8001fa4 <compensate_temperature+0x1a0>)
 8001f38:	f7fe fc88 	bl	800084c <__aeabi_ddiv>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    if (temperature < temperature_min)
 8001f44:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f48:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f4c:	f7fe fdc6 	bl	8000adc <__aeabi_dcmplt>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d004      	beq.n	8001f60 <compensate_temperature+0x15c>
    {
        temperature = temperature_min;
 8001f56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f5a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001f5e:	e00c      	b.n	8001f7a <compensate_temperature+0x176>
    }
    else if (temperature > temperature_max)
 8001f60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f64:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f68:	f7fe fdd6 	bl	8000b18 <__aeabi_dcmpgt>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <compensate_temperature+0x176>
    {
        temperature = temperature_max;
 8001f72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f76:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    }

    return temperature;
 8001f7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f7e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001f82:	eeb0 0a47 	vmov.f32	s0, s14
 8001f86:	eef0 0a67 	vmov.f32	s1, s15
 8001f8a:	3730      	adds	r7, #48	; 0x30
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f90:	c0440000 	.word	0xc0440000
 8001f94:	40554000 	.word	0x40554000
 8001f98:	40d00000 	.word	0x40d00000
 8001f9c:	40900000 	.word	0x40900000
 8001fa0:	40c00000 	.word	0x40c00000
 8001fa4:	40b40000 	.word	0x40b40000

08001fa8 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 8001fa8:	b5b0      	push	{r4, r5, r7, lr}
 8001faa:	b08e      	sub	sp, #56	; 0x38
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double var3;
    double pressure;
    double pressure_min = 30000.0;
 8001fb2:	a3d9      	add	r3, pc, #868	; (adr r3, 8002318 <compensate_pressure+0x370>)
 8001fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double pressure_max = 110000.0;
 8001fbc:	a3d8      	add	r3, pc, #864	; (adr r3, 8002320 <compensate_pressure+0x378>)
 8001fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc2:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe faaa 	bl	8000524 <__aeabi_i2d>
 8001fd0:	f04f 0200 	mov.w	r2, #0
 8001fd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fd8:	f7fe fc38 	bl	800084c <__aeabi_ddiv>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	f04f 0200 	mov.w	r2, #0
 8001fe8:	4bc1      	ldr	r3, [pc, #772]	; (80022f0 <compensate_pressure+0x348>)
 8001fea:	f7fe f94d 	bl	8000288 <__aeabi_dsub>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double)calib_data->dig_p6) / 32768.0;
 8001ff6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ffa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ffe:	f7fe fafb 	bl	80005f8 <__aeabi_dmul>
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	4614      	mov	r4, r2
 8002008:	461d      	mov	r5, r3
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe fa87 	bl	8000524 <__aeabi_i2d>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	4620      	mov	r0, r4
 800201c:	4629      	mov	r1, r5
 800201e:	f7fe faeb 	bl	80005f8 <__aeabi_dmul>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	4610      	mov	r0, r2
 8002028:	4619      	mov	r1, r3
 800202a:	f04f 0200 	mov.w	r2, #0
 800202e:	4bb1      	ldr	r3, [pc, #708]	; (80022f4 <compensate_pressure+0x34c>)
 8002030:	f7fe fc0c 	bl	800084c <__aeabi_ddiv>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double)calib_data->dig_p5) * 2.0;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002042:	4618      	mov	r0, r3
 8002044:	f7fe fa6e 	bl	8000524 <__aeabi_i2d>
 8002048:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800204c:	f7fe fad4 	bl	80005f8 <__aeabi_dmul>
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	4610      	mov	r0, r2
 8002056:	4619      	mov	r1, r3
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	f7fe f916 	bl	800028c <__adddf3>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002068:	f7fe f910 	bl	800028c <__adddf3>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double)calib_data->dig_p4) * 65536.0);
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	4b9f      	ldr	r3, [pc, #636]	; (80022f8 <compensate_pressure+0x350>)
 800207a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800207e:	f7fe fbe5 	bl	800084c <__aeabi_ddiv>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4614      	mov	r4, r2
 8002088:	461d      	mov	r5, r3
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe fa47 	bl	8000524 <__aeabi_i2d>
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	4b98      	ldr	r3, [pc, #608]	; (80022fc <compensate_pressure+0x354>)
 800209c:	f7fe faac 	bl	80005f8 <__aeabi_dmul>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4620      	mov	r0, r4
 80020a6:	4629      	mov	r1, r5
 80020a8:	f7fe f8f0 	bl	800028c <__adddf3>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var3 = ((double)calib_data->dig_p3) * var1 * var1 / 524288.0;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe fa32 	bl	8000524 <__aeabi_i2d>
 80020c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020c4:	f7fe fa98 	bl	80005f8 <__aeabi_dmul>
 80020c8:	4602      	mov	r2, r0
 80020ca:	460b      	mov	r3, r1
 80020cc:	4610      	mov	r0, r2
 80020ce:	4619      	mov	r1, r3
 80020d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020d4:	f7fe fa90 	bl	80005f8 <__aeabi_dmul>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4610      	mov	r0, r2
 80020de:	4619      	mov	r1, r3
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	4b86      	ldr	r3, [pc, #536]	; (8002300 <compensate_pressure+0x358>)
 80020e6:	f7fe fbb1 	bl	800084c <__aeabi_ddiv>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var1 = (var3 + ((double)calib_data->dig_p2) * var1) / 524288.0;
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7fe fa13 	bl	8000524 <__aeabi_i2d>
 80020fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002102:	f7fe fa79 	bl	80005f8 <__aeabi_dmul>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	4610      	mov	r0, r2
 800210c:	4619      	mov	r1, r3
 800210e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002112:	f7fe f8bb 	bl	800028c <__adddf3>
 8002116:	4602      	mov	r2, r0
 8002118:	460b      	mov	r3, r1
 800211a:	4610      	mov	r0, r2
 800211c:	4619      	mov	r1, r3
 800211e:	f04f 0200 	mov.w	r2, #0
 8002122:	4b77      	ldr	r3, [pc, #476]	; (8002300 <compensate_pressure+0x358>)
 8002124:	f7fe fb92 	bl	800084c <__aeabi_ddiv>
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_p1);
 8002130:	f04f 0200 	mov.w	r2, #0
 8002134:	4b6f      	ldr	r3, [pc, #444]	; (80022f4 <compensate_pressure+0x34c>)
 8002136:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800213a:	f7fe fb87 	bl	800084c <__aeabi_ddiv>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	4610      	mov	r0, r2
 8002144:	4619      	mov	r1, r3
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	4b6e      	ldr	r3, [pc, #440]	; (8002304 <compensate_pressure+0x35c>)
 800214c:	f7fe f89e 	bl	800028c <__adddf3>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4614      	mov	r4, r2
 8002156:	461d      	mov	r5, r3
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	88db      	ldrh	r3, [r3, #6]
 800215c:	4618      	mov	r0, r3
 800215e:	f7fe f9d1 	bl	8000504 <__aeabi_ui2d>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	4620      	mov	r0, r4
 8002168:	4629      	mov	r1, r5
 800216a:	f7fe fa45 	bl	80005f8 <__aeabi_dmul>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	e9c7 2306 	strd	r2, r3, [r7, #24]

    /* avoid exception caused by division by zero */
    if (var1 > (0.0))
 8002176:	f04f 0200 	mov.w	r2, #0
 800217a:	f04f 0300 	mov.w	r3, #0
 800217e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002182:	f7fe fcc9 	bl	8000b18 <__aeabi_dcmpgt>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	f000 80cd 	beq.w	8002328 <compensate_pressure+0x380>
    {
        pressure = 1048576.0 - (double) uncomp_data->pressure;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe f9b6 	bl	8000504 <__aeabi_ui2d>
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	f04f 0000 	mov.w	r0, #0
 80021a0:	4959      	ldr	r1, [pc, #356]	; (8002308 <compensate_pressure+0x360>)
 80021a2:	f7fe f871 	bl	8000288 <__aeabi_dsub>
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 80021ae:	f04f 0200 	mov.w	r2, #0
 80021b2:	4b56      	ldr	r3, [pc, #344]	; (800230c <compensate_pressure+0x364>)
 80021b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021b8:	f7fe fb48 	bl	800084c <__aeabi_ddiv>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80021c4:	f7fe f860 	bl	8000288 <__aeabi_dsub>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	4610      	mov	r0, r2
 80021ce:	4619      	mov	r1, r3
 80021d0:	a345      	add	r3, pc, #276	; (adr r3, 80022e8 <compensate_pressure+0x340>)
 80021d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d6:	f7fe fa0f 	bl	80005f8 <__aeabi_dmul>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	4610      	mov	r0, r2
 80021e0:	4619      	mov	r1, r3
 80021e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021e6:	f7fe fb31 	bl	800084c <__aeabi_ddiv>
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        var1 = ((double)calib_data->dig_p9) * pressure * pressure / 2147483648.0;
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe f993 	bl	8000524 <__aeabi_i2d>
 80021fe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002202:	f7fe f9f9 	bl	80005f8 <__aeabi_dmul>
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	4610      	mov	r0, r2
 800220c:	4619      	mov	r1, r3
 800220e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002212:	f7fe f9f1 	bl	80005f8 <__aeabi_dmul>
 8002216:	4602      	mov	r2, r0
 8002218:	460b      	mov	r3, r1
 800221a:	4610      	mov	r0, r2
 800221c:	4619      	mov	r1, r3
 800221e:	f04f 0200 	mov.w	r2, #0
 8002222:	4b3b      	ldr	r3, [pc, #236]	; (8002310 <compensate_pressure+0x368>)
 8002224:	f7fe fb12 	bl	800084c <__aeabi_ddiv>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)calib_data->dig_p8) / 32768.0;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002236:	4618      	mov	r0, r3
 8002238:	f7fe f974 	bl	8000524 <__aeabi_i2d>
 800223c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002240:	f7fe f9da 	bl	80005f8 <__aeabi_dmul>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	4610      	mov	r0, r2
 800224a:	4619      	mov	r1, r3
 800224c:	f04f 0200 	mov.w	r2, #0
 8002250:	4b28      	ldr	r3, [pc, #160]	; (80022f4 <compensate_pressure+0x34c>)
 8002252:	f7fe fafb 	bl	800084c <__aeabi_ddiv>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	e9c7 2304 	strd	r2, r3, [r7, #16]
        pressure = pressure + (var1 + var2 + ((double)calib_data->dig_p7)) / 16.0;
 800225e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002262:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002266:	f7fe f811 	bl	800028c <__adddf3>
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	4614      	mov	r4, r2
 8002270:	461d      	mov	r5, r3
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe f953 	bl	8000524 <__aeabi_i2d>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4620      	mov	r0, r4
 8002284:	4629      	mov	r1, r5
 8002286:	f7fe f801 	bl	800028c <__adddf3>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	4610      	mov	r0, r2
 8002290:	4619      	mov	r1, r3
 8002292:	f04f 0200 	mov.w	r2, #0
 8002296:	4b1f      	ldr	r3, [pc, #124]	; (8002314 <compensate_pressure+0x36c>)
 8002298:	f7fe fad8 	bl	800084c <__aeabi_ddiv>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80022a4:	f7fd fff2 	bl	800028c <__adddf3>
 80022a8:	4602      	mov	r2, r0
 80022aa:	460b      	mov	r3, r1
 80022ac:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

        if (pressure < pressure_min)
 80022b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022b4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80022b8:	f7fe fc10 	bl	8000adc <__aeabi_dcmplt>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d004      	beq.n	80022cc <compensate_pressure+0x324>
        {
            pressure = pressure_min;
 80022c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022c6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80022ca:	e031      	b.n	8002330 <compensate_pressure+0x388>
        }
        else if (pressure > pressure_max)
 80022cc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022d0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80022d4:	f7fe fc20 	bl	8000b18 <__aeabi_dcmpgt>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d028      	beq.n	8002330 <compensate_pressure+0x388>
        {
            pressure = pressure_max;
 80022de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022e2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80022e6:	e023      	b.n	8002330 <compensate_pressure+0x388>
 80022e8:	00000000 	.word	0x00000000
 80022ec:	40b86a00 	.word	0x40b86a00
 80022f0:	40ef4000 	.word	0x40ef4000
 80022f4:	40e00000 	.word	0x40e00000
 80022f8:	40100000 	.word	0x40100000
 80022fc:	40f00000 	.word	0x40f00000
 8002300:	41200000 	.word	0x41200000
 8002304:	3ff00000 	.word	0x3ff00000
 8002308:	41300000 	.word	0x41300000
 800230c:	40b00000 	.word	0x40b00000
 8002310:	41e00000 	.word	0x41e00000
 8002314:	40300000 	.word	0x40300000
 8002318:	00000000 	.word	0x00000000
 800231c:	40dd4c00 	.word	0x40dd4c00
 8002320:	00000000 	.word	0x00000000
 8002324:	40fadb00 	.word	0x40fadb00
        }
    }
    else /* Invalid case */
    {
        pressure = pressure_min;
 8002328:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800232c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    }

    return pressure;
 8002330:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002334:	ec43 2b17 	vmov	d7, r2, r3
}
 8002338:	eeb0 0a47 	vmov.f32	s0, s14
 800233c:	eef0 0a67 	vmov.f32	s1, s15
 8002340:	3738      	adds	r7, #56	; 0x38
 8002342:	46bd      	mov	sp, r7
 8002344:	bdb0      	pop	{r4, r5, r7, pc}
 8002346:	bf00      	nop

08002348 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 8002348:	b5b0      	push	{r4, r5, r7, lr}
 800234a:	b094      	sub	sp, #80	; 0x50
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
    double humidity;
    double humidity_min = 0.0;
 8002352:	f04f 0200 	mov.w	r2, #0
 8002356:	f04f 0300 	mov.w	r3, #0
 800235a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    double humidity_max = 100.0;
 800235e:	f04f 0200 	mov.w	r2, #0
 8002362:	4b81      	ldr	r3, [pc, #516]	; (8002568 <compensate_humidity+0x220>)
 8002364:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double var3;
    double var4;
    double var5;
    double var6;

    var1 = ((double)calib_data->t_fine) - 76800.0;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	4618      	mov	r0, r3
 800236e:	f7fe f8d9 	bl	8000524 <__aeabi_i2d>
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	4b7d      	ldr	r3, [pc, #500]	; (800256c <compensate_humidity+0x224>)
 8002378:	f7fd ff86 	bl	8000288 <__aeabi_dsub>
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    var2 = (((double)calib_data->dig_h4) * 64.0 + (((double)calib_data->dig_h5) / 16384.0) * var1);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe f8ca 	bl	8000524 <__aeabi_i2d>
 8002390:	f04f 0200 	mov.w	r2, #0
 8002394:	4b76      	ldr	r3, [pc, #472]	; (8002570 <compensate_humidity+0x228>)
 8002396:	f7fe f92f 	bl	80005f8 <__aeabi_dmul>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	4614      	mov	r4, r2
 80023a0:	461d      	mov	r5, r3
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe f8bb 	bl	8000524 <__aeabi_i2d>
 80023ae:	f04f 0200 	mov.w	r2, #0
 80023b2:	4b70      	ldr	r3, [pc, #448]	; (8002574 <compensate_humidity+0x22c>)
 80023b4:	f7fe fa4a 	bl	800084c <__aeabi_ddiv>
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	4610      	mov	r0, r2
 80023be:	4619      	mov	r1, r3
 80023c0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80023c4:	f7fe f918 	bl	80005f8 <__aeabi_dmul>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	4620      	mov	r0, r4
 80023ce:	4629      	mov	r1, r5
 80023d0:	f7fd ff5c 	bl	800028c <__adddf3>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    var3 = uncomp_data->humidity - var2;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fe f88f 	bl	8000504 <__aeabi_ui2d>
 80023e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80023ea:	f7fd ff4d 	bl	8000288 <__aeabi_dsub>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    var4 = ((double)calib_data->dig_h2) / 65536.0;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7fe f891 	bl	8000524 <__aeabi_i2d>
 8002402:	f04f 0200 	mov.w	r2, #0
 8002406:	4b5c      	ldr	r3, [pc, #368]	; (8002578 <compensate_humidity+0x230>)
 8002408:	f7fe fa20 	bl	800084c <__aeabi_ddiv>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var5 = (1.0 + (((double)calib_data->dig_h3) / 67108864.0) * var1);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	7f1b      	ldrb	r3, [r3, #28]
 8002418:	4618      	mov	r0, r3
 800241a:	f7fe f873 	bl	8000504 <__aeabi_ui2d>
 800241e:	f04f 0200 	mov.w	r2, #0
 8002422:	4b56      	ldr	r3, [pc, #344]	; (800257c <compensate_humidity+0x234>)
 8002424:	f7fe fa12 	bl	800084c <__aeabi_ddiv>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4610      	mov	r0, r2
 800242e:	4619      	mov	r1, r3
 8002430:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002434:	f7fe f8e0 	bl	80005f8 <__aeabi_dmul>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	4610      	mov	r0, r2
 800243e:	4619      	mov	r1, r3
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	4b4e      	ldr	r3, [pc, #312]	; (8002580 <compensate_humidity+0x238>)
 8002446:	f7fd ff21 	bl	800028c <__adddf3>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var6 = 1.0 + (((double)calib_data->dig_h6) / 67108864.0) * var1 * var5;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8002458:	4618      	mov	r0, r3
 800245a:	f7fe f863 	bl	8000524 <__aeabi_i2d>
 800245e:	f04f 0200 	mov.w	r2, #0
 8002462:	4b46      	ldr	r3, [pc, #280]	; (800257c <compensate_humidity+0x234>)
 8002464:	f7fe f9f2 	bl	800084c <__aeabi_ddiv>
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
 800246c:	4610      	mov	r0, r2
 800246e:	4619      	mov	r1, r3
 8002470:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002474:	f7fe f8c0 	bl	80005f8 <__aeabi_dmul>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	4610      	mov	r0, r2
 800247e:	4619      	mov	r1, r3
 8002480:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002484:	f7fe f8b8 	bl	80005f8 <__aeabi_dmul>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4610      	mov	r0, r2
 800248e:	4619      	mov	r1, r3
 8002490:	f04f 0200 	mov.w	r2, #0
 8002494:	4b3a      	ldr	r3, [pc, #232]	; (8002580 <compensate_humidity+0x238>)
 8002496:	f7fd fef9 	bl	800028c <__adddf3>
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var6 = var3 * var4 * (var5 * var6);
 80024a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024a6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80024aa:	f7fe f8a5 	bl	80005f8 <__aeabi_dmul>
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	4614      	mov	r4, r2
 80024b4:	461d      	mov	r5, r3
 80024b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024be:	f7fe f89b 	bl	80005f8 <__aeabi_dmul>
 80024c2:	4602      	mov	r2, r0
 80024c4:	460b      	mov	r3, r1
 80024c6:	4620      	mov	r0, r4
 80024c8:	4629      	mov	r1, r5
 80024ca:	f7fe f895 	bl	80005f8 <__aeabi_dmul>
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    humidity = var6 * (1.0 - ((double)calib_data->dig_h1) * var6 / 524288.0);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	7e1b      	ldrb	r3, [r3, #24]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe f812 	bl	8000504 <__aeabi_ui2d>
 80024e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024e4:	f7fe f888 	bl	80005f8 <__aeabi_dmul>
 80024e8:	4602      	mov	r2, r0
 80024ea:	460b      	mov	r3, r1
 80024ec:	4610      	mov	r0, r2
 80024ee:	4619      	mov	r1, r3
 80024f0:	f04f 0200 	mov.w	r2, #0
 80024f4:	4b23      	ldr	r3, [pc, #140]	; (8002584 <compensate_humidity+0x23c>)
 80024f6:	f7fe f9a9 	bl	800084c <__aeabi_ddiv>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	f04f 0000 	mov.w	r0, #0
 8002502:	491f      	ldr	r1, [pc, #124]	; (8002580 <compensate_humidity+0x238>)
 8002504:	f7fd fec0 	bl	8000288 <__aeabi_dsub>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002510:	f7fe f872 	bl	80005f8 <__aeabi_dmul>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

    if (humidity > humidity_max)
 800251c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002520:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002524:	f7fe faf8 	bl	8000b18 <__aeabi_dcmpgt>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d004      	beq.n	8002538 <compensate_humidity+0x1f0>
    {
        humidity = humidity_max;
 800252e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002532:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8002536:	e00c      	b.n	8002552 <compensate_humidity+0x20a>
    }
    else if (humidity < humidity_min)
 8002538:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800253c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002540:	f7fe facc 	bl	8000adc <__aeabi_dcmplt>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <compensate_humidity+0x20a>
    {
        humidity = humidity_min;
 800254a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800254e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    }

    return humidity;
 8002552:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002556:	ec43 2b17 	vmov	d7, r2, r3
}
 800255a:	eeb0 0a47 	vmov.f32	s0, s14
 800255e:	eef0 0a67 	vmov.f32	s1, s15
 8002562:	3750      	adds	r7, #80	; 0x50
 8002564:	46bd      	mov	sp, r7
 8002566:	bdb0      	pop	{r4, r5, r7, pc}
 8002568:	40590000 	.word	0x40590000
 800256c:	40f2c000 	.word	0x40f2c000
 8002570:	40500000 	.word	0x40500000
 8002574:	40d00000 	.word	0x40d00000
 8002578:	40f00000 	.word	0x40f00000
 800257c:	41900000 	.word	0x41900000
 8002580:	3ff00000 	.word	0x3ff00000
 8002584:	41200000 	.word	0x41200000

08002588 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08a      	sub	sp, #40	; 0x28
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8002590:	2388      	movs	r3, #136	; 0x88
 8002592:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    /* Array to store calibration data */
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	f107 0310 	add.w	r3, r7, #16
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	605a      	str	r2, [r3, #4]
 80025a4:	609a      	str	r2, [r3, #8]
 80025a6:	60da      	str	r2, [r3, #12]
 80025a8:	611a      	str	r2, [r3, #16]
 80025aa:	829a      	strh	r2, [r3, #20]

    /* Read the calibration data from the sensor */
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 80025ac:	f107 010c 	add.w	r1, r7, #12
 80025b0:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	221a      	movs	r2, #26
 80025b8:	f7fe ff81 	bl	80014be <bme280_get_regs>
 80025bc:	4603      	mov	r3, r0
 80025be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (rslt == BME280_OK)
 80025c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d11d      	bne.n	8002606 <get_calib_data+0x7e>
    {
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 80025ca:	f107 030c 	add.w	r3, r7, #12
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f000 f84a 	bl	800266a <parse_temp_press_calib_data>
        reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 80025d6:	23e1      	movs	r3, #225	; 0xe1
 80025d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

        /* Read the humidity calibration data from the sensor */
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 80025dc:	f107 010c 	add.w	r1, r7, #12
 80025e0:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2207      	movs	r2, #7
 80025e8:	f7fe ff69 	bl	80014be <bme280_get_regs>
 80025ec:	4603      	mov	r3, r0
 80025ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (rslt == BME280_OK)
 80025f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d105      	bne.n	8002606 <get_calib_data+0x7e>
        {
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 80025fa:	f107 030c 	add.w	r3, r7, #12
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	4618      	mov	r0, r3
 8002602:	f000 f8e1 	bl	80027c8 <parse_humidity_calib_data>
        }
    }

    return rslt;
 8002606:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800260a:	4618      	mov	r0, r3
 800260c:	3728      	adds	r7, #40	; 0x28
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8002612:	b480      	push	{r7}
 8002614:	b087      	sub	sp, #28
 8002616:	af00      	add	r7, sp, #0
 8002618:	60f8      	str	r0, [r7, #12]
 800261a:	60b9      	str	r1, [r7, #8]
 800261c:	607a      	str	r2, [r7, #4]
 800261e:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 8002620:	2301      	movs	r3, #1
 8002622:	75fb      	strb	r3, [r7, #23]
 8002624:	e016      	b.n	8002654 <interleave_reg_addr+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8002626:	7dfb      	ldrb	r3, [r7, #23]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	441a      	add	r2, r3
 800262c:	7dfb      	ldrb	r3, [r7, #23]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	3b01      	subs	r3, #1
 8002632:	68b9      	ldr	r1, [r7, #8]
 8002634:	440b      	add	r3, r1
 8002636:	7812      	ldrb	r2, [r2, #0]
 8002638:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 800263a:	7dfb      	ldrb	r3, [r7, #23]
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	441a      	add	r2, r3
 8002640:	7dfb      	ldrb	r3, [r7, #23]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	4619      	mov	r1, r3
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	440b      	add	r3, r1
 800264a:	7812      	ldrb	r2, [r2, #0]
 800264c:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 800264e:	7dfb      	ldrb	r3, [r7, #23]
 8002650:	3301      	adds	r3, #1
 8002652:	75fb      	strb	r3, [r7, #23]
 8002654:	7dfa      	ldrb	r2, [r7, #23]
 8002656:	78fb      	ldrb	r3, [r7, #3]
 8002658:	429a      	cmp	r2, r3
 800265a:	d3e4      	bcc.n	8002626 <interleave_reg_addr+0x14>
    }
}
 800265c:	bf00      	nop
 800265e:	bf00      	nop
 8002660:	371c      	adds	r7, #28
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800266a:	b480      	push	{r7}
 800266c:	b085      	sub	sp, #20
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
 8002672:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	3318      	adds	r3, #24
 8002678:	60fb      	str	r3, [r7, #12]

    calib_data->dig_t1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	3301      	adds	r3, #1
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	021b      	lsls	r3, r3, #8
 8002682:	b21a      	sxth	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	b21b      	sxth	r3, r3
 800268a:	4313      	orrs	r3, r2
 800268c:	b21b      	sxth	r3, r3
 800268e:	b29a      	uxth	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	801a      	strh	r2, [r3, #0]
    calib_data->dig_t2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3303      	adds	r3, #3
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	021b      	lsls	r3, r3, #8
 800269c:	b21a      	sxth	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3302      	adds	r3, #2
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	b21b      	sxth	r3, r3
 80026a6:	4313      	orrs	r3, r2
 80026a8:	b21a      	sxth	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	805a      	strh	r2, [r3, #2]
    calib_data->dig_t3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3305      	adds	r3, #5
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	021b      	lsls	r3, r3, #8
 80026b6:	b21a      	sxth	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3304      	adds	r3, #4
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	b21b      	sxth	r3, r3
 80026c0:	4313      	orrs	r3, r2
 80026c2:	b21a      	sxth	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	809a      	strh	r2, [r3, #4]
    calib_data->dig_p1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3307      	adds	r3, #7
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	021b      	lsls	r3, r3, #8
 80026d0:	b21a      	sxth	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3306      	adds	r3, #6
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	b21b      	sxth	r3, r3
 80026da:	4313      	orrs	r3, r2
 80026dc:	b21b      	sxth	r3, r3
 80026de:	b29a      	uxth	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	80da      	strh	r2, [r3, #6]
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3309      	adds	r3, #9
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	021b      	lsls	r3, r3, #8
 80026ec:	b21a      	sxth	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	3308      	adds	r3, #8
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	b21b      	sxth	r3, r3
 80026f6:	4313      	orrs	r3, r2
 80026f8:	b21a      	sxth	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	811a      	strh	r2, [r3, #8]
    calib_data->dig_p3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	330b      	adds	r3, #11
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	021b      	lsls	r3, r3, #8
 8002706:	b21a      	sxth	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	330a      	adds	r3, #10
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	b21b      	sxth	r3, r3
 8002710:	4313      	orrs	r3, r2
 8002712:	b21a      	sxth	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	815a      	strh	r2, [r3, #10]
    calib_data->dig_p4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	330d      	adds	r3, #13
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	021b      	lsls	r3, r3, #8
 8002720:	b21a      	sxth	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	330c      	adds	r3, #12
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	b21b      	sxth	r3, r3
 800272a:	4313      	orrs	r3, r2
 800272c:	b21a      	sxth	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	819a      	strh	r2, [r3, #12]
    calib_data->dig_p5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	330f      	adds	r3, #15
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	021b      	lsls	r3, r3, #8
 800273a:	b21a      	sxth	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	330e      	adds	r3, #14
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	b21b      	sxth	r3, r3
 8002744:	4313      	orrs	r3, r2
 8002746:	b21a      	sxth	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	81da      	strh	r2, [r3, #14]
    calib_data->dig_p6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3311      	adds	r3, #17
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	021b      	lsls	r3, r3, #8
 8002754:	b21a      	sxth	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3310      	adds	r3, #16
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	b21b      	sxth	r3, r3
 800275e:	4313      	orrs	r3, r2
 8002760:	b21a      	sxth	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	821a      	strh	r2, [r3, #16]
    calib_data->dig_p7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	3313      	adds	r3, #19
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	021b      	lsls	r3, r3, #8
 800276e:	b21a      	sxth	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3312      	adds	r3, #18
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	b21b      	sxth	r3, r3
 8002778:	4313      	orrs	r3, r2
 800277a:	b21a      	sxth	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	825a      	strh	r2, [r3, #18]
    calib_data->dig_p8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3315      	adds	r3, #21
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	021b      	lsls	r3, r3, #8
 8002788:	b21a      	sxth	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	3314      	adds	r3, #20
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	b21b      	sxth	r3, r3
 8002792:	4313      	orrs	r3, r2
 8002794:	b21a      	sxth	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	829a      	strh	r2, [r3, #20]
    calib_data->dig_p9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3317      	adds	r3, #23
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	021b      	lsls	r3, r3, #8
 80027a2:	b21a      	sxth	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3316      	adds	r3, #22
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	b21b      	sxth	r3, r3
 80027ac:	4313      	orrs	r3, r2
 80027ae:	b21a      	sxth	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	82da      	strh	r2, [r3, #22]
    calib_data->dig_h1 = reg_data[25];
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	7e5a      	ldrb	r2, [r3, #25]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	761a      	strb	r2, [r3, #24]
}
 80027bc:	bf00      	nop
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b087      	sub	sp, #28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	3318      	adds	r3, #24
 80027d6:	617b      	str	r3, [r7, #20]
    int16_t dig_h4_lsb;
    int16_t dig_h4_msb;
    int16_t dig_h5_lsb;
    int16_t dig_h5_msb;

    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3301      	adds	r3, #1
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	021b      	lsls	r3, r3, #8
 80027e0:	b21a      	sxth	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	b21b      	sxth	r3, r3
 80027e8:	4313      	orrs	r3, r2
 80027ea:	b21a      	sxth	r2, r3
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	835a      	strh	r2, [r3, #26]
    calib_data->dig_h3 = reg_data[2];
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	789a      	ldrb	r2, [r3, #2]
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	771a      	strb	r2, [r3, #28]
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3303      	adds	r3, #3
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	b25b      	sxtb	r3, r3
 8002800:	b29b      	uxth	r3, r3
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	b29b      	uxth	r3, r3
 8002806:	827b      	strh	r3, [r7, #18]
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3304      	adds	r3, #4
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	b21b      	sxth	r3, r3
 8002810:	f003 030f 	and.w	r3, r3, #15
 8002814:	823b      	strh	r3, [r7, #16]
    calib_data->dig_h4 = dig_h4_msb | dig_h4_lsb;
 8002816:	8a7a      	ldrh	r2, [r7, #18]
 8002818:	8a3b      	ldrh	r3, [r7, #16]
 800281a:	4313      	orrs	r3, r2
 800281c:	b21a      	sxth	r2, r3
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	83da      	strh	r2, [r3, #30]
    dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	3305      	adds	r3, #5
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	b25b      	sxtb	r3, r3
 800282a:	b29b      	uxth	r3, r3
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	b29b      	uxth	r3, r3
 8002830:	81fb      	strh	r3, [r7, #14]
    dig_h5_lsb = (int16_t)(reg_data[4] >> 4);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	3304      	adds	r3, #4
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	091b      	lsrs	r3, r3, #4
 800283a:	b2db      	uxtb	r3, r3
 800283c:	81bb      	strh	r3, [r7, #12]
    calib_data->dig_h5 = dig_h5_msb | dig_h5_lsb;
 800283e:	89fa      	ldrh	r2, [r7, #14]
 8002840:	89bb      	ldrh	r3, [r7, #12]
 8002842:	4313      	orrs	r3, r2
 8002844:	b21a      	sxth	r2, r3
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	841a      	strh	r2, [r3, #32]
    calib_data->dig_h6 = (int8_t)reg_data[6];
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3306      	adds	r3, #6
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	b25a      	sxtb	r2, r3
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8002858:	bf00      	nop
 800285a:	371c      	adds	r7, #28
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	460a      	mov	r2, r1
 800286e:	71fb      	strb	r3, [r7, #7]
 8002870:	4613      	mov	r3, r2
 8002872:	71bb      	strb	r3, [r7, #6]
    uint8_t settings_changed = FALSE;
 8002874:	2300      	movs	r3, #0
 8002876:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 8002878:	79fa      	ldrb	r2, [r7, #7]
 800287a:	79bb      	ldrb	r3, [r7, #6]
 800287c:	4013      	ands	r3, r2
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d002      	beq.n	800288a <are_settings_changed+0x26>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8002884:	2301      	movs	r3, #1
 8002886:	73fb      	strb	r3, [r7, #15]
 8002888:	e001      	b.n	800288e <are_settings_changed+0x2a>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 800288a:	2300      	movs	r3, #0
 800288c:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 800288e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00b      	beq.n	80028c2 <null_ptr_check+0x26>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d007      	beq.n	80028c2 <null_ptr_check+0x26>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <null_ptr_check+0x26>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d102      	bne.n	80028c8 <null_ptr_check+0x2c>
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 80028c2:	23ff      	movs	r3, #255	; 0xff
 80028c4:	73fb      	strb	r3, [r7, #15]
 80028c6:	e001      	b.n	80028cc <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
 80028c8:	2300      	movs	r3, #0
 80028ca:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80028cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3714      	adds	r7, #20
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <lsm6ds3_read_reg>:
  *
  */
int32_t lsm6ds3_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80028dc:	b590      	push	{r4, r7, lr}
 80028de:	b087      	sub	sp, #28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	607a      	str	r2, [r7, #4]
 80028e6:	461a      	mov	r2, r3
 80028e8:	460b      	mov	r3, r1
 80028ea:	72fb      	strb	r3, [r7, #11]
 80028ec:	4613      	mov	r3, r2
 80028ee:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	685c      	ldr	r4, [r3, #4]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6898      	ldr	r0, [r3, #8]
 80028f8:	893b      	ldrh	r3, [r7, #8]
 80028fa:	7af9      	ldrb	r1, [r7, #11]
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	47a0      	blx	r4
 8002900:	6178      	str	r0, [r7, #20]

  return ret;
 8002902:	697b      	ldr	r3, [r7, #20]
}
 8002904:	4618      	mov	r0, r3
 8002906:	371c      	adds	r7, #28
 8002908:	46bd      	mov	sp, r7
 800290a:	bd90      	pop	{r4, r7, pc}

0800290c <lsm6ds3_write_reg>:
  *
  */
int32_t lsm6ds3_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800290c:	b590      	push	{r4, r7, lr}
 800290e:	b087      	sub	sp, #28
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	607a      	str	r2, [r7, #4]
 8002916:	461a      	mov	r2, r3
 8002918:	460b      	mov	r3, r1
 800291a:	72fb      	strb	r3, [r7, #11]
 800291c:	4613      	mov	r3, r2
 800291e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681c      	ldr	r4, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6898      	ldr	r0, [r3, #8]
 8002928:	893b      	ldrh	r3, [r7, #8]
 800292a:	7af9      	ldrb	r1, [r7, #11]
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	47a0      	blx	r4
 8002930:	6178      	str	r0, [r7, #20]

  return ret;
 8002932:	697b      	ldr	r3, [r7, #20]
}
 8002934:	4618      	mov	r0, r3
 8002936:	371c      	adds	r7, #28
 8002938:	46bd      	mov	sp, r7
 800293a:	bd90      	pop	{r4, r7, pc}

0800293c <lsm6ds3_from_fs16g_to_mg>:
{
  return ((float_t)lsb * 244.0f / 1000.0f);
}

float_t lsm6ds3_from_fs16g_to_mg(int16_t lsb)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	4603      	mov	r3, r0
 8002944:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 488.0f / 1000.0f);
 8002946:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800294a:	ee07 3a90 	vmov	s15, r3
 800294e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002952:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002974 <lsm6ds3_from_fs16g_to_mg+0x38>
 8002956:	ee67 7a87 	vmul.f32	s15, s15, s14
 800295a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002978 <lsm6ds3_from_fs16g_to_mg+0x3c>
 800295e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002962:	eef0 7a66 	vmov.f32	s15, s13
}
 8002966:	eeb0 0a67 	vmov.f32	s0, s15
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	43f40000 	.word	0x43f40000
 8002978:	447a0000 	.word	0x447a0000

0800297c <lsm6ds3_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6ds3_from_fs2000dps_to_mdps(int16_t lsb)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8002986:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800298a:	ee07 3a90 	vmov	s15, r3
 800298e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002992:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80029a8 <lsm6ds3_from_fs2000dps_to_mdps+0x2c>
 8002996:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800299a:	eeb0 0a67 	vmov.f32	s0, s15
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	428c0000 	.word	0x428c0000

080029ac <lsm6ds3_from_lsb_to_celsius>:

float_t lsm6ds3_from_lsb_to_celsius(int16_t lsb)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 16.0f + 25.0f);
 80029b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029ba:	ee07 3a90 	vmov	s15, r3
 80029be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029c2:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80029c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029ca:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80029ce:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 80029d2:	eeb0 0a67 	vmov.f32	s0, s15
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <lsm6ds3_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6ds3_xl_fs_t val)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	460b      	mov	r3, r1
 80029ea:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80029ec:	f107 0208 	add.w	r2, r7, #8
 80029f0:	2301      	movs	r3, #1
 80029f2:	2110      	movs	r1, #16
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff ff71 	bl	80028dc <lsm6ds3_read_reg>
 80029fa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10f      	bne.n	8002a22 <lsm6ds3_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8002a02:	78fb      	ldrb	r3, [r7, #3]
 8002a04:	f003 0303 	and.w	r3, r3, #3
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	7a3b      	ldrb	r3, [r7, #8]
 8002a0c:	f362 0383 	bfi	r3, r2, #2, #2
 8002a10:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002a12:	f107 0208 	add.w	r2, r7, #8
 8002a16:	2301      	movs	r3, #1
 8002a18:	2110      	movs	r1, #16
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7ff ff76 	bl	800290c <lsm6ds3_write_reg>
 8002a20:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002a22:	68fb      	ldr	r3, [r7, #12]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <lsm6ds3_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6ds3_odr_xl_t val)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	460b      	mov	r3, r1
 8002a36:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002a38:	f107 0208 	add.w	r2, r7, #8
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	2110      	movs	r1, #16
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff ff4b 	bl	80028dc <lsm6ds3_read_reg>
 8002a46:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10f      	bne.n	8002a6e <lsm6ds3_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t)val;
 8002a4e:	78fb      	ldrb	r3, [r7, #3]
 8002a50:	f003 030f 	and.w	r3, r3, #15
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	7a3b      	ldrb	r3, [r7, #8]
 8002a58:	f362 1307 	bfi	r3, r2, #4, #4
 8002a5c:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002a5e:	f107 0208 	add.w	r2, r7, #8
 8002a62:	2301      	movs	r3, #1
 8002a64:	2110      	movs	r1, #16
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7ff ff50 	bl	800290c <lsm6ds3_write_reg>
 8002a6c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <lsm6ds3_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6ds3_fs_g_t val)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	460b      	mov	r3, r1
 8002a82:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002a84:	f107 0208 	add.w	r2, r7, #8
 8002a88:	2301      	movs	r3, #1
 8002a8a:	2111      	movs	r1, #17
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7ff ff25 	bl	80028dc <lsm6ds3_read_reg>
 8002a92:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10f      	bne.n	8002aba <lsm6ds3_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8002a9a:	78fb      	ldrb	r3, [r7, #3]
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	b2da      	uxtb	r2, r3
 8002aa2:	7a3b      	ldrb	r3, [r7, #8]
 8002aa4:	f362 0343 	bfi	r3, r2, #1, #3
 8002aa8:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002aaa:	f107 0208 	add.w	r2, r7, #8
 8002aae:	2301      	movs	r3, #1
 8002ab0:	2111      	movs	r1, #17
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7ff ff2a 	bl	800290c <lsm6ds3_write_reg>
 8002ab8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002aba:	68fb      	ldr	r3, [r7, #12]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <lsm6ds3_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6ds3_odr_g_t val)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002ad0:	f107 0208 	add.w	r2, r7, #8
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	2111      	movs	r1, #17
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f7ff feff 	bl	80028dc <lsm6ds3_read_reg>
 8002ade:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10f      	bne.n	8002b06 <lsm6ds3_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t)val;
 8002ae6:	78fb      	ldrb	r3, [r7, #3]
 8002ae8:	f003 030f 	and.w	r3, r3, #15
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	7a3b      	ldrb	r3, [r7, #8]
 8002af0:	f362 1307 	bfi	r3, r2, #4, #4
 8002af4:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002af6:	f107 0208 	add.w	r2, r7, #8
 8002afa:	2301      	movs	r3, #1
 8002afc:	2111      	movs	r1, #17
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7ff ff04 	bl	800290c <lsm6ds3_write_reg>
 8002b04:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002b06:	68fb      	ldr	r3, [r7, #12]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <lsm6ds3_temperature_raw_get>:
  * @param  buff        buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUT_TEMP_L, buff, 2);
 8002b1a:	f107 0208 	add.w	r2, r7, #8
 8002b1e:	2302      	movs	r3, #2
 8002b20:	2120      	movs	r1, #32
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7ff feda 	bl	80028dc <lsm6ds3_read_reg>
 8002b28:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8002b2a:	7a7b      	ldrb	r3, [r7, #9]
 8002b2c:	b21a      	sxth	r2, r3
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	021b      	lsls	r3, r3, #8
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	7a3b      	ldrb	r3, [r7, #8]
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	4413      	add	r3, r2
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	b21a      	sxth	r2, r3
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	801a      	strh	r2, [r3, #0]

  return ret;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <lsm6ds3_angular_rate_raw_get>:
  * @param  buff        buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b086      	sub	sp, #24
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
 8002b5e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUTX_L_G, buff, 6);
 8002b60:	f107 020c 	add.w	r2, r7, #12
 8002b64:	2306      	movs	r3, #6
 8002b66:	2122      	movs	r1, #34	; 0x22
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f7ff feb7 	bl	80028dc <lsm6ds3_read_reg>
 8002b6e:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002b70:	7b7b      	ldrb	r3, [r7, #13]
 8002b72:	b21a      	sxth	r2, r3
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	021b      	lsls	r3, r3, #8
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	7b3b      	ldrb	r3, [r7, #12]
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	4413      	add	r3, r2
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	b21a      	sxth	r2, r3
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002b92:	7bfa      	ldrb	r2, [r7, #15]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	3302      	adds	r3, #2
 8002b98:	b212      	sxth	r2, r2
 8002b9a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	3302      	adds	r3, #2
 8002ba0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	021b      	lsls	r3, r3, #8
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	7bbb      	ldrb	r3, [r7, #14]
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	4413      	add	r3, r2
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	3302      	adds	r3, #2
 8002bb6:	b212      	sxth	r2, r2
 8002bb8:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002bba:	7c7a      	ldrb	r2, [r7, #17]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	3304      	adds	r3, #4
 8002bc0:	b212      	sxth	r2, r2
 8002bc2:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	3304      	adds	r3, #4
 8002bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	021b      	lsls	r3, r3, #8
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	7c3b      	ldrb	r3, [r7, #16]
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	4413      	add	r3, r2
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	3304      	adds	r3, #4
 8002bde:	b212      	sxth	r2, r2
 8002be0:	801a      	strh	r2, [r3, #0]

  return ret;
 8002be2:	697b      	ldr	r3, [r7, #20]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <lsm6ds3_acceleration_raw_get>:
  * @param  buff        buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUTX_L_XL, buff, 6);
 8002bf6:	f107 020c 	add.w	r2, r7, #12
 8002bfa:	2306      	movs	r3, #6
 8002bfc:	2128      	movs	r1, #40	; 0x28
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7ff fe6c 	bl	80028dc <lsm6ds3_read_reg>
 8002c04:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002c06:	7b7b      	ldrb	r3, [r7, #13]
 8002c08:	b21a      	sxth	r2, r3
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	021b      	lsls	r3, r3, #8
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	7b3b      	ldrb	r3, [r7, #12]
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	4413      	add	r3, r2
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	b21a      	sxth	r2, r3
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002c28:	7bfa      	ldrb	r2, [r7, #15]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	3302      	adds	r3, #2
 8002c2e:	b212      	sxth	r2, r2
 8002c30:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	3302      	adds	r3, #2
 8002c36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	021b      	lsls	r3, r3, #8
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	7bbb      	ldrb	r3, [r7, #14]
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	4413      	add	r3, r2
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	3302      	adds	r3, #2
 8002c4c:	b212      	sxth	r2, r2
 8002c4e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002c50:	7c7a      	ldrb	r2, [r7, #17]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	3304      	adds	r3, #4
 8002c56:	b212      	sxth	r2, r2
 8002c58:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	021b      	lsls	r3, r3, #8
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	7c3b      	ldrb	r3, [r7, #16]
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	3304      	adds	r3, #4
 8002c74:	b212      	sxth	r2, r2
 8002c76:	801a      	strh	r2, [r3, #0]

  return ret;
 8002c78:	697b      	ldr	r3, [r7, #20]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <lsm6ds3_device_id_get>:
  * @param  buff        buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b084      	sub	sp, #16
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
 8002c8a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_WHO_AM_I, buff, 1);
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	210f      	movs	r1, #15
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7ff fe22 	bl	80028dc <lsm6ds3_read_reg>
 8002c98:	60f8      	str	r0, [r7, #12]

  return ret;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <lsm6ds3_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6ds3_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	460b      	mov	r3, r1
 8002cae:	70fb      	strb	r3, [r7, #3]
  lsm6ds3_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002cb0:	f107 0208 	add.w	r2, r7, #8
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	2112      	movs	r1, #18
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7ff fe0f 	bl	80028dc <lsm6ds3_read_reg>
 8002cbe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10f      	bne.n	8002ce6 <lsm6ds3_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8002cc6:	78fb      	ldrb	r3, [r7, #3]
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	7a3b      	ldrb	r3, [r7, #8]
 8002cd0:	f362 0300 	bfi	r3, r2, #0, #1
 8002cd4:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002cd6:	f107 0208 	add.w	r2, r7, #8
 8002cda:	2301      	movs	r3, #1
 8002cdc:	2112      	movs	r1, #18
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7ff fe14 	bl	800290c <lsm6ds3_write_reg>
 8002ce4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <_write>:
#include <stm32f4xx_hal.h>

int _write(int file, char *ptr, int len)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
	extern UART_HandleTypeDef huart1;
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	f04f 33ff 	mov.w	r3, #4294967295
 8002d04:	68b9      	ldr	r1, [r7, #8]
 8002d06:	4804      	ldr	r0, [pc, #16]	; (8002d18 <_write+0x28>)
 8002d08:	f003 f8a7 	bl	8005e5a <HAL_UART_Transmit>
	return len;
 8002d0c:	687b      	ldr	r3, [r7, #4]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	20000258 	.word	0x20000258

08002d1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d20:	f000 fb6c 	bl	80033fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d24:	f000 f80c 	bl	8002d40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d28:	f000 f902 	bl	8002f30 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002d2c:	f000 f8d6 	bl	8002edc <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8002d30:	f000 f89e 	bl	8002e70 <MX_SPI1_Init>
  MX_I2C1_Init();
 8002d34:	f000 f86e 	bl	8002e14 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  app_main();
 8002d38:	f7fe f9c6 	bl	80010c8 <app_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002d3c:	e7fe      	b.n	8002d3c <main+0x20>
	...

08002d40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b094      	sub	sp, #80	; 0x50
 8002d44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d46:	f107 0320 	add.w	r3, r7, #32
 8002d4a:	2230      	movs	r2, #48	; 0x30
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f003 fb76 	bl	8006440 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d54:	f107 030c 	add.w	r3, r7, #12
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	605a      	str	r2, [r3, #4]
 8002d5e:	609a      	str	r2, [r3, #8]
 8002d60:	60da      	str	r2, [r3, #12]
 8002d62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d64:	2300      	movs	r3, #0
 8002d66:	60bb      	str	r3, [r7, #8]
 8002d68:	4b28      	ldr	r3, [pc, #160]	; (8002e0c <SystemClock_Config+0xcc>)
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	4a27      	ldr	r2, [pc, #156]	; (8002e0c <SystemClock_Config+0xcc>)
 8002d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d72:	6413      	str	r3, [r2, #64]	; 0x40
 8002d74:	4b25      	ldr	r3, [pc, #148]	; (8002e0c <SystemClock_Config+0xcc>)
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7c:	60bb      	str	r3, [r7, #8]
 8002d7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d80:	2300      	movs	r3, #0
 8002d82:	607b      	str	r3, [r7, #4]
 8002d84:	4b22      	ldr	r3, [pc, #136]	; (8002e10 <SystemClock_Config+0xd0>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a21      	ldr	r2, [pc, #132]	; (8002e10 <SystemClock_Config+0xd0>)
 8002d8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d8e:	6013      	str	r3, [r2, #0]
 8002d90:	4b1f      	ldr	r3, [pc, #124]	; (8002e10 <SystemClock_Config+0xd0>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d98:	607b      	str	r3, [r7, #4]
 8002d9a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002da0:	2301      	movs	r3, #1
 8002da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002da4:	2310      	movs	r3, #16
 8002da6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002da8:	2302      	movs	r3, #2
 8002daa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002dac:	2300      	movs	r3, #0
 8002dae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002db0:	2308      	movs	r3, #8
 8002db2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002db4:	23a8      	movs	r3, #168	; 0xa8
 8002db6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002db8:	2302      	movs	r3, #2
 8002dba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002dbc:	2304      	movs	r3, #4
 8002dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002dc0:	f107 0320 	add.w	r3, r7, #32
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f001 fe0b 	bl	80049e0 <HAL_RCC_OscConfig>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002dd0:	f000 f8fe 	bl	8002fd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002dd4:	230f      	movs	r3, #15
 8002dd6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dd8:	2302      	movs	r3, #2
 8002dda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002de0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002de4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002de6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002dec:	f107 030c 	add.w	r3, r7, #12
 8002df0:	2105      	movs	r1, #5
 8002df2:	4618      	mov	r0, r3
 8002df4:	f002 f86c 	bl	8004ed0 <HAL_RCC_ClockConfig>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002dfe:	f000 f8e7 	bl	8002fd0 <Error_Handler>
  }
}
 8002e02:	bf00      	nop
 8002e04:	3750      	adds	r7, #80	; 0x50
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	40007000 	.word	0x40007000

08002e14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e18:	4b12      	ldr	r3, [pc, #72]	; (8002e64 <MX_I2C1_Init+0x50>)
 8002e1a:	4a13      	ldr	r2, [pc, #76]	; (8002e68 <MX_I2C1_Init+0x54>)
 8002e1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002e1e:	4b11      	ldr	r3, [pc, #68]	; (8002e64 <MX_I2C1_Init+0x50>)
 8002e20:	4a12      	ldr	r2, [pc, #72]	; (8002e6c <MX_I2C1_Init+0x58>)
 8002e22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e24:	4b0f      	ldr	r3, [pc, #60]	; (8002e64 <MX_I2C1_Init+0x50>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002e2a:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <MX_I2C1_Init+0x50>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e30:	4b0c      	ldr	r3, [pc, #48]	; (8002e64 <MX_I2C1_Init+0x50>)
 8002e32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e38:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <MX_I2C1_Init+0x50>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002e3e:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <MX_I2C1_Init+0x50>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e44:	4b07      	ldr	r3, [pc, #28]	; (8002e64 <MX_I2C1_Init+0x50>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e4a:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <MX_I2C1_Init+0x50>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e50:	4804      	ldr	r0, [pc, #16]	; (8002e64 <MX_I2C1_Init+0x50>)
 8002e52:	f000 fe05 	bl	8003a60 <HAL_I2C_Init>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002e5c:	f000 f8b8 	bl	8002fd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e60:	bf00      	nop
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	20000204 	.word	0x20000204
 8002e68:	40005400 	.word	0x40005400
 8002e6c:	00061a80 	.word	0x00061a80

08002e70 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002e74:	4b17      	ldr	r3, [pc, #92]	; (8002ed4 <MX_SPI1_Init+0x64>)
 8002e76:	4a18      	ldr	r2, [pc, #96]	; (8002ed8 <MX_SPI1_Init+0x68>)
 8002e78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002e7a:	4b16      	ldr	r3, [pc, #88]	; (8002ed4 <MX_SPI1_Init+0x64>)
 8002e7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002e82:	4b14      	ldr	r3, [pc, #80]	; (8002ed4 <MX_SPI1_Init+0x64>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e88:	4b12      	ldr	r3, [pc, #72]	; (8002ed4 <MX_SPI1_Init+0x64>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e8e:	4b11      	ldr	r3, [pc, #68]	; (8002ed4 <MX_SPI1_Init+0x64>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e94:	4b0f      	ldr	r3, [pc, #60]	; (8002ed4 <MX_SPI1_Init+0x64>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002e9a:	4b0e      	ldr	r3, [pc, #56]	; (8002ed4 <MX_SPI1_Init+0x64>)
 8002e9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ea0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002ea2:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <MX_SPI1_Init+0x64>)
 8002ea4:	2230      	movs	r2, #48	; 0x30
 8002ea6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ea8:	4b0a      	ldr	r3, [pc, #40]	; (8002ed4 <MX_SPI1_Init+0x64>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002eae:	4b09      	ldr	r3, [pc, #36]	; (8002ed4 <MX_SPI1_Init+0x64>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002eb4:	4b07      	ldr	r3, [pc, #28]	; (8002ed4 <MX_SPI1_Init+0x64>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002eba:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <MX_SPI1_Init+0x64>)
 8002ebc:	220a      	movs	r2, #10
 8002ebe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ec0:	4804      	ldr	r0, [pc, #16]	; (8002ed4 <MX_SPI1_Init+0x64>)
 8002ec2:	f002 f9d5 	bl	8005270 <HAL_SPI_Init>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002ecc:	f000 f880 	bl	8002fd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ed0:	bf00      	nop
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	2000029c 	.word	0x2000029c
 8002ed8:	40013000 	.word	0x40013000

08002edc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ee0:	4b11      	ldr	r3, [pc, #68]	; (8002f28 <MX_USART1_UART_Init+0x4c>)
 8002ee2:	4a12      	ldr	r2, [pc, #72]	; (8002f2c <MX_USART1_UART_Init+0x50>)
 8002ee4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002ee6:	4b10      	ldr	r3, [pc, #64]	; (8002f28 <MX_USART1_UART_Init+0x4c>)
 8002ee8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002eec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002eee:	4b0e      	ldr	r3, [pc, #56]	; (8002f28 <MX_USART1_UART_Init+0x4c>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ef4:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <MX_USART1_UART_Init+0x4c>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002efa:	4b0b      	ldr	r3, [pc, #44]	; (8002f28 <MX_USART1_UART_Init+0x4c>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f00:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <MX_USART1_UART_Init+0x4c>)
 8002f02:	220c      	movs	r2, #12
 8002f04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f06:	4b08      	ldr	r3, [pc, #32]	; (8002f28 <MX_USART1_UART_Init+0x4c>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f0c:	4b06      	ldr	r3, [pc, #24]	; (8002f28 <MX_USART1_UART_Init+0x4c>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f12:	4805      	ldr	r0, [pc, #20]	; (8002f28 <MX_USART1_UART_Init+0x4c>)
 8002f14:	f002 ff54 	bl	8005dc0 <HAL_UART_Init>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002f1e:	f000 f857 	bl	8002fd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f22:	bf00      	nop
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	20000258 	.word	0x20000258
 8002f2c:	40011000 	.word	0x40011000

08002f30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b088      	sub	sp, #32
 8002f34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f36:	f107 030c 	add.w	r3, r7, #12
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	605a      	str	r2, [r3, #4]
 8002f40:	609a      	str	r2, [r3, #8]
 8002f42:	60da      	str	r2, [r3, #12]
 8002f44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f46:	2300      	movs	r3, #0
 8002f48:	60bb      	str	r3, [r7, #8]
 8002f4a:	4b1f      	ldr	r3, [pc, #124]	; (8002fc8 <MX_GPIO_Init+0x98>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4e:	4a1e      	ldr	r2, [pc, #120]	; (8002fc8 <MX_GPIO_Init+0x98>)
 8002f50:	f043 0301 	orr.w	r3, r3, #1
 8002f54:	6313      	str	r3, [r2, #48]	; 0x30
 8002f56:	4b1c      	ldr	r3, [pc, #112]	; (8002fc8 <MX_GPIO_Init+0x98>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	60bb      	str	r3, [r7, #8]
 8002f60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f62:	2300      	movs	r3, #0
 8002f64:	607b      	str	r3, [r7, #4]
 8002f66:	4b18      	ldr	r3, [pc, #96]	; (8002fc8 <MX_GPIO_Init+0x98>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	4a17      	ldr	r2, [pc, #92]	; (8002fc8 <MX_GPIO_Init+0x98>)
 8002f6c:	f043 0304 	orr.w	r3, r3, #4
 8002f70:	6313      	str	r3, [r2, #48]	; 0x30
 8002f72:	4b15      	ldr	r3, [pc, #84]	; (8002fc8 <MX_GPIO_Init+0x98>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	f003 0304 	and.w	r3, r3, #4
 8002f7a:	607b      	str	r3, [r7, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f7e:	2300      	movs	r3, #0
 8002f80:	603b      	str	r3, [r7, #0]
 8002f82:	4b11      	ldr	r3, [pc, #68]	; (8002fc8 <MX_GPIO_Init+0x98>)
 8002f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f86:	4a10      	ldr	r2, [pc, #64]	; (8002fc8 <MX_GPIO_Init+0x98>)
 8002f88:	f043 0302 	orr.w	r3, r3, #2
 8002f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f8e:	4b0e      	ldr	r3, [pc, #56]	; (8002fc8 <MX_GPIO_Init+0x98>)
 8002f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	603b      	str	r3, [r7, #0]
 8002f98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	2110      	movs	r1, #16
 8002f9e:	480b      	ldr	r0, [pc, #44]	; (8002fcc <MX_GPIO_Init+0x9c>)
 8002fa0:	f000 fd44 	bl	8003a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002fa4:	2310      	movs	r3, #16
 8002fa6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fac:	2300      	movs	r3, #0
 8002fae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fb4:	f107 030c 	add.w	r3, r7, #12
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4804      	ldr	r0, [pc, #16]	; (8002fcc <MX_GPIO_Init+0x9c>)
 8002fbc:	f000 fb9a 	bl	80036f4 <HAL_GPIO_Init>

}
 8002fc0:	bf00      	nop
 8002fc2:	3720      	adds	r7, #32
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	40020800 	.word	0x40020800

08002fd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fd4:	b672      	cpsid	i
}
 8002fd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fd8:	e7fe      	b.n	8002fd8 <Error_Handler+0x8>
	...

08002fdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	607b      	str	r3, [r7, #4]
 8002fe6:	4b10      	ldr	r3, [pc, #64]	; (8003028 <HAL_MspInit+0x4c>)
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fea:	4a0f      	ldr	r2, [pc, #60]	; (8003028 <HAL_MspInit+0x4c>)
 8002fec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ff2:	4b0d      	ldr	r3, [pc, #52]	; (8003028 <HAL_MspInit+0x4c>)
 8002ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ffa:	607b      	str	r3, [r7, #4]
 8002ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ffe:	2300      	movs	r3, #0
 8003000:	603b      	str	r3, [r7, #0]
 8003002:	4b09      	ldr	r3, [pc, #36]	; (8003028 <HAL_MspInit+0x4c>)
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	4a08      	ldr	r2, [pc, #32]	; (8003028 <HAL_MspInit+0x4c>)
 8003008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800300c:	6413      	str	r3, [r2, #64]	; 0x40
 800300e:	4b06      	ldr	r3, [pc, #24]	; (8003028 <HAL_MspInit+0x4c>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003016:	603b      	str	r3, [r7, #0]
 8003018:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	40023800 	.word	0x40023800

0800302c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b08a      	sub	sp, #40	; 0x28
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003034:	f107 0314 	add.w	r3, r7, #20
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	605a      	str	r2, [r3, #4]
 800303e:	609a      	str	r2, [r3, #8]
 8003040:	60da      	str	r2, [r3, #12]
 8003042:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a19      	ldr	r2, [pc, #100]	; (80030b0 <HAL_I2C_MspInit+0x84>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d12b      	bne.n	80030a6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800304e:	2300      	movs	r3, #0
 8003050:	613b      	str	r3, [r7, #16]
 8003052:	4b18      	ldr	r3, [pc, #96]	; (80030b4 <HAL_I2C_MspInit+0x88>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	4a17      	ldr	r2, [pc, #92]	; (80030b4 <HAL_I2C_MspInit+0x88>)
 8003058:	f043 0302 	orr.w	r3, r3, #2
 800305c:	6313      	str	r3, [r2, #48]	; 0x30
 800305e:	4b15      	ldr	r3, [pc, #84]	; (80030b4 <HAL_I2C_MspInit+0x88>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	613b      	str	r3, [r7, #16]
 8003068:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800306a:	23c0      	movs	r3, #192	; 0xc0
 800306c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800306e:	2312      	movs	r3, #18
 8003070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003072:	2300      	movs	r3, #0
 8003074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003076:	2303      	movs	r3, #3
 8003078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800307a:	2304      	movs	r3, #4
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800307e:	f107 0314 	add.w	r3, r7, #20
 8003082:	4619      	mov	r1, r3
 8003084:	480c      	ldr	r0, [pc, #48]	; (80030b8 <HAL_I2C_MspInit+0x8c>)
 8003086:	f000 fb35 	bl	80036f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800308a:	2300      	movs	r3, #0
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <HAL_I2C_MspInit+0x88>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	4a08      	ldr	r2, [pc, #32]	; (80030b4 <HAL_I2C_MspInit+0x88>)
 8003094:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003098:	6413      	str	r3, [r2, #64]	; 0x40
 800309a:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <HAL_I2C_MspInit+0x88>)
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80030a6:	bf00      	nop
 80030a8:	3728      	adds	r7, #40	; 0x28
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	40005400 	.word	0x40005400
 80030b4:	40023800 	.word	0x40023800
 80030b8:	40020400 	.word	0x40020400

080030bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08a      	sub	sp, #40	; 0x28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c4:	f107 0314 	add.w	r3, r7, #20
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	605a      	str	r2, [r3, #4]
 80030ce:	609a      	str	r2, [r3, #8]
 80030d0:	60da      	str	r2, [r3, #12]
 80030d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a19      	ldr	r2, [pc, #100]	; (8003140 <HAL_SPI_MspInit+0x84>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d12b      	bne.n	8003136 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030de:	2300      	movs	r3, #0
 80030e0:	613b      	str	r3, [r7, #16]
 80030e2:	4b18      	ldr	r3, [pc, #96]	; (8003144 <HAL_SPI_MspInit+0x88>)
 80030e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e6:	4a17      	ldr	r2, [pc, #92]	; (8003144 <HAL_SPI_MspInit+0x88>)
 80030e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030ec:	6453      	str	r3, [r2, #68]	; 0x44
 80030ee:	4b15      	ldr	r3, [pc, #84]	; (8003144 <HAL_SPI_MspInit+0x88>)
 80030f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030f6:	613b      	str	r3, [r7, #16]
 80030f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030fa:	2300      	movs	r3, #0
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	4b11      	ldr	r3, [pc, #68]	; (8003144 <HAL_SPI_MspInit+0x88>)
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	4a10      	ldr	r2, [pc, #64]	; (8003144 <HAL_SPI_MspInit+0x88>)
 8003104:	f043 0301 	orr.w	r3, r3, #1
 8003108:	6313      	str	r3, [r2, #48]	; 0x30
 800310a:	4b0e      	ldr	r3, [pc, #56]	; (8003144 <HAL_SPI_MspInit+0x88>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003116:	23e0      	movs	r3, #224	; 0xe0
 8003118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800311a:	2302      	movs	r3, #2
 800311c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311e:	2300      	movs	r3, #0
 8003120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003122:	2303      	movs	r3, #3
 8003124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003126:	2305      	movs	r3, #5
 8003128:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800312a:	f107 0314 	add.w	r3, r7, #20
 800312e:	4619      	mov	r1, r3
 8003130:	4805      	ldr	r0, [pc, #20]	; (8003148 <HAL_SPI_MspInit+0x8c>)
 8003132:	f000 fadf 	bl	80036f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003136:	bf00      	nop
 8003138:	3728      	adds	r7, #40	; 0x28
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40013000 	.word	0x40013000
 8003144:	40023800 	.word	0x40023800
 8003148:	40020000 	.word	0x40020000

0800314c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b08a      	sub	sp, #40	; 0x28
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003154:	f107 0314 	add.w	r3, r7, #20
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	605a      	str	r2, [r3, #4]
 800315e:	609a      	str	r2, [r3, #8]
 8003160:	60da      	str	r2, [r3, #12]
 8003162:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a19      	ldr	r2, [pc, #100]	; (80031d0 <HAL_UART_MspInit+0x84>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d12c      	bne.n	80031c8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800316e:	2300      	movs	r3, #0
 8003170:	613b      	str	r3, [r7, #16]
 8003172:	4b18      	ldr	r3, [pc, #96]	; (80031d4 <HAL_UART_MspInit+0x88>)
 8003174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003176:	4a17      	ldr	r2, [pc, #92]	; (80031d4 <HAL_UART_MspInit+0x88>)
 8003178:	f043 0310 	orr.w	r3, r3, #16
 800317c:	6453      	str	r3, [r2, #68]	; 0x44
 800317e:	4b15      	ldr	r3, [pc, #84]	; (80031d4 <HAL_UART_MspInit+0x88>)
 8003180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003182:	f003 0310 	and.w	r3, r3, #16
 8003186:	613b      	str	r3, [r7, #16]
 8003188:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800318a:	2300      	movs	r3, #0
 800318c:	60fb      	str	r3, [r7, #12]
 800318e:	4b11      	ldr	r3, [pc, #68]	; (80031d4 <HAL_UART_MspInit+0x88>)
 8003190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003192:	4a10      	ldr	r2, [pc, #64]	; (80031d4 <HAL_UART_MspInit+0x88>)
 8003194:	f043 0301 	orr.w	r3, r3, #1
 8003198:	6313      	str	r3, [r2, #48]	; 0x30
 800319a:	4b0e      	ldr	r3, [pc, #56]	; (80031d4 <HAL_UART_MspInit+0x88>)
 800319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80031a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80031aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ac:	2302      	movs	r3, #2
 80031ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b4:	2303      	movs	r3, #3
 80031b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80031b8:	2307      	movs	r3, #7
 80031ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031bc:	f107 0314 	add.w	r3, r7, #20
 80031c0:	4619      	mov	r1, r3
 80031c2:	4805      	ldr	r0, [pc, #20]	; (80031d8 <HAL_UART_MspInit+0x8c>)
 80031c4:	f000 fa96 	bl	80036f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80031c8:	bf00      	nop
 80031ca:	3728      	adds	r7, #40	; 0x28
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40011000 	.word	0x40011000
 80031d4:	40023800 	.word	0x40023800
 80031d8:	40020000 	.word	0x40020000

080031dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031e0:	e7fe      	b.n	80031e0 <NMI_Handler+0x4>

080031e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031e2:	b480      	push	{r7}
 80031e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031e6:	e7fe      	b.n	80031e6 <HardFault_Handler+0x4>

080031e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031ec:	e7fe      	b.n	80031ec <MemManage_Handler+0x4>

080031ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031ee:	b480      	push	{r7}
 80031f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031f2:	e7fe      	b.n	80031f2 <BusFault_Handler+0x4>

080031f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031f8:	e7fe      	b.n	80031f8 <UsageFault_Handler+0x4>

080031fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031fa:	b480      	push	{r7}
 80031fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031fe:	bf00      	nop
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800320c:	bf00      	nop
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr

08003216 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003216:	b480      	push	{r7}
 8003218:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800321a:	bf00      	nop
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003228:	f000 f93a 	bl	80034a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800322c:	bf00      	nop
 800322e:	bd80      	pop	{r7, pc}

08003230 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
	return 1;
 8003234:	2301      	movs	r3, #1
}
 8003236:	4618      	mov	r0, r3
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <_kill>:

int _kill(int pid, int sig)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800324a:	f003 f8cf 	bl	80063ec <__errno>
 800324e:	4603      	mov	r3, r0
 8003250:	2216      	movs	r2, #22
 8003252:	601a      	str	r2, [r3, #0]
	return -1;
 8003254:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003258:	4618      	mov	r0, r3
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <_exit>:

void _exit (int status)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003268:	f04f 31ff 	mov.w	r1, #4294967295
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f7ff ffe7 	bl	8003240 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003272:	e7fe      	b.n	8003272 <_exit+0x12>

08003274 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003280:	2300      	movs	r3, #0
 8003282:	617b      	str	r3, [r7, #20]
 8003284:	e00a      	b.n	800329c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003286:	f3af 8000 	nop.w
 800328a:	4601      	mov	r1, r0
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	1c5a      	adds	r2, r3, #1
 8003290:	60ba      	str	r2, [r7, #8]
 8003292:	b2ca      	uxtb	r2, r1
 8003294:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	3301      	adds	r3, #1
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	dbf0      	blt.n	8003286 <_read+0x12>
	}

return len;
 80032a4:	687b      	ldr	r3, [r7, #4]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <_close>:
	}
	return len;
}

int _close(int file)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
	return -1;
 80032b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
 80032ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032d6:	605a      	str	r2, [r3, #4]
	return 0;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <_isatty>:

int _isatty(int file)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
	return 1;
 80032ee:	2301      	movs	r3, #1
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
	return 0;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
	...

08003318 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003320:	4a14      	ldr	r2, [pc, #80]	; (8003374 <_sbrk+0x5c>)
 8003322:	4b15      	ldr	r3, [pc, #84]	; (8003378 <_sbrk+0x60>)
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800332c:	4b13      	ldr	r3, [pc, #76]	; (800337c <_sbrk+0x64>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d102      	bne.n	800333a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003334:	4b11      	ldr	r3, [pc, #68]	; (800337c <_sbrk+0x64>)
 8003336:	4a12      	ldr	r2, [pc, #72]	; (8003380 <_sbrk+0x68>)
 8003338:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800333a:	4b10      	ldr	r3, [pc, #64]	; (800337c <_sbrk+0x64>)
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4413      	add	r3, r2
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	429a      	cmp	r2, r3
 8003346:	d207      	bcs.n	8003358 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003348:	f003 f850 	bl	80063ec <__errno>
 800334c:	4603      	mov	r3, r0
 800334e:	220c      	movs	r2, #12
 8003350:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003352:	f04f 33ff 	mov.w	r3, #4294967295
 8003356:	e009      	b.n	800336c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003358:	4b08      	ldr	r3, [pc, #32]	; (800337c <_sbrk+0x64>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800335e:	4b07      	ldr	r3, [pc, #28]	; (800337c <_sbrk+0x64>)
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4413      	add	r3, r2
 8003366:	4a05      	ldr	r2, [pc, #20]	; (800337c <_sbrk+0x64>)
 8003368:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800336a:	68fb      	ldr	r3, [r7, #12]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3718      	adds	r7, #24
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	20020000 	.word	0x20020000
 8003378:	00000400 	.word	0x00000400
 800337c:	200001f8 	.word	0x200001f8
 8003380:	20000308 	.word	0x20000308

08003384 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003388:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <SystemInit+0x20>)
 800338a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338e:	4a05      	ldr	r2, [pc, #20]	; (80033a4 <SystemInit+0x20>)
 8003390:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003394:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003398:	bf00      	nop
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	e000ed00 	.word	0xe000ed00

080033a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80033a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80033ac:	480d      	ldr	r0, [pc, #52]	; (80033e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80033ae:	490e      	ldr	r1, [pc, #56]	; (80033e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80033b0:	4a0e      	ldr	r2, [pc, #56]	; (80033ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80033b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033b4:	e002      	b.n	80033bc <LoopCopyDataInit>

080033b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033ba:	3304      	adds	r3, #4

080033bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033c0:	d3f9      	bcc.n	80033b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033c2:	4a0b      	ldr	r2, [pc, #44]	; (80033f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80033c4:	4c0b      	ldr	r4, [pc, #44]	; (80033f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80033c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033c8:	e001      	b.n	80033ce <LoopFillZerobss>

080033ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033cc:	3204      	adds	r2, #4

080033ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033d0:	d3fb      	bcc.n	80033ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80033d2:	f7ff ffd7 	bl	8003384 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033d6:	f003 f80f 	bl	80063f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033da:	f7ff fc9f 	bl	8002d1c <main>
  bx  lr    
 80033de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80033e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80033e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033e8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80033ec:	0800935c 	.word	0x0800935c
  ldr r2, =_sbss
 80033f0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80033f4:	20000308 	.word	0x20000308

080033f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033f8:	e7fe      	b.n	80033f8 <ADC_IRQHandler>
	...

080033fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003400:	4b0e      	ldr	r3, [pc, #56]	; (800343c <HAL_Init+0x40>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a0d      	ldr	r2, [pc, #52]	; (800343c <HAL_Init+0x40>)
 8003406:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800340a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800340c:	4b0b      	ldr	r3, [pc, #44]	; (800343c <HAL_Init+0x40>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a0a      	ldr	r2, [pc, #40]	; (800343c <HAL_Init+0x40>)
 8003412:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003416:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003418:	4b08      	ldr	r3, [pc, #32]	; (800343c <HAL_Init+0x40>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a07      	ldr	r2, [pc, #28]	; (800343c <HAL_Init+0x40>)
 800341e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003422:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003424:	2003      	movs	r0, #3
 8003426:	f000 f931 	bl	800368c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800342a:	200f      	movs	r0, #15
 800342c:	f000 f808 	bl	8003440 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003430:	f7ff fdd4 	bl	8002fdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40023c00 	.word	0x40023c00

08003440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003448:	4b12      	ldr	r3, [pc, #72]	; (8003494 <HAL_InitTick+0x54>)
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	4b12      	ldr	r3, [pc, #72]	; (8003498 <HAL_InitTick+0x58>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	4619      	mov	r1, r3
 8003452:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003456:	fbb3 f3f1 	udiv	r3, r3, r1
 800345a:	fbb2 f3f3 	udiv	r3, r2, r3
 800345e:	4618      	mov	r0, r3
 8003460:	f000 f93b 	bl	80036da <HAL_SYSTICK_Config>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e00e      	b.n	800348c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b0f      	cmp	r3, #15
 8003472:	d80a      	bhi.n	800348a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003474:	2200      	movs	r2, #0
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	f04f 30ff 	mov.w	r0, #4294967295
 800347c:	f000 f911 	bl	80036a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003480:	4a06      	ldr	r2, [pc, #24]	; (800349c <HAL_InitTick+0x5c>)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003486:	2300      	movs	r3, #0
 8003488:	e000      	b.n	800348c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
}
 800348c:	4618      	mov	r0, r3
 800348e:	3708      	adds	r7, #8
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	20000000 	.word	0x20000000
 8003498:	20000008 	.word	0x20000008
 800349c:	20000004 	.word	0x20000004

080034a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034a4:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <HAL_IncTick+0x20>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	461a      	mov	r2, r3
 80034aa:	4b06      	ldr	r3, [pc, #24]	; (80034c4 <HAL_IncTick+0x24>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4413      	add	r3, r2
 80034b0:	4a04      	ldr	r2, [pc, #16]	; (80034c4 <HAL_IncTick+0x24>)
 80034b2:	6013      	str	r3, [r2, #0]
}
 80034b4:	bf00      	nop
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	20000008 	.word	0x20000008
 80034c4:	200002f4 	.word	0x200002f4

080034c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  return uwTick;
 80034cc:	4b03      	ldr	r3, [pc, #12]	; (80034dc <HAL_GetTick+0x14>)
 80034ce:	681b      	ldr	r3, [r3, #0]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	200002f4 	.word	0x200002f4

080034e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034e8:	f7ff ffee 	bl	80034c8 <HAL_GetTick>
 80034ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f8:	d005      	beq.n	8003506 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034fa:	4b0a      	ldr	r3, [pc, #40]	; (8003524 <HAL_Delay+0x44>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	461a      	mov	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4413      	add	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003506:	bf00      	nop
 8003508:	f7ff ffde 	bl	80034c8 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	429a      	cmp	r2, r3
 8003516:	d8f7      	bhi.n	8003508 <HAL_Delay+0x28>
  {
  }
}
 8003518:	bf00      	nop
 800351a:	bf00      	nop
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	20000008 	.word	0x20000008

08003528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f003 0307 	and.w	r3, r3, #7
 8003536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003538:	4b0c      	ldr	r3, [pc, #48]	; (800356c <__NVIC_SetPriorityGrouping+0x44>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003544:	4013      	ands	r3, r2
 8003546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003550:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800355a:	4a04      	ldr	r2, [pc, #16]	; (800356c <__NVIC_SetPriorityGrouping+0x44>)
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	60d3      	str	r3, [r2, #12]
}
 8003560:	bf00      	nop
 8003562:	3714      	adds	r7, #20
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	e000ed00 	.word	0xe000ed00

08003570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003574:	4b04      	ldr	r3, [pc, #16]	; (8003588 <__NVIC_GetPriorityGrouping+0x18>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	0a1b      	lsrs	r3, r3, #8
 800357a:	f003 0307 	and.w	r3, r3, #7
}
 800357e:	4618      	mov	r0, r3
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	e000ed00 	.word	0xe000ed00

0800358c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	6039      	str	r1, [r7, #0]
 8003596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359c:	2b00      	cmp	r3, #0
 800359e:	db0a      	blt.n	80035b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	490c      	ldr	r1, [pc, #48]	; (80035d8 <__NVIC_SetPriority+0x4c>)
 80035a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035aa:	0112      	lsls	r2, r2, #4
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	440b      	add	r3, r1
 80035b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035b4:	e00a      	b.n	80035cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	4908      	ldr	r1, [pc, #32]	; (80035dc <__NVIC_SetPriority+0x50>)
 80035bc:	79fb      	ldrb	r3, [r7, #7]
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	3b04      	subs	r3, #4
 80035c4:	0112      	lsls	r2, r2, #4
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	440b      	add	r3, r1
 80035ca:	761a      	strb	r2, [r3, #24]
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	e000e100 	.word	0xe000e100
 80035dc:	e000ed00 	.word	0xe000ed00

080035e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b089      	sub	sp, #36	; 0x24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	f1c3 0307 	rsb	r3, r3, #7
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	bf28      	it	cs
 80035fe:	2304      	movcs	r3, #4
 8003600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	3304      	adds	r3, #4
 8003606:	2b06      	cmp	r3, #6
 8003608:	d902      	bls.n	8003610 <NVIC_EncodePriority+0x30>
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	3b03      	subs	r3, #3
 800360e:	e000      	b.n	8003612 <NVIC_EncodePriority+0x32>
 8003610:	2300      	movs	r3, #0
 8003612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003614:	f04f 32ff 	mov.w	r2, #4294967295
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	43da      	mvns	r2, r3
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	401a      	ands	r2, r3
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003628:	f04f 31ff 	mov.w	r1, #4294967295
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	fa01 f303 	lsl.w	r3, r1, r3
 8003632:	43d9      	mvns	r1, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003638:	4313      	orrs	r3, r2
         );
}
 800363a:	4618      	mov	r0, r3
 800363c:	3724      	adds	r7, #36	; 0x24
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
	...

08003648 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3b01      	subs	r3, #1
 8003654:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003658:	d301      	bcc.n	800365e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800365a:	2301      	movs	r3, #1
 800365c:	e00f      	b.n	800367e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800365e:	4a0a      	ldr	r2, [pc, #40]	; (8003688 <SysTick_Config+0x40>)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3b01      	subs	r3, #1
 8003664:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003666:	210f      	movs	r1, #15
 8003668:	f04f 30ff 	mov.w	r0, #4294967295
 800366c:	f7ff ff8e 	bl	800358c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003670:	4b05      	ldr	r3, [pc, #20]	; (8003688 <SysTick_Config+0x40>)
 8003672:	2200      	movs	r2, #0
 8003674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003676:	4b04      	ldr	r3, [pc, #16]	; (8003688 <SysTick_Config+0x40>)
 8003678:	2207      	movs	r2, #7
 800367a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	e000e010 	.word	0xe000e010

0800368c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f7ff ff47 	bl	8003528 <__NVIC_SetPriorityGrouping>
}
 800369a:	bf00      	nop
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b086      	sub	sp, #24
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	4603      	mov	r3, r0
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	607a      	str	r2, [r7, #4]
 80036ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036b0:	2300      	movs	r3, #0
 80036b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036b4:	f7ff ff5c 	bl	8003570 <__NVIC_GetPriorityGrouping>
 80036b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	68b9      	ldr	r1, [r7, #8]
 80036be:	6978      	ldr	r0, [r7, #20]
 80036c0:	f7ff ff8e 	bl	80035e0 <NVIC_EncodePriority>
 80036c4:	4602      	mov	r2, r0
 80036c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ca:	4611      	mov	r1, r2
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7ff ff5d 	bl	800358c <__NVIC_SetPriority>
}
 80036d2:	bf00      	nop
 80036d4:	3718      	adds	r7, #24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b082      	sub	sp, #8
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7ff ffb0 	bl	8003648 <SysTick_Config>
 80036e8:	4603      	mov	r3, r0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
	...

080036f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b089      	sub	sp, #36	; 0x24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036fe:	2300      	movs	r3, #0
 8003700:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003702:	2300      	movs	r3, #0
 8003704:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003706:	2300      	movs	r3, #0
 8003708:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800370a:	2300      	movs	r3, #0
 800370c:	61fb      	str	r3, [r7, #28]
 800370e:	e16b      	b.n	80039e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003710:	2201      	movs	r2, #1
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	4013      	ands	r3, r2
 8003722:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	429a      	cmp	r2, r3
 800372a:	f040 815a 	bne.w	80039e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f003 0303 	and.w	r3, r3, #3
 8003736:	2b01      	cmp	r3, #1
 8003738:	d005      	beq.n	8003746 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003742:	2b02      	cmp	r3, #2
 8003744:	d130      	bne.n	80037a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	2203      	movs	r2, #3
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	43db      	mvns	r3, r3
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	4013      	ands	r3, r2
 800375c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	68da      	ldr	r2, [r3, #12]
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	fa02 f303 	lsl.w	r3, r2, r3
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	4313      	orrs	r3, r2
 800376e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800377c:	2201      	movs	r2, #1
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	43db      	mvns	r3, r3
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	4013      	ands	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	091b      	lsrs	r3, r3, #4
 8003792:	f003 0201 	and.w	r2, r3, #1
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	4313      	orrs	r3, r2
 80037a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f003 0303 	and.w	r3, r3, #3
 80037b0:	2b03      	cmp	r3, #3
 80037b2:	d017      	beq.n	80037e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	2203      	movs	r2, #3
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	43db      	mvns	r3, r3
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	4013      	ands	r3, r2
 80037ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	4313      	orrs	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f003 0303 	and.w	r3, r3, #3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d123      	bne.n	8003838 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	08da      	lsrs	r2, r3, #3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3208      	adds	r2, #8
 80037f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	220f      	movs	r2, #15
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	43db      	mvns	r3, r3
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	4013      	ands	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	691a      	ldr	r2, [r3, #16]
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	4313      	orrs	r3, r2
 8003828:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	08da      	lsrs	r2, r3, #3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	3208      	adds	r2, #8
 8003832:	69b9      	ldr	r1, [r7, #24]
 8003834:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	2203      	movs	r2, #3
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	43db      	mvns	r3, r3
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	4013      	ands	r3, r2
 800384e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f003 0203 	and.w	r2, r3, #3
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	4313      	orrs	r3, r2
 8003864:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 80b4 	beq.w	80039e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800387a:	2300      	movs	r3, #0
 800387c:	60fb      	str	r3, [r7, #12]
 800387e:	4b60      	ldr	r3, [pc, #384]	; (8003a00 <HAL_GPIO_Init+0x30c>)
 8003880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003882:	4a5f      	ldr	r2, [pc, #380]	; (8003a00 <HAL_GPIO_Init+0x30c>)
 8003884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003888:	6453      	str	r3, [r2, #68]	; 0x44
 800388a:	4b5d      	ldr	r3, [pc, #372]	; (8003a00 <HAL_GPIO_Init+0x30c>)
 800388c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003892:	60fb      	str	r3, [r7, #12]
 8003894:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003896:	4a5b      	ldr	r2, [pc, #364]	; (8003a04 <HAL_GPIO_Init+0x310>)
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	089b      	lsrs	r3, r3, #2
 800389c:	3302      	adds	r3, #2
 800389e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	f003 0303 	and.w	r3, r3, #3
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	220f      	movs	r2, #15
 80038ae:	fa02 f303 	lsl.w	r3, r2, r3
 80038b2:	43db      	mvns	r3, r3
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	4013      	ands	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a52      	ldr	r2, [pc, #328]	; (8003a08 <HAL_GPIO_Init+0x314>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d02b      	beq.n	800391a <HAL_GPIO_Init+0x226>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a51      	ldr	r2, [pc, #324]	; (8003a0c <HAL_GPIO_Init+0x318>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d025      	beq.n	8003916 <HAL_GPIO_Init+0x222>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a50      	ldr	r2, [pc, #320]	; (8003a10 <HAL_GPIO_Init+0x31c>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d01f      	beq.n	8003912 <HAL_GPIO_Init+0x21e>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a4f      	ldr	r2, [pc, #316]	; (8003a14 <HAL_GPIO_Init+0x320>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d019      	beq.n	800390e <HAL_GPIO_Init+0x21a>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a4e      	ldr	r2, [pc, #312]	; (8003a18 <HAL_GPIO_Init+0x324>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d013      	beq.n	800390a <HAL_GPIO_Init+0x216>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a4d      	ldr	r2, [pc, #308]	; (8003a1c <HAL_GPIO_Init+0x328>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d00d      	beq.n	8003906 <HAL_GPIO_Init+0x212>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a4c      	ldr	r2, [pc, #304]	; (8003a20 <HAL_GPIO_Init+0x32c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d007      	beq.n	8003902 <HAL_GPIO_Init+0x20e>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a4b      	ldr	r2, [pc, #300]	; (8003a24 <HAL_GPIO_Init+0x330>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d101      	bne.n	80038fe <HAL_GPIO_Init+0x20a>
 80038fa:	2307      	movs	r3, #7
 80038fc:	e00e      	b.n	800391c <HAL_GPIO_Init+0x228>
 80038fe:	2308      	movs	r3, #8
 8003900:	e00c      	b.n	800391c <HAL_GPIO_Init+0x228>
 8003902:	2306      	movs	r3, #6
 8003904:	e00a      	b.n	800391c <HAL_GPIO_Init+0x228>
 8003906:	2305      	movs	r3, #5
 8003908:	e008      	b.n	800391c <HAL_GPIO_Init+0x228>
 800390a:	2304      	movs	r3, #4
 800390c:	e006      	b.n	800391c <HAL_GPIO_Init+0x228>
 800390e:	2303      	movs	r3, #3
 8003910:	e004      	b.n	800391c <HAL_GPIO_Init+0x228>
 8003912:	2302      	movs	r3, #2
 8003914:	e002      	b.n	800391c <HAL_GPIO_Init+0x228>
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <HAL_GPIO_Init+0x228>
 800391a:	2300      	movs	r3, #0
 800391c:	69fa      	ldr	r2, [r7, #28]
 800391e:	f002 0203 	and.w	r2, r2, #3
 8003922:	0092      	lsls	r2, r2, #2
 8003924:	4093      	lsls	r3, r2
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	4313      	orrs	r3, r2
 800392a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800392c:	4935      	ldr	r1, [pc, #212]	; (8003a04 <HAL_GPIO_Init+0x310>)
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	089b      	lsrs	r3, r3, #2
 8003932:	3302      	adds	r3, #2
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800393a:	4b3b      	ldr	r3, [pc, #236]	; (8003a28 <HAL_GPIO_Init+0x334>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	43db      	mvns	r3, r3
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	4013      	ands	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	4313      	orrs	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800395e:	4a32      	ldr	r2, [pc, #200]	; (8003a28 <HAL_GPIO_Init+0x334>)
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003964:	4b30      	ldr	r3, [pc, #192]	; (8003a28 <HAL_GPIO_Init+0x334>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	43db      	mvns	r3, r3
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	4013      	ands	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d003      	beq.n	8003988 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	4313      	orrs	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003988:	4a27      	ldr	r2, [pc, #156]	; (8003a28 <HAL_GPIO_Init+0x334>)
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800398e:	4b26      	ldr	r3, [pc, #152]	; (8003a28 <HAL_GPIO_Init+0x334>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	43db      	mvns	r3, r3
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	4013      	ands	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039b2:	4a1d      	ldr	r2, [pc, #116]	; (8003a28 <HAL_GPIO_Init+0x334>)
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039b8:	4b1b      	ldr	r3, [pc, #108]	; (8003a28 <HAL_GPIO_Init+0x334>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	43db      	mvns	r3, r3
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	4013      	ands	r3, r2
 80039c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039dc:	4a12      	ldr	r2, [pc, #72]	; (8003a28 <HAL_GPIO_Init+0x334>)
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	3301      	adds	r3, #1
 80039e6:	61fb      	str	r3, [r7, #28]
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	2b0f      	cmp	r3, #15
 80039ec:	f67f ae90 	bls.w	8003710 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039f0:	bf00      	nop
 80039f2:	bf00      	nop
 80039f4:	3724      	adds	r7, #36	; 0x24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	40023800 	.word	0x40023800
 8003a04:	40013800 	.word	0x40013800
 8003a08:	40020000 	.word	0x40020000
 8003a0c:	40020400 	.word	0x40020400
 8003a10:	40020800 	.word	0x40020800
 8003a14:	40020c00 	.word	0x40020c00
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	40021400 	.word	0x40021400
 8003a20:	40021800 	.word	0x40021800
 8003a24:	40021c00 	.word	0x40021c00
 8003a28:	40013c00 	.word	0x40013c00

08003a2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	807b      	strh	r3, [r7, #2]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a3c:	787b      	ldrb	r3, [r7, #1]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a42:	887a      	ldrh	r2, [r7, #2]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a48:	e003      	b.n	8003a52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a4a:	887b      	ldrh	r3, [r7, #2]
 8003a4c:	041a      	lsls	r2, r3, #16
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	619a      	str	r2, [r3, #24]
}
 8003a52:	bf00      	nop
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
	...

08003a60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e12b      	b.n	8003cca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d106      	bne.n	8003a8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7ff fad0 	bl	800302c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2224      	movs	r2, #36	; 0x24
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0201 	bic.w	r2, r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ab2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ac2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ac4:	f001 fbac 	bl	8005220 <HAL_RCC_GetPCLK1Freq>
 8003ac8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	4a81      	ldr	r2, [pc, #516]	; (8003cd4 <HAL_I2C_Init+0x274>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d807      	bhi.n	8003ae4 <HAL_I2C_Init+0x84>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4a80      	ldr	r2, [pc, #512]	; (8003cd8 <HAL_I2C_Init+0x278>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	bf94      	ite	ls
 8003adc:	2301      	movls	r3, #1
 8003ade:	2300      	movhi	r3, #0
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	e006      	b.n	8003af2 <HAL_I2C_Init+0x92>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	4a7d      	ldr	r2, [pc, #500]	; (8003cdc <HAL_I2C_Init+0x27c>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	bf94      	ite	ls
 8003aec:	2301      	movls	r3, #1
 8003aee:	2300      	movhi	r3, #0
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e0e7      	b.n	8003cca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	4a78      	ldr	r2, [pc, #480]	; (8003ce0 <HAL_I2C_Init+0x280>)
 8003afe:	fba2 2303 	umull	r2, r3, r2, r3
 8003b02:	0c9b      	lsrs	r3, r3, #18
 8003b04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	4a6a      	ldr	r2, [pc, #424]	; (8003cd4 <HAL_I2C_Init+0x274>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d802      	bhi.n	8003b34 <HAL_I2C_Init+0xd4>
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	3301      	adds	r3, #1
 8003b32:	e009      	b.n	8003b48 <HAL_I2C_Init+0xe8>
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b3a:	fb02 f303 	mul.w	r3, r2, r3
 8003b3e:	4a69      	ldr	r2, [pc, #420]	; (8003ce4 <HAL_I2C_Init+0x284>)
 8003b40:	fba2 2303 	umull	r2, r3, r2, r3
 8003b44:	099b      	lsrs	r3, r3, #6
 8003b46:	3301      	adds	r3, #1
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6812      	ldr	r2, [r2, #0]
 8003b4c:	430b      	orrs	r3, r1
 8003b4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	495c      	ldr	r1, [pc, #368]	; (8003cd4 <HAL_I2C_Init+0x274>)
 8003b64:	428b      	cmp	r3, r1
 8003b66:	d819      	bhi.n	8003b9c <HAL_I2C_Init+0x13c>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	1e59      	subs	r1, r3, #1
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b76:	1c59      	adds	r1, r3, #1
 8003b78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b7c:	400b      	ands	r3, r1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00a      	beq.n	8003b98 <HAL_I2C_Init+0x138>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	1e59      	subs	r1, r3, #1
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b90:	3301      	adds	r3, #1
 8003b92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b96:	e051      	b.n	8003c3c <HAL_I2C_Init+0x1dc>
 8003b98:	2304      	movs	r3, #4
 8003b9a:	e04f      	b.n	8003c3c <HAL_I2C_Init+0x1dc>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d111      	bne.n	8003bc8 <HAL_I2C_Init+0x168>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	1e58      	subs	r0, r3, #1
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6859      	ldr	r1, [r3, #4]
 8003bac:	460b      	mov	r3, r1
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	440b      	add	r3, r1
 8003bb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	bf0c      	ite	eq
 8003bc0:	2301      	moveq	r3, #1
 8003bc2:	2300      	movne	r3, #0
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	e012      	b.n	8003bee <HAL_I2C_Init+0x18e>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	1e58      	subs	r0, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6859      	ldr	r1, [r3, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	0099      	lsls	r1, r3, #2
 8003bd8:	440b      	add	r3, r1
 8003bda:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bde:	3301      	adds	r3, #1
 8003be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	bf0c      	ite	eq
 8003be8:	2301      	moveq	r3, #1
 8003bea:	2300      	movne	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <HAL_I2C_Init+0x196>
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e022      	b.n	8003c3c <HAL_I2C_Init+0x1dc>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10e      	bne.n	8003c1c <HAL_I2C_Init+0x1bc>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	1e58      	subs	r0, r3, #1
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6859      	ldr	r1, [r3, #4]
 8003c06:	460b      	mov	r3, r1
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	440b      	add	r3, r1
 8003c0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c10:	3301      	adds	r3, #1
 8003c12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c1a:	e00f      	b.n	8003c3c <HAL_I2C_Init+0x1dc>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	1e58      	subs	r0, r3, #1
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6859      	ldr	r1, [r3, #4]
 8003c24:	460b      	mov	r3, r1
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	440b      	add	r3, r1
 8003c2a:	0099      	lsls	r1, r3, #2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c32:	3301      	adds	r3, #1
 8003c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	6809      	ldr	r1, [r1, #0]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	69da      	ldr	r2, [r3, #28]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	6911      	ldr	r1, [r2, #16]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	68d2      	ldr	r2, [r2, #12]
 8003c76:	4311      	orrs	r1, r2
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	6812      	ldr	r2, [r2, #0]
 8003c7c:	430b      	orrs	r3, r1
 8003c7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	695a      	ldr	r2, [r3, #20]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	431a      	orrs	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f042 0201 	orr.w	r2, r2, #1
 8003caa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	000186a0 	.word	0x000186a0
 8003cd8:	001e847f 	.word	0x001e847f
 8003cdc:	003d08ff 	.word	0x003d08ff
 8003ce0:	431bde83 	.word	0x431bde83
 8003ce4:	10624dd3 	.word	0x10624dd3

08003ce8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b088      	sub	sp, #32
 8003cec:	af02      	add	r7, sp, #8
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	4608      	mov	r0, r1
 8003cf2:	4611      	mov	r1, r2
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	817b      	strh	r3, [r7, #10]
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	813b      	strh	r3, [r7, #8]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d02:	f7ff fbe1 	bl	80034c8 <HAL_GetTick>
 8003d06:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b20      	cmp	r3, #32
 8003d12:	f040 80d9 	bne.w	8003ec8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	2319      	movs	r3, #25
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	496d      	ldr	r1, [pc, #436]	; (8003ed4 <HAL_I2C_Mem_Write+0x1ec>)
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 fc7f 	bl	8004624 <I2C_WaitOnFlagUntilTimeout>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e0cc      	b.n	8003eca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d101      	bne.n	8003d3e <HAL_I2C_Mem_Write+0x56>
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	e0c5      	b.n	8003eca <HAL_I2C_Mem_Write+0x1e2>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d007      	beq.n	8003d64 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f042 0201 	orr.w	r2, r2, #1
 8003d62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2221      	movs	r2, #33	; 0x21
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2240      	movs	r2, #64	; 0x40
 8003d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6a3a      	ldr	r2, [r7, #32]
 8003d8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4a4d      	ldr	r2, [pc, #308]	; (8003ed8 <HAL_I2C_Mem_Write+0x1f0>)
 8003da4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003da6:	88f8      	ldrh	r0, [r7, #6]
 8003da8:	893a      	ldrh	r2, [r7, #8]
 8003daa:	8979      	ldrh	r1, [r7, #10]
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	9301      	str	r3, [sp, #4]
 8003db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	4603      	mov	r3, r0
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 fab6 	bl	8004328 <I2C_RequestMemoryWrite>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d052      	beq.n	8003e68 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e081      	b.n	8003eca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f000 fd00 	bl	80047d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00d      	beq.n	8003df2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d107      	bne.n	8003dee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e06b      	b.n	8003eca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	781a      	ldrb	r2, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e02:	1c5a      	adds	r2, r3, #1
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b04      	cmp	r3, #4
 8003e2e:	d11b      	bne.n	8003e68 <HAL_I2C_Mem_Write+0x180>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d017      	beq.n	8003e68 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	781a      	ldrb	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e52:	3b01      	subs	r3, #1
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	3b01      	subs	r3, #1
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1aa      	bne.n	8003dc6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f000 fcec 	bl	8004852 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00d      	beq.n	8003e9c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e84:	2b04      	cmp	r3, #4
 8003e86:	d107      	bne.n	8003e98 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e96:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e016      	b.n	8003eca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	e000      	b.n	8003eca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003ec8:	2302      	movs	r3, #2
  }
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3718      	adds	r7, #24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	00100002 	.word	0x00100002
 8003ed8:	ffff0000 	.word	0xffff0000

08003edc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b08c      	sub	sp, #48	; 0x30
 8003ee0:	af02      	add	r7, sp, #8
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	4608      	mov	r0, r1
 8003ee6:	4611      	mov	r1, r2
 8003ee8:	461a      	mov	r2, r3
 8003eea:	4603      	mov	r3, r0
 8003eec:	817b      	strh	r3, [r7, #10]
 8003eee:	460b      	mov	r3, r1
 8003ef0:	813b      	strh	r3, [r7, #8]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ef6:	f7ff fae7 	bl	80034c8 <HAL_GetTick>
 8003efa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b20      	cmp	r3, #32
 8003f06:	f040 8208 	bne.w	800431a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	2319      	movs	r3, #25
 8003f10:	2201      	movs	r2, #1
 8003f12:	497b      	ldr	r1, [pc, #492]	; (8004100 <HAL_I2C_Mem_Read+0x224>)
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f000 fb85 	bl	8004624 <I2C_WaitOnFlagUntilTimeout>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003f20:	2302      	movs	r3, #2
 8003f22:	e1fb      	b.n	800431c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d101      	bne.n	8003f32 <HAL_I2C_Mem_Read+0x56>
 8003f2e:	2302      	movs	r3, #2
 8003f30:	e1f4      	b.n	800431c <HAL_I2C_Mem_Read+0x440>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d007      	beq.n	8003f58 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 0201 	orr.w	r2, r2, #1
 8003f56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2222      	movs	r2, #34	; 0x22
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2240      	movs	r2, #64	; 0x40
 8003f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003f88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	4a5b      	ldr	r2, [pc, #364]	; (8004104 <HAL_I2C_Mem_Read+0x228>)
 8003f98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f9a:	88f8      	ldrh	r0, [r7, #6]
 8003f9c:	893a      	ldrh	r2, [r7, #8]
 8003f9e:	8979      	ldrh	r1, [r7, #10]
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	9301      	str	r3, [sp, #4]
 8003fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	4603      	mov	r3, r0
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f000 fa52 	bl	8004454 <I2C_RequestMemoryRead>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e1b0      	b.n	800431c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d113      	bne.n	8003fea <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	623b      	str	r3, [r7, #32]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	623b      	str	r3, [r7, #32]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	623b      	str	r3, [r7, #32]
 8003fd6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fe6:	601a      	str	r2, [r3, #0]
 8003fe8:	e184      	b.n	80042f4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d11b      	bne.n	800402a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004000:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004002:	2300      	movs	r3, #0
 8004004:	61fb      	str	r3, [r7, #28]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	61fb      	str	r3, [r7, #28]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	61fb      	str	r3, [r7, #28]
 8004016:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	e164      	b.n	80042f4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402e:	2b02      	cmp	r3, #2
 8004030:	d11b      	bne.n	800406a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004040:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004050:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004052:	2300      	movs	r3, #0
 8004054:	61bb      	str	r3, [r7, #24]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	61bb      	str	r3, [r7, #24]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	61bb      	str	r3, [r7, #24]
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	e144      	b.n	80042f4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800406a:	2300      	movs	r3, #0
 800406c:	617b      	str	r3, [r7, #20]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	617b      	str	r3, [r7, #20]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	617b      	str	r3, [r7, #20]
 800407e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004080:	e138      	b.n	80042f4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004086:	2b03      	cmp	r3, #3
 8004088:	f200 80f1 	bhi.w	800426e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004090:	2b01      	cmp	r3, #1
 8004092:	d123      	bne.n	80040dc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004096:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f000 fc1b 	bl	80048d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d001      	beq.n	80040a8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e139      	b.n	800431c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	691a      	ldr	r2, [r3, #16]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	b2d2      	uxtb	r2, r2
 80040b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	1c5a      	adds	r2, r3, #1
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c4:	3b01      	subs	r3, #1
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	3b01      	subs	r3, #1
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040da:	e10b      	b.n	80042f4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d14e      	bne.n	8004182 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ea:	2200      	movs	r2, #0
 80040ec:	4906      	ldr	r1, [pc, #24]	; (8004108 <HAL_I2C_Mem_Read+0x22c>)
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f000 fa98 	bl	8004624 <I2C_WaitOnFlagUntilTimeout>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d008      	beq.n	800410c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e10e      	b.n	800431c <HAL_I2C_Mem_Read+0x440>
 80040fe:	bf00      	nop
 8004100:	00100002 	.word	0x00100002
 8004104:	ffff0000 	.word	0xffff0000
 8004108:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800411a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	691a      	ldr	r2, [r3, #16]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004126:	b2d2      	uxtb	r2, r2
 8004128:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	1c5a      	adds	r2, r3, #1
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004138:	3b01      	subs	r3, #1
 800413a:	b29a      	uxth	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004144:	b29b      	uxth	r3, r3
 8004146:	3b01      	subs	r3, #1
 8004148:	b29a      	uxth	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	691a      	ldr	r2, [r3, #16]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004158:	b2d2      	uxtb	r2, r2
 800415a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	1c5a      	adds	r2, r3, #1
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416a:	3b01      	subs	r3, #1
 800416c:	b29a      	uxth	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004176:	b29b      	uxth	r3, r3
 8004178:	3b01      	subs	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004180:	e0b8      	b.n	80042f4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004188:	2200      	movs	r2, #0
 800418a:	4966      	ldr	r1, [pc, #408]	; (8004324 <HAL_I2C_Mem_Read+0x448>)
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 fa49 	bl	8004624 <I2C_WaitOnFlagUntilTimeout>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e0bf      	b.n	800431c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	691a      	ldr	r2, [r3, #16]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	1c5a      	adds	r2, r3, #1
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c8:	3b01      	subs	r3, #1
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	3b01      	subs	r3, #1
 80041d8:	b29a      	uxth	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e4:	2200      	movs	r2, #0
 80041e6:	494f      	ldr	r1, [pc, #316]	; (8004324 <HAL_I2C_Mem_Read+0x448>)
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f000 fa1b 	bl	8004624 <I2C_WaitOnFlagUntilTimeout>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d001      	beq.n	80041f8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e091      	b.n	800431c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004206:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	691a      	ldr	r2, [r3, #16]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	b2d2      	uxtb	r2, r2
 8004214:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	1c5a      	adds	r2, r3, #1
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004224:	3b01      	subs	r3, #1
 8004226:	b29a      	uxth	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004230:	b29b      	uxth	r3, r3
 8004232:	3b01      	subs	r3, #1
 8004234:	b29a      	uxth	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	691a      	ldr	r2, [r3, #16]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	b2d2      	uxtb	r2, r2
 8004246:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424c:	1c5a      	adds	r2, r3, #1
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004256:	3b01      	subs	r3, #1
 8004258:	b29a      	uxth	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004262:	b29b      	uxth	r3, r3
 8004264:	3b01      	subs	r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800426c:	e042      	b.n	80042f4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800426e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004270:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 fb2e 	bl	80048d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e04c      	b.n	800431c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	691a      	ldr	r2, [r3, #16]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	b2d2      	uxtb	r2, r2
 800428e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	1c5a      	adds	r2, r3, #1
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800429e:	3b01      	subs	r3, #1
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	3b01      	subs	r3, #1
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	f003 0304 	and.w	r3, r3, #4
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d118      	bne.n	80042f4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	691a      	ldr	r2, [r3, #16]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	b2d2      	uxtb	r2, r2
 80042ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	1c5a      	adds	r2, r3, #1
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042de:	3b01      	subs	r3, #1
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	3b01      	subs	r3, #1
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f47f aec2 	bne.w	8004082 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2220      	movs	r2, #32
 8004302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004316:	2300      	movs	r3, #0
 8004318:	e000      	b.n	800431c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800431a:	2302      	movs	r3, #2
  }
}
 800431c:	4618      	mov	r0, r3
 800431e:	3728      	adds	r7, #40	; 0x28
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	00010004 	.word	0x00010004

08004328 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b088      	sub	sp, #32
 800432c:	af02      	add	r7, sp, #8
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	4608      	mov	r0, r1
 8004332:	4611      	mov	r1, r2
 8004334:	461a      	mov	r2, r3
 8004336:	4603      	mov	r3, r0
 8004338:	817b      	strh	r3, [r7, #10]
 800433a:	460b      	mov	r3, r1
 800433c:	813b      	strh	r3, [r7, #8]
 800433e:	4613      	mov	r3, r2
 8004340:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004350:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	9300      	str	r3, [sp, #0]
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	2200      	movs	r2, #0
 800435a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f000 f960 	bl	8004624 <I2C_WaitOnFlagUntilTimeout>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00d      	beq.n	8004386 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004374:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004378:	d103      	bne.n	8004382 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004380:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e05f      	b.n	8004446 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004386:	897b      	ldrh	r3, [r7, #10]
 8004388:	b2db      	uxtb	r3, r3
 800438a:	461a      	mov	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004394:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004398:	6a3a      	ldr	r2, [r7, #32]
 800439a:	492d      	ldr	r1, [pc, #180]	; (8004450 <I2C_RequestMemoryWrite+0x128>)
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f000 f998 	bl	80046d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d001      	beq.n	80043ac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e04c      	b.n	8004446 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ac:	2300      	movs	r3, #0
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	617b      	str	r3, [r7, #20]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c4:	6a39      	ldr	r1, [r7, #32]
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 fa02 	bl	80047d0 <I2C_WaitOnTXEFlagUntilTimeout>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00d      	beq.n	80043ee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	d107      	bne.n	80043ea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e02b      	b.n	8004446 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043ee:	88fb      	ldrh	r3, [r7, #6]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d105      	bne.n	8004400 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043f4:	893b      	ldrh	r3, [r7, #8]
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	611a      	str	r2, [r3, #16]
 80043fe:	e021      	b.n	8004444 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004400:	893b      	ldrh	r3, [r7, #8]
 8004402:	0a1b      	lsrs	r3, r3, #8
 8004404:	b29b      	uxth	r3, r3
 8004406:	b2da      	uxtb	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800440e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004410:	6a39      	ldr	r1, [r7, #32]
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f000 f9dc 	bl	80047d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00d      	beq.n	800443a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	2b04      	cmp	r3, #4
 8004424:	d107      	bne.n	8004436 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004434:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e005      	b.n	8004446 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800443a:	893b      	ldrh	r3, [r7, #8]
 800443c:	b2da      	uxtb	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3718      	adds	r7, #24
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	00010002 	.word	0x00010002

08004454 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b088      	sub	sp, #32
 8004458:	af02      	add	r7, sp, #8
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	4608      	mov	r0, r1
 800445e:	4611      	mov	r1, r2
 8004460:	461a      	mov	r2, r3
 8004462:	4603      	mov	r3, r0
 8004464:	817b      	strh	r3, [r7, #10]
 8004466:	460b      	mov	r3, r1
 8004468:	813b      	strh	r3, [r7, #8]
 800446a:	4613      	mov	r3, r2
 800446c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800447c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800448c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	6a3b      	ldr	r3, [r7, #32]
 8004494:	2200      	movs	r2, #0
 8004496:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f000 f8c2 	bl	8004624 <I2C_WaitOnFlagUntilTimeout>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00d      	beq.n	80044c2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044b4:	d103      	bne.n	80044be <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e0aa      	b.n	8004618 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044c2:	897b      	ldrh	r3, [r7, #10]
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	461a      	mov	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80044d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d4:	6a3a      	ldr	r2, [r7, #32]
 80044d6:	4952      	ldr	r1, [pc, #328]	; (8004620 <I2C_RequestMemoryRead+0x1cc>)
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f000 f8fa 	bl	80046d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e097      	b.n	8004618 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044e8:	2300      	movs	r3, #0
 80044ea:	617b      	str	r3, [r7, #20]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	617b      	str	r3, [r7, #20]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	617b      	str	r3, [r7, #20]
 80044fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004500:	6a39      	ldr	r1, [r7, #32]
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f000 f964 	bl	80047d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00d      	beq.n	800452a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004512:	2b04      	cmp	r3, #4
 8004514:	d107      	bne.n	8004526 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004524:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e076      	b.n	8004618 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800452a:	88fb      	ldrh	r3, [r7, #6]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d105      	bne.n	800453c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004530:	893b      	ldrh	r3, [r7, #8]
 8004532:	b2da      	uxtb	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	611a      	str	r2, [r3, #16]
 800453a:	e021      	b.n	8004580 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800453c:	893b      	ldrh	r3, [r7, #8]
 800453e:	0a1b      	lsrs	r3, r3, #8
 8004540:	b29b      	uxth	r3, r3
 8004542:	b2da      	uxtb	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800454a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800454c:	6a39      	ldr	r1, [r7, #32]
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 f93e 	bl	80047d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00d      	beq.n	8004576 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455e:	2b04      	cmp	r3, #4
 8004560:	d107      	bne.n	8004572 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004570:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e050      	b.n	8004618 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004576:	893b      	ldrh	r3, [r7, #8]
 8004578:	b2da      	uxtb	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004582:	6a39      	ldr	r1, [r7, #32]
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f000 f923 	bl	80047d0 <I2C_WaitOnTXEFlagUntilTimeout>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00d      	beq.n	80045ac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004594:	2b04      	cmp	r3, #4
 8004596:	d107      	bne.n	80045a8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045a6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e035      	b.n	8004618 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045ba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f000 f82b 	bl	8004624 <I2C_WaitOnFlagUntilTimeout>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00d      	beq.n	80045f0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045e2:	d103      	bne.n	80045ec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e013      	b.n	8004618 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80045f0:	897b      	ldrh	r3, [r7, #10]
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	f043 0301 	orr.w	r3, r3, #1
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	6a3a      	ldr	r2, [r7, #32]
 8004604:	4906      	ldr	r1, [pc, #24]	; (8004620 <I2C_RequestMemoryRead+0x1cc>)
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 f863 	bl	80046d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e000      	b.n	8004618 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3718      	adds	r7, #24
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	00010002 	.word	0x00010002

08004624 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	603b      	str	r3, [r7, #0]
 8004630:	4613      	mov	r3, r2
 8004632:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004634:	e025      	b.n	8004682 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800463c:	d021      	beq.n	8004682 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800463e:	f7fe ff43 	bl	80034c8 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	429a      	cmp	r2, r3
 800464c:	d302      	bcc.n	8004654 <I2C_WaitOnFlagUntilTimeout+0x30>
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d116      	bne.n	8004682 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2220      	movs	r2, #32
 800465e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	f043 0220 	orr.w	r2, r3, #32
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e023      	b.n	80046ca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	0c1b      	lsrs	r3, r3, #16
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b01      	cmp	r3, #1
 800468a:	d10d      	bne.n	80046a8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	43da      	mvns	r2, r3
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	4013      	ands	r3, r2
 8004698:	b29b      	uxth	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	bf0c      	ite	eq
 800469e:	2301      	moveq	r3, #1
 80046a0:	2300      	movne	r3, #0
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	461a      	mov	r2, r3
 80046a6:	e00c      	b.n	80046c2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	43da      	mvns	r2, r3
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	4013      	ands	r3, r2
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	bf0c      	ite	eq
 80046ba:	2301      	moveq	r3, #1
 80046bc:	2300      	movne	r3, #0
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	461a      	mov	r2, r3
 80046c2:	79fb      	ldrb	r3, [r7, #7]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d0b6      	beq.n	8004636 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b084      	sub	sp, #16
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	60f8      	str	r0, [r7, #12]
 80046da:	60b9      	str	r1, [r7, #8]
 80046dc:	607a      	str	r2, [r7, #4]
 80046de:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046e0:	e051      	b.n	8004786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046f0:	d123      	bne.n	800473a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004700:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800470a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2220      	movs	r2, #32
 8004716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	f043 0204 	orr.w	r2, r3, #4
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e046      	b.n	80047c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004740:	d021      	beq.n	8004786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004742:	f7fe fec1 	bl	80034c8 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	429a      	cmp	r2, r3
 8004750:	d302      	bcc.n	8004758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d116      	bne.n	8004786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2220      	movs	r2, #32
 8004762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	f043 0220 	orr.w	r2, r3, #32
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e020      	b.n	80047c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	0c1b      	lsrs	r3, r3, #16
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b01      	cmp	r3, #1
 800478e:	d10c      	bne.n	80047aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	43da      	mvns	r2, r3
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	4013      	ands	r3, r2
 800479c:	b29b      	uxth	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	bf14      	ite	ne
 80047a2:	2301      	movne	r3, #1
 80047a4:	2300      	moveq	r3, #0
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	e00b      	b.n	80047c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	43da      	mvns	r2, r3
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	4013      	ands	r3, r2
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	bf14      	ite	ne
 80047bc:	2301      	movne	r3, #1
 80047be:	2300      	moveq	r3, #0
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d18d      	bne.n	80046e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047dc:	e02d      	b.n	800483a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f000 f8ce 	bl	8004980 <I2C_IsAcknowledgeFailed>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e02d      	b.n	800484a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f4:	d021      	beq.n	800483a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047f6:	f7fe fe67 	bl	80034c8 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	429a      	cmp	r2, r3
 8004804:	d302      	bcc.n	800480c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d116      	bne.n	800483a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2220      	movs	r2, #32
 8004816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004826:	f043 0220 	orr.w	r2, r3, #32
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e007      	b.n	800484a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004844:	2b80      	cmp	r3, #128	; 0x80
 8004846:	d1ca      	bne.n	80047de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b084      	sub	sp, #16
 8004856:	af00      	add	r7, sp, #0
 8004858:	60f8      	str	r0, [r7, #12]
 800485a:	60b9      	str	r1, [r7, #8]
 800485c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800485e:	e02d      	b.n	80048bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 f88d 	bl	8004980 <I2C_IsAcknowledgeFailed>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d001      	beq.n	8004870 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e02d      	b.n	80048cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004876:	d021      	beq.n	80048bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004878:	f7fe fe26 	bl	80034c8 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	429a      	cmp	r2, r3
 8004886:	d302      	bcc.n	800488e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d116      	bne.n	80048bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2220      	movs	r2, #32
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a8:	f043 0220 	orr.w	r2, r3, #32
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e007      	b.n	80048cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	f003 0304 	and.w	r3, r3, #4
 80048c6:	2b04      	cmp	r3, #4
 80048c8:	d1ca      	bne.n	8004860 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048e0:	e042      	b.n	8004968 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	f003 0310 	and.w	r3, r3, #16
 80048ec:	2b10      	cmp	r3, #16
 80048ee:	d119      	bne.n	8004924 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f06f 0210 	mvn.w	r2, #16
 80048f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2220      	movs	r2, #32
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e029      	b.n	8004978 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004924:	f7fe fdd0 	bl	80034c8 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	429a      	cmp	r2, r3
 8004932:	d302      	bcc.n	800493a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d116      	bne.n	8004968 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2220      	movs	r2, #32
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004954:	f043 0220 	orr.w	r2, r3, #32
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e007      	b.n	8004978 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004972:	2b40      	cmp	r3, #64	; 0x40
 8004974:	d1b5      	bne.n	80048e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3710      	adds	r7, #16
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004996:	d11b      	bne.n	80049d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2220      	movs	r2, #32
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049bc:	f043 0204 	orr.w	r2, r3, #4
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e000      	b.n	80049d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
	...

080049e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e264      	b.n	8004ebc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d075      	beq.n	8004aea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049fe:	4ba3      	ldr	r3, [pc, #652]	; (8004c8c <HAL_RCC_OscConfig+0x2ac>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f003 030c 	and.w	r3, r3, #12
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d00c      	beq.n	8004a24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a0a:	4ba0      	ldr	r3, [pc, #640]	; (8004c8c <HAL_RCC_OscConfig+0x2ac>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a12:	2b08      	cmp	r3, #8
 8004a14:	d112      	bne.n	8004a3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a16:	4b9d      	ldr	r3, [pc, #628]	; (8004c8c <HAL_RCC_OscConfig+0x2ac>)
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a22:	d10b      	bne.n	8004a3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a24:	4b99      	ldr	r3, [pc, #612]	; (8004c8c <HAL_RCC_OscConfig+0x2ac>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d05b      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x108>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d157      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e23f      	b.n	8004ebc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a44:	d106      	bne.n	8004a54 <HAL_RCC_OscConfig+0x74>
 8004a46:	4b91      	ldr	r3, [pc, #580]	; (8004c8c <HAL_RCC_OscConfig+0x2ac>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a90      	ldr	r2, [pc, #576]	; (8004c8c <HAL_RCC_OscConfig+0x2ac>)
 8004a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a50:	6013      	str	r3, [r2, #0]
 8004a52:	e01d      	b.n	8004a90 <HAL_RCC_OscConfig+0xb0>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a5c:	d10c      	bne.n	8004a78 <HAL_RCC_OscConfig+0x98>
 8004a5e:	4b8b      	ldr	r3, [pc, #556]	; (8004c8c <HAL_RCC_OscConfig+0x2ac>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a8a      	ldr	r2, [pc, #552]	; (8004c8c <HAL_RCC_OscConfig+0x2ac>)
 8004a64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a68:	6013      	str	r3, [r2, #0]
 8004a6a:	4b88      	ldr	r3, [pc, #544]	; (8004c8c <HAL_RCC_OscConfig+0x2ac>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a87      	ldr	r2, [pc, #540]	; (8004c8c <HAL_RCC_OscConfig+0x2ac>)
 8004a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	e00b      	b.n	8004a90 <HAL_RCC_OscConfig+0xb0>
 8004a78:	4b84      	ldr	r3, [pc, #528]	; (8004c8c <HAL_RCC_OscConfig+0x2ac>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a83      	ldr	r2, [pc, #524]	; (8004c8c <HAL_RCC_OscConfig+0x2ac>)
 8004a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	4b81      	ldr	r3, [pc, #516]	; (8004c8c <HAL_RCC_OscConfig+0x2ac>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a80      	ldr	r2, [pc, #512]	; (8004c8c <HAL_RCC_OscConfig+0x2ac>)
 8004a8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d013      	beq.n	8004ac0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a98:	f7fe fd16 	bl	80034c8 <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004aa0:	f7fe fd12 	bl	80034c8 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b64      	cmp	r3, #100	; 0x64
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e204      	b.n	8004ebc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ab2:	4b76      	ldr	r3, [pc, #472]	; (8004c8c <HAL_RCC_OscConfig+0x2ac>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0f0      	beq.n	8004aa0 <HAL_RCC_OscConfig+0xc0>
 8004abe:	e014      	b.n	8004aea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac0:	f7fe fd02 	bl	80034c8 <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ac8:	f7fe fcfe 	bl	80034c8 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b64      	cmp	r3, #100	; 0x64
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e1f0      	b.n	8004ebc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ada:	4b6c      	ldr	r3, [pc, #432]	; (8004c8c <HAL_RCC_OscConfig+0x2ac>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1f0      	bne.n	8004ac8 <HAL_RCC_OscConfig+0xe8>
 8004ae6:	e000      	b.n	8004aea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d063      	beq.n	8004bbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004af6:	4b65      	ldr	r3, [pc, #404]	; (8004c8c <HAL_RCC_OscConfig+0x2ac>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 030c 	and.w	r3, r3, #12
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00b      	beq.n	8004b1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b02:	4b62      	ldr	r3, [pc, #392]	; (8004c8c <HAL_RCC_OscConfig+0x2ac>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b0a:	2b08      	cmp	r3, #8
 8004b0c:	d11c      	bne.n	8004b48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b0e:	4b5f      	ldr	r3, [pc, #380]	; (8004c8c <HAL_RCC_OscConfig+0x2ac>)
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d116      	bne.n	8004b48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b1a:	4b5c      	ldr	r3, [pc, #368]	; (8004c8c <HAL_RCC_OscConfig+0x2ac>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d005      	beq.n	8004b32 <HAL_RCC_OscConfig+0x152>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d001      	beq.n	8004b32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e1c4      	b.n	8004ebc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b32:	4b56      	ldr	r3, [pc, #344]	; (8004c8c <HAL_RCC_OscConfig+0x2ac>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	4952      	ldr	r1, [pc, #328]	; (8004c8c <HAL_RCC_OscConfig+0x2ac>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b46:	e03a      	b.n	8004bbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d020      	beq.n	8004b92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b50:	4b4f      	ldr	r3, [pc, #316]	; (8004c90 <HAL_RCC_OscConfig+0x2b0>)
 8004b52:	2201      	movs	r2, #1
 8004b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b56:	f7fe fcb7 	bl	80034c8 <HAL_GetTick>
 8004b5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b5c:	e008      	b.n	8004b70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b5e:	f7fe fcb3 	bl	80034c8 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e1a5      	b.n	8004ebc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b70:	4b46      	ldr	r3, [pc, #280]	; (8004c8c <HAL_RCC_OscConfig+0x2ac>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d0f0      	beq.n	8004b5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b7c:	4b43      	ldr	r3, [pc, #268]	; (8004c8c <HAL_RCC_OscConfig+0x2ac>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	4940      	ldr	r1, [pc, #256]	; (8004c8c <HAL_RCC_OscConfig+0x2ac>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	600b      	str	r3, [r1, #0]
 8004b90:	e015      	b.n	8004bbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b92:	4b3f      	ldr	r3, [pc, #252]	; (8004c90 <HAL_RCC_OscConfig+0x2b0>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b98:	f7fe fc96 	bl	80034c8 <HAL_GetTick>
 8004b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ba0:	f7fe fc92 	bl	80034c8 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e184      	b.n	8004ebc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bb2:	4b36      	ldr	r3, [pc, #216]	; (8004c8c <HAL_RCC_OscConfig+0x2ac>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1f0      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0308 	and.w	r3, r3, #8
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d030      	beq.n	8004c2c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d016      	beq.n	8004c00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bd2:	4b30      	ldr	r3, [pc, #192]	; (8004c94 <HAL_RCC_OscConfig+0x2b4>)
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd8:	f7fe fc76 	bl	80034c8 <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004be0:	f7fe fc72 	bl	80034c8 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e164      	b.n	8004ebc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bf2:	4b26      	ldr	r3, [pc, #152]	; (8004c8c <HAL_RCC_OscConfig+0x2ac>)
 8004bf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d0f0      	beq.n	8004be0 <HAL_RCC_OscConfig+0x200>
 8004bfe:	e015      	b.n	8004c2c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c00:	4b24      	ldr	r3, [pc, #144]	; (8004c94 <HAL_RCC_OscConfig+0x2b4>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c06:	f7fe fc5f 	bl	80034c8 <HAL_GetTick>
 8004c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c0c:	e008      	b.n	8004c20 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c0e:	f7fe fc5b 	bl	80034c8 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d901      	bls.n	8004c20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e14d      	b.n	8004ebc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c20:	4b1a      	ldr	r3, [pc, #104]	; (8004c8c <HAL_RCC_OscConfig+0x2ac>)
 8004c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1f0      	bne.n	8004c0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0304 	and.w	r3, r3, #4
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 80a0 	beq.w	8004d7a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c3e:	4b13      	ldr	r3, [pc, #76]	; (8004c8c <HAL_RCC_OscConfig+0x2ac>)
 8004c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10f      	bne.n	8004c6a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	60bb      	str	r3, [r7, #8]
 8004c4e:	4b0f      	ldr	r3, [pc, #60]	; (8004c8c <HAL_RCC_OscConfig+0x2ac>)
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	4a0e      	ldr	r2, [pc, #56]	; (8004c8c <HAL_RCC_OscConfig+0x2ac>)
 8004c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c58:	6413      	str	r3, [r2, #64]	; 0x40
 8004c5a:	4b0c      	ldr	r3, [pc, #48]	; (8004c8c <HAL_RCC_OscConfig+0x2ac>)
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c62:	60bb      	str	r3, [r7, #8]
 8004c64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c66:	2301      	movs	r3, #1
 8004c68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c6a:	4b0b      	ldr	r3, [pc, #44]	; (8004c98 <HAL_RCC_OscConfig+0x2b8>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d121      	bne.n	8004cba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c76:	4b08      	ldr	r3, [pc, #32]	; (8004c98 <HAL_RCC_OscConfig+0x2b8>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a07      	ldr	r2, [pc, #28]	; (8004c98 <HAL_RCC_OscConfig+0x2b8>)
 8004c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c82:	f7fe fc21 	bl	80034c8 <HAL_GetTick>
 8004c86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c88:	e011      	b.n	8004cae <HAL_RCC_OscConfig+0x2ce>
 8004c8a:	bf00      	nop
 8004c8c:	40023800 	.word	0x40023800
 8004c90:	42470000 	.word	0x42470000
 8004c94:	42470e80 	.word	0x42470e80
 8004c98:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c9c:	f7fe fc14 	bl	80034c8 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e106      	b.n	8004ebc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cae:	4b85      	ldr	r3, [pc, #532]	; (8004ec4 <HAL_RCC_OscConfig+0x4e4>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d0f0      	beq.n	8004c9c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d106      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x2f0>
 8004cc2:	4b81      	ldr	r3, [pc, #516]	; (8004ec8 <HAL_RCC_OscConfig+0x4e8>)
 8004cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc6:	4a80      	ldr	r2, [pc, #512]	; (8004ec8 <HAL_RCC_OscConfig+0x4e8>)
 8004cc8:	f043 0301 	orr.w	r3, r3, #1
 8004ccc:	6713      	str	r3, [r2, #112]	; 0x70
 8004cce:	e01c      	b.n	8004d0a <HAL_RCC_OscConfig+0x32a>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	2b05      	cmp	r3, #5
 8004cd6:	d10c      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x312>
 8004cd8:	4b7b      	ldr	r3, [pc, #492]	; (8004ec8 <HAL_RCC_OscConfig+0x4e8>)
 8004cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cdc:	4a7a      	ldr	r2, [pc, #488]	; (8004ec8 <HAL_RCC_OscConfig+0x4e8>)
 8004cde:	f043 0304 	orr.w	r3, r3, #4
 8004ce2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ce4:	4b78      	ldr	r3, [pc, #480]	; (8004ec8 <HAL_RCC_OscConfig+0x4e8>)
 8004ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce8:	4a77      	ldr	r2, [pc, #476]	; (8004ec8 <HAL_RCC_OscConfig+0x4e8>)
 8004cea:	f043 0301 	orr.w	r3, r3, #1
 8004cee:	6713      	str	r3, [r2, #112]	; 0x70
 8004cf0:	e00b      	b.n	8004d0a <HAL_RCC_OscConfig+0x32a>
 8004cf2:	4b75      	ldr	r3, [pc, #468]	; (8004ec8 <HAL_RCC_OscConfig+0x4e8>)
 8004cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf6:	4a74      	ldr	r2, [pc, #464]	; (8004ec8 <HAL_RCC_OscConfig+0x4e8>)
 8004cf8:	f023 0301 	bic.w	r3, r3, #1
 8004cfc:	6713      	str	r3, [r2, #112]	; 0x70
 8004cfe:	4b72      	ldr	r3, [pc, #456]	; (8004ec8 <HAL_RCC_OscConfig+0x4e8>)
 8004d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d02:	4a71      	ldr	r2, [pc, #452]	; (8004ec8 <HAL_RCC_OscConfig+0x4e8>)
 8004d04:	f023 0304 	bic.w	r3, r3, #4
 8004d08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d015      	beq.n	8004d3e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d12:	f7fe fbd9 	bl	80034c8 <HAL_GetTick>
 8004d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d18:	e00a      	b.n	8004d30 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d1a:	f7fe fbd5 	bl	80034c8 <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d901      	bls.n	8004d30 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e0c5      	b.n	8004ebc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d30:	4b65      	ldr	r3, [pc, #404]	; (8004ec8 <HAL_RCC_OscConfig+0x4e8>)
 8004d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d0ee      	beq.n	8004d1a <HAL_RCC_OscConfig+0x33a>
 8004d3c:	e014      	b.n	8004d68 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d3e:	f7fe fbc3 	bl	80034c8 <HAL_GetTick>
 8004d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d44:	e00a      	b.n	8004d5c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d46:	f7fe fbbf 	bl	80034c8 <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d901      	bls.n	8004d5c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e0af      	b.n	8004ebc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d5c:	4b5a      	ldr	r3, [pc, #360]	; (8004ec8 <HAL_RCC_OscConfig+0x4e8>)
 8004d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1ee      	bne.n	8004d46 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d68:	7dfb      	ldrb	r3, [r7, #23]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d105      	bne.n	8004d7a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d6e:	4b56      	ldr	r3, [pc, #344]	; (8004ec8 <HAL_RCC_OscConfig+0x4e8>)
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	4a55      	ldr	r2, [pc, #340]	; (8004ec8 <HAL_RCC_OscConfig+0x4e8>)
 8004d74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f000 809b 	beq.w	8004eba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d84:	4b50      	ldr	r3, [pc, #320]	; (8004ec8 <HAL_RCC_OscConfig+0x4e8>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f003 030c 	and.w	r3, r3, #12
 8004d8c:	2b08      	cmp	r3, #8
 8004d8e:	d05c      	beq.n	8004e4a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d141      	bne.n	8004e1c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d98:	4b4c      	ldr	r3, [pc, #304]	; (8004ecc <HAL_RCC_OscConfig+0x4ec>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d9e:	f7fe fb93 	bl	80034c8 <HAL_GetTick>
 8004da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004da4:	e008      	b.n	8004db8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004da6:	f7fe fb8f 	bl	80034c8 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d901      	bls.n	8004db8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e081      	b.n	8004ebc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004db8:	4b43      	ldr	r3, [pc, #268]	; (8004ec8 <HAL_RCC_OscConfig+0x4e8>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1f0      	bne.n	8004da6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	69da      	ldr	r2, [r3, #28]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	019b      	lsls	r3, r3, #6
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dda:	085b      	lsrs	r3, r3, #1
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	041b      	lsls	r3, r3, #16
 8004de0:	431a      	orrs	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de6:	061b      	lsls	r3, r3, #24
 8004de8:	4937      	ldr	r1, [pc, #220]	; (8004ec8 <HAL_RCC_OscConfig+0x4e8>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dee:	4b37      	ldr	r3, [pc, #220]	; (8004ecc <HAL_RCC_OscConfig+0x4ec>)
 8004df0:	2201      	movs	r2, #1
 8004df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df4:	f7fe fb68 	bl	80034c8 <HAL_GetTick>
 8004df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dfa:	e008      	b.n	8004e0e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dfc:	f7fe fb64 	bl	80034c8 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e056      	b.n	8004ebc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e0e:	4b2e      	ldr	r3, [pc, #184]	; (8004ec8 <HAL_RCC_OscConfig+0x4e8>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d0f0      	beq.n	8004dfc <HAL_RCC_OscConfig+0x41c>
 8004e1a:	e04e      	b.n	8004eba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e1c:	4b2b      	ldr	r3, [pc, #172]	; (8004ecc <HAL_RCC_OscConfig+0x4ec>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e22:	f7fe fb51 	bl	80034c8 <HAL_GetTick>
 8004e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e28:	e008      	b.n	8004e3c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e2a:	f7fe fb4d 	bl	80034c8 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d901      	bls.n	8004e3c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e03f      	b.n	8004ebc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e3c:	4b22      	ldr	r3, [pc, #136]	; (8004ec8 <HAL_RCC_OscConfig+0x4e8>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1f0      	bne.n	8004e2a <HAL_RCC_OscConfig+0x44a>
 8004e48:	e037      	b.n	8004eba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d101      	bne.n	8004e56 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e032      	b.n	8004ebc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e56:	4b1c      	ldr	r3, [pc, #112]	; (8004ec8 <HAL_RCC_OscConfig+0x4e8>)
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d028      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d121      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d11a      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e86:	4013      	ands	r3, r2
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e8c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d111      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9c:	085b      	lsrs	r3, r3, #1
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d107      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d001      	beq.n	8004eba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e000      	b.n	8004ebc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3718      	adds	r7, #24
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	40007000 	.word	0x40007000
 8004ec8:	40023800 	.word	0x40023800
 8004ecc:	42470060 	.word	0x42470060

08004ed0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d101      	bne.n	8004ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e0cc      	b.n	800507e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ee4:	4b68      	ldr	r3, [pc, #416]	; (8005088 <HAL_RCC_ClockConfig+0x1b8>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d90c      	bls.n	8004f0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ef2:	4b65      	ldr	r3, [pc, #404]	; (8005088 <HAL_RCC_ClockConfig+0x1b8>)
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	b2d2      	uxtb	r2, r2
 8004ef8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004efa:	4b63      	ldr	r3, [pc, #396]	; (8005088 <HAL_RCC_ClockConfig+0x1b8>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0307 	and.w	r3, r3, #7
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d001      	beq.n	8004f0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e0b8      	b.n	800507e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d020      	beq.n	8004f5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0304 	and.w	r3, r3, #4
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d005      	beq.n	8004f30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f24:	4b59      	ldr	r3, [pc, #356]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	4a58      	ldr	r2, [pc, #352]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004f2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0308 	and.w	r3, r3, #8
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d005      	beq.n	8004f48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f3c:	4b53      	ldr	r3, [pc, #332]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	4a52      	ldr	r2, [pc, #328]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004f42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f48:	4b50      	ldr	r3, [pc, #320]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	494d      	ldr	r1, [pc, #308]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d044      	beq.n	8004ff0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d107      	bne.n	8004f7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f6e:	4b47      	ldr	r3, [pc, #284]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d119      	bne.n	8004fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e07f      	b.n	800507e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d003      	beq.n	8004f8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f8a:	2b03      	cmp	r3, #3
 8004f8c:	d107      	bne.n	8004f9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f8e:	4b3f      	ldr	r3, [pc, #252]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d109      	bne.n	8004fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e06f      	b.n	800507e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f9e:	4b3b      	ldr	r3, [pc, #236]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e067      	b.n	800507e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fae:	4b37      	ldr	r3, [pc, #220]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f023 0203 	bic.w	r2, r3, #3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	4934      	ldr	r1, [pc, #208]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fc0:	f7fe fa82 	bl	80034c8 <HAL_GetTick>
 8004fc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fc6:	e00a      	b.n	8004fde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fc8:	f7fe fa7e 	bl	80034c8 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e04f      	b.n	800507e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fde:	4b2b      	ldr	r3, [pc, #172]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 020c 	and.w	r2, r3, #12
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d1eb      	bne.n	8004fc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ff0:	4b25      	ldr	r3, [pc, #148]	; (8005088 <HAL_RCC_ClockConfig+0x1b8>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0307 	and.w	r3, r3, #7
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d20c      	bcs.n	8005018 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ffe:	4b22      	ldr	r3, [pc, #136]	; (8005088 <HAL_RCC_ClockConfig+0x1b8>)
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	b2d2      	uxtb	r2, r2
 8005004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005006:	4b20      	ldr	r3, [pc, #128]	; (8005088 <HAL_RCC_ClockConfig+0x1b8>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0307 	and.w	r3, r3, #7
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	429a      	cmp	r2, r3
 8005012:	d001      	beq.n	8005018 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e032      	b.n	800507e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0304 	and.w	r3, r3, #4
 8005020:	2b00      	cmp	r3, #0
 8005022:	d008      	beq.n	8005036 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005024:	4b19      	ldr	r3, [pc, #100]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	4916      	ldr	r1, [pc, #88]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8005032:	4313      	orrs	r3, r2
 8005034:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0308 	and.w	r3, r3, #8
 800503e:	2b00      	cmp	r3, #0
 8005040:	d009      	beq.n	8005056 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005042:	4b12      	ldr	r3, [pc, #72]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	00db      	lsls	r3, r3, #3
 8005050:	490e      	ldr	r1, [pc, #56]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8005052:	4313      	orrs	r3, r2
 8005054:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005056:	f000 f821 	bl	800509c <HAL_RCC_GetSysClockFreq>
 800505a:	4602      	mov	r2, r0
 800505c:	4b0b      	ldr	r3, [pc, #44]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	091b      	lsrs	r3, r3, #4
 8005062:	f003 030f 	and.w	r3, r3, #15
 8005066:	490a      	ldr	r1, [pc, #40]	; (8005090 <HAL_RCC_ClockConfig+0x1c0>)
 8005068:	5ccb      	ldrb	r3, [r1, r3]
 800506a:	fa22 f303 	lsr.w	r3, r2, r3
 800506e:	4a09      	ldr	r2, [pc, #36]	; (8005094 <HAL_RCC_ClockConfig+0x1c4>)
 8005070:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005072:	4b09      	ldr	r3, [pc, #36]	; (8005098 <HAL_RCC_ClockConfig+0x1c8>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4618      	mov	r0, r3
 8005078:	f7fe f9e2 	bl	8003440 <HAL_InitTick>

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	40023c00 	.word	0x40023c00
 800508c:	40023800 	.word	0x40023800
 8005090:	08008f54 	.word	0x08008f54
 8005094:	20000000 	.word	0x20000000
 8005098:	20000004 	.word	0x20000004

0800509c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800509c:	b5b0      	push	{r4, r5, r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80050a2:	2100      	movs	r1, #0
 80050a4:	6079      	str	r1, [r7, #4]
 80050a6:	2100      	movs	r1, #0
 80050a8:	60f9      	str	r1, [r7, #12]
 80050aa:	2100      	movs	r1, #0
 80050ac:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80050ae:	2100      	movs	r1, #0
 80050b0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050b2:	4952      	ldr	r1, [pc, #328]	; (80051fc <HAL_RCC_GetSysClockFreq+0x160>)
 80050b4:	6889      	ldr	r1, [r1, #8]
 80050b6:	f001 010c 	and.w	r1, r1, #12
 80050ba:	2908      	cmp	r1, #8
 80050bc:	d00d      	beq.n	80050da <HAL_RCC_GetSysClockFreq+0x3e>
 80050be:	2908      	cmp	r1, #8
 80050c0:	f200 8094 	bhi.w	80051ec <HAL_RCC_GetSysClockFreq+0x150>
 80050c4:	2900      	cmp	r1, #0
 80050c6:	d002      	beq.n	80050ce <HAL_RCC_GetSysClockFreq+0x32>
 80050c8:	2904      	cmp	r1, #4
 80050ca:	d003      	beq.n	80050d4 <HAL_RCC_GetSysClockFreq+0x38>
 80050cc:	e08e      	b.n	80051ec <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050ce:	4b4c      	ldr	r3, [pc, #304]	; (8005200 <HAL_RCC_GetSysClockFreq+0x164>)
 80050d0:	60bb      	str	r3, [r7, #8]
       break;
 80050d2:	e08e      	b.n	80051f2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050d4:	4b4b      	ldr	r3, [pc, #300]	; (8005204 <HAL_RCC_GetSysClockFreq+0x168>)
 80050d6:	60bb      	str	r3, [r7, #8]
      break;
 80050d8:	e08b      	b.n	80051f2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050da:	4948      	ldr	r1, [pc, #288]	; (80051fc <HAL_RCC_GetSysClockFreq+0x160>)
 80050dc:	6849      	ldr	r1, [r1, #4]
 80050de:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80050e2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050e4:	4945      	ldr	r1, [pc, #276]	; (80051fc <HAL_RCC_GetSysClockFreq+0x160>)
 80050e6:	6849      	ldr	r1, [r1, #4]
 80050e8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80050ec:	2900      	cmp	r1, #0
 80050ee:	d024      	beq.n	800513a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050f0:	4942      	ldr	r1, [pc, #264]	; (80051fc <HAL_RCC_GetSysClockFreq+0x160>)
 80050f2:	6849      	ldr	r1, [r1, #4]
 80050f4:	0989      	lsrs	r1, r1, #6
 80050f6:	4608      	mov	r0, r1
 80050f8:	f04f 0100 	mov.w	r1, #0
 80050fc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005100:	f04f 0500 	mov.w	r5, #0
 8005104:	ea00 0204 	and.w	r2, r0, r4
 8005108:	ea01 0305 	and.w	r3, r1, r5
 800510c:	493d      	ldr	r1, [pc, #244]	; (8005204 <HAL_RCC_GetSysClockFreq+0x168>)
 800510e:	fb01 f003 	mul.w	r0, r1, r3
 8005112:	2100      	movs	r1, #0
 8005114:	fb01 f102 	mul.w	r1, r1, r2
 8005118:	1844      	adds	r4, r0, r1
 800511a:	493a      	ldr	r1, [pc, #232]	; (8005204 <HAL_RCC_GetSysClockFreq+0x168>)
 800511c:	fba2 0101 	umull	r0, r1, r2, r1
 8005120:	1863      	adds	r3, r4, r1
 8005122:	4619      	mov	r1, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	461a      	mov	r2, r3
 8005128:	f04f 0300 	mov.w	r3, #0
 800512c:	f7fb fd8c 	bl	8000c48 <__aeabi_uldivmod>
 8005130:	4602      	mov	r2, r0
 8005132:	460b      	mov	r3, r1
 8005134:	4613      	mov	r3, r2
 8005136:	60fb      	str	r3, [r7, #12]
 8005138:	e04a      	b.n	80051d0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800513a:	4b30      	ldr	r3, [pc, #192]	; (80051fc <HAL_RCC_GetSysClockFreq+0x160>)
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	099b      	lsrs	r3, r3, #6
 8005140:	461a      	mov	r2, r3
 8005142:	f04f 0300 	mov.w	r3, #0
 8005146:	f240 10ff 	movw	r0, #511	; 0x1ff
 800514a:	f04f 0100 	mov.w	r1, #0
 800514e:	ea02 0400 	and.w	r4, r2, r0
 8005152:	ea03 0501 	and.w	r5, r3, r1
 8005156:	4620      	mov	r0, r4
 8005158:	4629      	mov	r1, r5
 800515a:	f04f 0200 	mov.w	r2, #0
 800515e:	f04f 0300 	mov.w	r3, #0
 8005162:	014b      	lsls	r3, r1, #5
 8005164:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005168:	0142      	lsls	r2, r0, #5
 800516a:	4610      	mov	r0, r2
 800516c:	4619      	mov	r1, r3
 800516e:	1b00      	subs	r0, r0, r4
 8005170:	eb61 0105 	sbc.w	r1, r1, r5
 8005174:	f04f 0200 	mov.w	r2, #0
 8005178:	f04f 0300 	mov.w	r3, #0
 800517c:	018b      	lsls	r3, r1, #6
 800517e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005182:	0182      	lsls	r2, r0, #6
 8005184:	1a12      	subs	r2, r2, r0
 8005186:	eb63 0301 	sbc.w	r3, r3, r1
 800518a:	f04f 0000 	mov.w	r0, #0
 800518e:	f04f 0100 	mov.w	r1, #0
 8005192:	00d9      	lsls	r1, r3, #3
 8005194:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005198:	00d0      	lsls	r0, r2, #3
 800519a:	4602      	mov	r2, r0
 800519c:	460b      	mov	r3, r1
 800519e:	1912      	adds	r2, r2, r4
 80051a0:	eb45 0303 	adc.w	r3, r5, r3
 80051a4:	f04f 0000 	mov.w	r0, #0
 80051a8:	f04f 0100 	mov.w	r1, #0
 80051ac:	0299      	lsls	r1, r3, #10
 80051ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80051b2:	0290      	lsls	r0, r2, #10
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	4610      	mov	r0, r2
 80051ba:	4619      	mov	r1, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	461a      	mov	r2, r3
 80051c0:	f04f 0300 	mov.w	r3, #0
 80051c4:	f7fb fd40 	bl	8000c48 <__aeabi_uldivmod>
 80051c8:	4602      	mov	r2, r0
 80051ca:	460b      	mov	r3, r1
 80051cc:	4613      	mov	r3, r2
 80051ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80051d0:	4b0a      	ldr	r3, [pc, #40]	; (80051fc <HAL_RCC_GetSysClockFreq+0x160>)
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	0c1b      	lsrs	r3, r3, #16
 80051d6:	f003 0303 	and.w	r3, r3, #3
 80051da:	3301      	adds	r3, #1
 80051dc:	005b      	lsls	r3, r3, #1
 80051de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e8:	60bb      	str	r3, [r7, #8]
      break;
 80051ea:	e002      	b.n	80051f2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051ec:	4b04      	ldr	r3, [pc, #16]	; (8005200 <HAL_RCC_GetSysClockFreq+0x164>)
 80051ee:	60bb      	str	r3, [r7, #8]
      break;
 80051f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051f2:	68bb      	ldr	r3, [r7, #8]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bdb0      	pop	{r4, r5, r7, pc}
 80051fc:	40023800 	.word	0x40023800
 8005200:	00f42400 	.word	0x00f42400
 8005204:	017d7840 	.word	0x017d7840

08005208 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005208:	b480      	push	{r7}
 800520a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800520c:	4b03      	ldr	r3, [pc, #12]	; (800521c <HAL_RCC_GetHCLKFreq+0x14>)
 800520e:	681b      	ldr	r3, [r3, #0]
}
 8005210:	4618      	mov	r0, r3
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	20000000 	.word	0x20000000

08005220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005224:	f7ff fff0 	bl	8005208 <HAL_RCC_GetHCLKFreq>
 8005228:	4602      	mov	r2, r0
 800522a:	4b05      	ldr	r3, [pc, #20]	; (8005240 <HAL_RCC_GetPCLK1Freq+0x20>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	0a9b      	lsrs	r3, r3, #10
 8005230:	f003 0307 	and.w	r3, r3, #7
 8005234:	4903      	ldr	r1, [pc, #12]	; (8005244 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005236:	5ccb      	ldrb	r3, [r1, r3]
 8005238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800523c:	4618      	mov	r0, r3
 800523e:	bd80      	pop	{r7, pc}
 8005240:	40023800 	.word	0x40023800
 8005244:	08008f64 	.word	0x08008f64

08005248 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800524c:	f7ff ffdc 	bl	8005208 <HAL_RCC_GetHCLKFreq>
 8005250:	4602      	mov	r2, r0
 8005252:	4b05      	ldr	r3, [pc, #20]	; (8005268 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	0b5b      	lsrs	r3, r3, #13
 8005258:	f003 0307 	and.w	r3, r3, #7
 800525c:	4903      	ldr	r1, [pc, #12]	; (800526c <HAL_RCC_GetPCLK2Freq+0x24>)
 800525e:	5ccb      	ldrb	r3, [r1, r3]
 8005260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005264:	4618      	mov	r0, r3
 8005266:	bd80      	pop	{r7, pc}
 8005268:	40023800 	.word	0x40023800
 800526c:	08008f64 	.word	0x08008f64

08005270 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e07b      	b.n	800537a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005286:	2b00      	cmp	r3, #0
 8005288:	d108      	bne.n	800529c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005292:	d009      	beq.n	80052a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	61da      	str	r2, [r3, #28]
 800529a:	e005      	b.n	80052a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d106      	bne.n	80052c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f7fd fefa 	bl	80030bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2202      	movs	r2, #2
 80052cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80052f0:	431a      	orrs	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052fa:	431a      	orrs	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	431a      	orrs	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	431a      	orrs	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005318:	431a      	orrs	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005322:	431a      	orrs	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a1b      	ldr	r3, [r3, #32]
 8005328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800532c:	ea42 0103 	orr.w	r1, r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005334:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	430a      	orrs	r2, r1
 800533e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	0c1b      	lsrs	r3, r3, #16
 8005346:	f003 0104 	and.w	r1, r3, #4
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534e:	f003 0210 	and.w	r2, r3, #16
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	430a      	orrs	r2, r1
 8005358:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	69da      	ldr	r2, [r3, #28]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005368:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3708      	adds	r7, #8
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b088      	sub	sp, #32
 8005386:	af00      	add	r7, sp, #0
 8005388:	60f8      	str	r0, [r7, #12]
 800538a:	60b9      	str	r1, [r7, #8]
 800538c:	603b      	str	r3, [r7, #0]
 800538e:	4613      	mov	r3, r2
 8005390:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005392:	2300      	movs	r3, #0
 8005394:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800539c:	2b01      	cmp	r3, #1
 800539e:	d101      	bne.n	80053a4 <HAL_SPI_Transmit+0x22>
 80053a0:	2302      	movs	r3, #2
 80053a2:	e126      	b.n	80055f2 <HAL_SPI_Transmit+0x270>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053ac:	f7fe f88c 	bl	80034c8 <HAL_GetTick>
 80053b0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80053b2:	88fb      	ldrh	r3, [r7, #6]
 80053b4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d002      	beq.n	80053c8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80053c2:	2302      	movs	r3, #2
 80053c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80053c6:	e10b      	b.n	80055e0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d002      	beq.n	80053d4 <HAL_SPI_Transmit+0x52>
 80053ce:	88fb      	ldrh	r3, [r7, #6]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d102      	bne.n	80053da <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80053d8:	e102      	b.n	80055e0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2203      	movs	r2, #3
 80053de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	88fa      	ldrh	r2, [r7, #6]
 80053f2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	88fa      	ldrh	r2, [r7, #6]
 80053f8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005420:	d10f      	bne.n	8005442 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005430:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005440:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544c:	2b40      	cmp	r3, #64	; 0x40
 800544e:	d007      	beq.n	8005460 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800545e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005468:	d14b      	bne.n	8005502 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d002      	beq.n	8005478 <HAL_SPI_Transmit+0xf6>
 8005472:	8afb      	ldrh	r3, [r7, #22]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d13e      	bne.n	80054f6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547c:	881a      	ldrh	r2, [r3, #0]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005488:	1c9a      	adds	r2, r3, #2
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005492:	b29b      	uxth	r3, r3
 8005494:	3b01      	subs	r3, #1
 8005496:	b29a      	uxth	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800549c:	e02b      	b.n	80054f6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d112      	bne.n	80054d2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b0:	881a      	ldrh	r2, [r3, #0]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054bc:	1c9a      	adds	r2, r3, #2
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	3b01      	subs	r3, #1
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80054d0:	e011      	b.n	80054f6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054d2:	f7fd fff9 	bl	80034c8 <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	683a      	ldr	r2, [r7, #0]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d803      	bhi.n	80054ea <HAL_SPI_Transmit+0x168>
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e8:	d102      	bne.n	80054f0 <HAL_SPI_Transmit+0x16e>
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d102      	bne.n	80054f6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80054f4:	e074      	b.n	80055e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1ce      	bne.n	800549e <HAL_SPI_Transmit+0x11c>
 8005500:	e04c      	b.n	800559c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d002      	beq.n	8005510 <HAL_SPI_Transmit+0x18e>
 800550a:	8afb      	ldrh	r3, [r7, #22]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d140      	bne.n	8005592 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	330c      	adds	r3, #12
 800551a:	7812      	ldrb	r2, [r2, #0]
 800551c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005522:	1c5a      	adds	r2, r3, #1
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800552c:	b29b      	uxth	r3, r3
 800552e:	3b01      	subs	r3, #1
 8005530:	b29a      	uxth	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005536:	e02c      	b.n	8005592 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b02      	cmp	r3, #2
 8005544:	d113      	bne.n	800556e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	330c      	adds	r3, #12
 8005550:	7812      	ldrb	r2, [r2, #0]
 8005552:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005558:	1c5a      	adds	r2, r3, #1
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005562:	b29b      	uxth	r3, r3
 8005564:	3b01      	subs	r3, #1
 8005566:	b29a      	uxth	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	86da      	strh	r2, [r3, #54]	; 0x36
 800556c:	e011      	b.n	8005592 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800556e:	f7fd ffab 	bl	80034c8 <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	683a      	ldr	r2, [r7, #0]
 800557a:	429a      	cmp	r2, r3
 800557c:	d803      	bhi.n	8005586 <HAL_SPI_Transmit+0x204>
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005584:	d102      	bne.n	800558c <HAL_SPI_Transmit+0x20a>
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d102      	bne.n	8005592 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005590:	e026      	b.n	80055e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005596:	b29b      	uxth	r3, r3
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1cd      	bne.n	8005538 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	6839      	ldr	r1, [r7, #0]
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f000 fbcb 	bl	8005d3c <SPI_EndRxTxTransaction>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d002      	beq.n	80055b2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2220      	movs	r2, #32
 80055b0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10a      	bne.n	80055d0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055ba:	2300      	movs	r3, #0
 80055bc:	613b      	str	r3, [r7, #16]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	613b      	str	r3, [r7, #16]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	613b      	str	r3, [r7, #16]
 80055ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d002      	beq.n	80055de <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	77fb      	strb	r3, [r7, #31]
 80055dc:	e000      	b.n	80055e0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80055de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80055f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3720      	adds	r7, #32
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b088      	sub	sp, #32
 80055fe:	af02      	add	r7, sp, #8
 8005600:	60f8      	str	r0, [r7, #12]
 8005602:	60b9      	str	r1, [r7, #8]
 8005604:	603b      	str	r3, [r7, #0]
 8005606:	4613      	mov	r3, r2
 8005608:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800560a:	2300      	movs	r3, #0
 800560c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005616:	d112      	bne.n	800563e <HAL_SPI_Receive+0x44>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10e      	bne.n	800563e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2204      	movs	r2, #4
 8005624:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005628:	88fa      	ldrh	r2, [r7, #6]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	9300      	str	r3, [sp, #0]
 800562e:	4613      	mov	r3, r2
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	68b9      	ldr	r1, [r7, #8]
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f000 f8f1 	bl	800581c <HAL_SPI_TransmitReceive>
 800563a:	4603      	mov	r3, r0
 800563c:	e0ea      	b.n	8005814 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005644:	2b01      	cmp	r3, #1
 8005646:	d101      	bne.n	800564c <HAL_SPI_Receive+0x52>
 8005648:	2302      	movs	r3, #2
 800564a:	e0e3      	b.n	8005814 <HAL_SPI_Receive+0x21a>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005654:	f7fd ff38 	bl	80034c8 <HAL_GetTick>
 8005658:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b01      	cmp	r3, #1
 8005664:	d002      	beq.n	800566c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005666:	2302      	movs	r3, #2
 8005668:	75fb      	strb	r3, [r7, #23]
    goto error;
 800566a:	e0ca      	b.n	8005802 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d002      	beq.n	8005678 <HAL_SPI_Receive+0x7e>
 8005672:	88fb      	ldrh	r3, [r7, #6]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d102      	bne.n	800567e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800567c:	e0c1      	b.n	8005802 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2204      	movs	r2, #4
 8005682:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	88fa      	ldrh	r2, [r7, #6]
 8005696:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	88fa      	ldrh	r2, [r7, #6]
 800569c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056c4:	d10f      	bne.n	80056e6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80056e4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f0:	2b40      	cmp	r3, #64	; 0x40
 80056f2:	d007      	beq.n	8005704 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005702:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d162      	bne.n	80057d2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800570c:	e02e      	b.n	800576c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f003 0301 	and.w	r3, r3, #1
 8005718:	2b01      	cmp	r3, #1
 800571a:	d115      	bne.n	8005748 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f103 020c 	add.w	r2, r3, #12
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005728:	7812      	ldrb	r2, [r2, #0]
 800572a:	b2d2      	uxtb	r2, r2
 800572c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005732:	1c5a      	adds	r2, r3, #1
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800573c:	b29b      	uxth	r3, r3
 800573e:	3b01      	subs	r3, #1
 8005740:	b29a      	uxth	r2, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005746:	e011      	b.n	800576c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005748:	f7fd febe 	bl	80034c8 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	683a      	ldr	r2, [r7, #0]
 8005754:	429a      	cmp	r2, r3
 8005756:	d803      	bhi.n	8005760 <HAL_SPI_Receive+0x166>
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575e:	d102      	bne.n	8005766 <HAL_SPI_Receive+0x16c>
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d102      	bne.n	800576c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	75fb      	strb	r3, [r7, #23]
          goto error;
 800576a:	e04a      	b.n	8005802 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005770:	b29b      	uxth	r3, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1cb      	bne.n	800570e <HAL_SPI_Receive+0x114>
 8005776:	e031      	b.n	80057dc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b01      	cmp	r3, #1
 8005784:	d113      	bne.n	80057ae <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68da      	ldr	r2, [r3, #12]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005790:	b292      	uxth	r2, r2
 8005792:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005798:	1c9a      	adds	r2, r3, #2
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	3b01      	subs	r3, #1
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057ac:	e011      	b.n	80057d2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057ae:	f7fd fe8b 	bl	80034c8 <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d803      	bhi.n	80057c6 <HAL_SPI_Receive+0x1cc>
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c4:	d102      	bne.n	80057cc <HAL_SPI_Receive+0x1d2>
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d102      	bne.n	80057d2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	75fb      	strb	r3, [r7, #23]
          goto error;
 80057d0:	e017      	b.n	8005802 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1cd      	bne.n	8005778 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	6839      	ldr	r1, [r7, #0]
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f000 fa45 	bl	8005c70 <SPI_EndRxTransaction>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d002      	beq.n	80057f2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2220      	movs	r2, #32
 80057f0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d002      	beq.n	8005800 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	75fb      	strb	r3, [r7, #23]
 80057fe:	e000      	b.n	8005802 <HAL_SPI_Receive+0x208>
  }

error :
 8005800:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005812:	7dfb      	ldrb	r3, [r7, #23]
}
 8005814:	4618      	mov	r0, r3
 8005816:	3718      	adds	r7, #24
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b08c      	sub	sp, #48	; 0x30
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
 8005828:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800582a:	2301      	movs	r3, #1
 800582c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800582e:	2300      	movs	r3, #0
 8005830:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800583a:	2b01      	cmp	r3, #1
 800583c:	d101      	bne.n	8005842 <HAL_SPI_TransmitReceive+0x26>
 800583e:	2302      	movs	r3, #2
 8005840:	e18a      	b.n	8005b58 <HAL_SPI_TransmitReceive+0x33c>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800584a:	f7fd fe3d 	bl	80034c8 <HAL_GetTick>
 800584e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005860:	887b      	ldrh	r3, [r7, #2]
 8005862:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005864:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005868:	2b01      	cmp	r3, #1
 800586a:	d00f      	beq.n	800588c <HAL_SPI_TransmitReceive+0x70>
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005872:	d107      	bne.n	8005884 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d103      	bne.n	8005884 <HAL_SPI_TransmitReceive+0x68>
 800587c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005880:	2b04      	cmp	r3, #4
 8005882:	d003      	beq.n	800588c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005884:	2302      	movs	r3, #2
 8005886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800588a:	e15b      	b.n	8005b44 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d005      	beq.n	800589e <HAL_SPI_TransmitReceive+0x82>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d002      	beq.n	800589e <HAL_SPI_TransmitReceive+0x82>
 8005898:	887b      	ldrh	r3, [r7, #2]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d103      	bne.n	80058a6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80058a4:	e14e      	b.n	8005b44 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b04      	cmp	r3, #4
 80058b0:	d003      	beq.n	80058ba <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2205      	movs	r2, #5
 80058b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	887a      	ldrh	r2, [r7, #2]
 80058ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	887a      	ldrh	r2, [r7, #2]
 80058d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	887a      	ldrh	r2, [r7, #2]
 80058dc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	887a      	ldrh	r2, [r7, #2]
 80058e2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058fa:	2b40      	cmp	r3, #64	; 0x40
 80058fc:	d007      	beq.n	800590e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800590c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005916:	d178      	bne.n	8005a0a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d002      	beq.n	8005926 <HAL_SPI_TransmitReceive+0x10a>
 8005920:	8b7b      	ldrh	r3, [r7, #26]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d166      	bne.n	80059f4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592a:	881a      	ldrh	r2, [r3, #0]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005936:	1c9a      	adds	r2, r3, #2
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005940:	b29b      	uxth	r3, r3
 8005942:	3b01      	subs	r3, #1
 8005944:	b29a      	uxth	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800594a:	e053      	b.n	80059f4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b02      	cmp	r3, #2
 8005958:	d11b      	bne.n	8005992 <HAL_SPI_TransmitReceive+0x176>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800595e:	b29b      	uxth	r3, r3
 8005960:	2b00      	cmp	r3, #0
 8005962:	d016      	beq.n	8005992 <HAL_SPI_TransmitReceive+0x176>
 8005964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005966:	2b01      	cmp	r3, #1
 8005968:	d113      	bne.n	8005992 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596e:	881a      	ldrh	r2, [r3, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597a:	1c9a      	adds	r2, r3, #2
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005984:	b29b      	uxth	r3, r3
 8005986:	3b01      	subs	r3, #1
 8005988:	b29a      	uxth	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800598e:	2300      	movs	r3, #0
 8005990:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	2b01      	cmp	r3, #1
 800599e:	d119      	bne.n	80059d4 <HAL_SPI_TransmitReceive+0x1b8>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d014      	beq.n	80059d4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68da      	ldr	r2, [r3, #12]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b4:	b292      	uxth	r2, r2
 80059b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059bc:	1c9a      	adds	r2, r3, #2
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	3b01      	subs	r3, #1
 80059ca:	b29a      	uxth	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059d0:	2301      	movs	r3, #1
 80059d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80059d4:	f7fd fd78 	bl	80034c8 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d807      	bhi.n	80059f4 <HAL_SPI_TransmitReceive+0x1d8>
 80059e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ea:	d003      	beq.n	80059f4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80059f2:	e0a7      	b.n	8005b44 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1a6      	bne.n	800594c <HAL_SPI_TransmitReceive+0x130>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1a1      	bne.n	800594c <HAL_SPI_TransmitReceive+0x130>
 8005a08:	e07c      	b.n	8005b04 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d002      	beq.n	8005a18 <HAL_SPI_TransmitReceive+0x1fc>
 8005a12:	8b7b      	ldrh	r3, [r7, #26]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d16b      	bne.n	8005af0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	330c      	adds	r3, #12
 8005a22:	7812      	ldrb	r2, [r2, #0]
 8005a24:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2a:	1c5a      	adds	r2, r3, #1
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	3b01      	subs	r3, #1
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a3e:	e057      	b.n	8005af0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f003 0302 	and.w	r3, r3, #2
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d11c      	bne.n	8005a88 <HAL_SPI_TransmitReceive+0x26c>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d017      	beq.n	8005a88 <HAL_SPI_TransmitReceive+0x26c>
 8005a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d114      	bne.n	8005a88 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	330c      	adds	r3, #12
 8005a68:	7812      	ldrb	r2, [r2, #0]
 8005a6a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a70:	1c5a      	adds	r2, r3, #1
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a84:	2300      	movs	r3, #0
 8005a86:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d119      	bne.n	8005aca <HAL_SPI_TransmitReceive+0x2ae>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d014      	beq.n	8005aca <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68da      	ldr	r2, [r3, #12]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aaa:	b2d2      	uxtb	r2, r2
 8005aac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab2:	1c5a      	adds	r2, r3, #1
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005aca:	f7fd fcfd 	bl	80034c8 <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d803      	bhi.n	8005ae2 <HAL_SPI_TransmitReceive+0x2c6>
 8005ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae0:	d102      	bne.n	8005ae8 <HAL_SPI_TransmitReceive+0x2cc>
 8005ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d103      	bne.n	8005af0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005aee:	e029      	b.n	8005b44 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1a2      	bne.n	8005a40 <HAL_SPI_TransmitReceive+0x224>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d19d      	bne.n	8005a40 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f000 f917 	bl	8005d3c <SPI_EndRxTxTransaction>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d006      	beq.n	8005b22 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2220      	movs	r2, #32
 8005b1e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005b20:	e010      	b.n	8005b44 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10b      	bne.n	8005b42 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	617b      	str	r3, [r7, #20]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	617b      	str	r3, [r7, #20]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	617b      	str	r3, [r7, #20]
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	e000      	b.n	8005b44 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005b42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b54:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3730      	adds	r7, #48	; 0x30
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b088      	sub	sp, #32
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	603b      	str	r3, [r7, #0]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b70:	f7fd fcaa 	bl	80034c8 <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b78:	1a9b      	subs	r3, r3, r2
 8005b7a:	683a      	ldr	r2, [r7, #0]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b80:	f7fd fca2 	bl	80034c8 <HAL_GetTick>
 8005b84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b86:	4b39      	ldr	r3, [pc, #228]	; (8005c6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	015b      	lsls	r3, r3, #5
 8005b8c:	0d1b      	lsrs	r3, r3, #20
 8005b8e:	69fa      	ldr	r2, [r7, #28]
 8005b90:	fb02 f303 	mul.w	r3, r2, r3
 8005b94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b96:	e054      	b.n	8005c42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b9e:	d050      	beq.n	8005c42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ba0:	f7fd fc92 	bl	80034c8 <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	69fa      	ldr	r2, [r7, #28]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d902      	bls.n	8005bb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d13d      	bne.n	8005c32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005bc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bce:	d111      	bne.n	8005bf4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bd8:	d004      	beq.n	8005be4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005be2:	d107      	bne.n	8005bf4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bf2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bfc:	d10f      	bne.n	8005c1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c0c:	601a      	str	r2, [r3, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e017      	b.n	8005c62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	689a      	ldr	r2, [r3, #8]
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	bf0c      	ite	eq
 8005c52:	2301      	moveq	r3, #1
 8005c54:	2300      	movne	r3, #0
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	461a      	mov	r2, r3
 8005c5a:	79fb      	ldrb	r3, [r7, #7]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d19b      	bne.n	8005b98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3720      	adds	r7, #32
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	20000000 	.word	0x20000000

08005c70 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b086      	sub	sp, #24
 8005c74:	af02      	add	r7, sp, #8
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c84:	d111      	bne.n	8005caa <SPI_EndRxTransaction+0x3a>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c8e:	d004      	beq.n	8005c9a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c98:	d107      	bne.n	8005caa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ca8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cb2:	d12a      	bne.n	8005d0a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cbc:	d012      	beq.n	8005ce4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	2180      	movs	r1, #128	; 0x80
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f7ff ff49 	bl	8005b60 <SPI_WaitFlagStateUntilTimeout>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d02d      	beq.n	8005d30 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cd8:	f043 0220 	orr.w	r2, r3, #32
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e026      	b.n	8005d32 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	9300      	str	r3, [sp, #0]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	2200      	movs	r2, #0
 8005cec:	2101      	movs	r1, #1
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f7ff ff36 	bl	8005b60 <SPI_WaitFlagStateUntilTimeout>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d01a      	beq.n	8005d30 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cfe:	f043 0220 	orr.w	r2, r3, #32
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e013      	b.n	8005d32 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	9300      	str	r3, [sp, #0]
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	2200      	movs	r2, #0
 8005d12:	2101      	movs	r1, #1
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f7ff ff23 	bl	8005b60 <SPI_WaitFlagStateUntilTimeout>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d007      	beq.n	8005d30 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d24:	f043 0220 	orr.w	r2, r3, #32
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e000      	b.n	8005d32 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3710      	adds	r7, #16
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
	...

08005d3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b088      	sub	sp, #32
 8005d40:	af02      	add	r7, sp, #8
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005d48:	4b1b      	ldr	r3, [pc, #108]	; (8005db8 <SPI_EndRxTxTransaction+0x7c>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a1b      	ldr	r2, [pc, #108]	; (8005dbc <SPI_EndRxTxTransaction+0x80>)
 8005d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d52:	0d5b      	lsrs	r3, r3, #21
 8005d54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005d58:	fb02 f303 	mul.w	r3, r2, r3
 8005d5c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d66:	d112      	bne.n	8005d8e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	2180      	movs	r1, #128	; 0x80
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f7ff fef4 	bl	8005b60 <SPI_WaitFlagStateUntilTimeout>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d016      	beq.n	8005dac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d82:	f043 0220 	orr.w	r2, r3, #32
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e00f      	b.n	8005dae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00a      	beq.n	8005daa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	3b01      	subs	r3, #1
 8005d98:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005da4:	2b80      	cmp	r3, #128	; 0x80
 8005da6:	d0f2      	beq.n	8005d8e <SPI_EndRxTxTransaction+0x52>
 8005da8:	e000      	b.n	8005dac <SPI_EndRxTxTransaction+0x70>
        break;
 8005daa:	bf00      	nop
  }

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3718      	adds	r7, #24
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	20000000 	.word	0x20000000
 8005dbc:	165e9f81 	.word	0x165e9f81

08005dc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d101      	bne.n	8005dd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e03f      	b.n	8005e52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d106      	bne.n	8005dec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f7fd f9b0 	bl	800314c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2224      	movs	r2, #36	; 0x24
 8005df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68da      	ldr	r2, [r3, #12]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 f929 	bl	800605c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	691a      	ldr	r2, [r3, #16]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	695a      	ldr	r2, [r3, #20]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68da      	ldr	r2, [r3, #12]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2220      	movs	r2, #32
 8005e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2220      	movs	r2, #32
 8005e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b08a      	sub	sp, #40	; 0x28
 8005e5e:	af02      	add	r7, sp, #8
 8005e60:	60f8      	str	r0, [r7, #12]
 8005e62:	60b9      	str	r1, [r7, #8]
 8005e64:	603b      	str	r3, [r7, #0]
 8005e66:	4613      	mov	r3, r2
 8005e68:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b20      	cmp	r3, #32
 8005e78:	d17c      	bne.n	8005f74 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d002      	beq.n	8005e86 <HAL_UART_Transmit+0x2c>
 8005e80:	88fb      	ldrh	r3, [r7, #6]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e075      	b.n	8005f76 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d101      	bne.n	8005e98 <HAL_UART_Transmit+0x3e>
 8005e94:	2302      	movs	r3, #2
 8005e96:	e06e      	b.n	8005f76 <HAL_UART_Transmit+0x11c>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2221      	movs	r2, #33	; 0x21
 8005eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005eae:	f7fd fb0b 	bl	80034c8 <HAL_GetTick>
 8005eb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	88fa      	ldrh	r2, [r7, #6]
 8005eb8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	88fa      	ldrh	r2, [r7, #6]
 8005ebe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ec8:	d108      	bne.n	8005edc <HAL_UART_Transmit+0x82>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d104      	bne.n	8005edc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	61bb      	str	r3, [r7, #24]
 8005eda:	e003      	b.n	8005ee4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005eec:	e02a      	b.n	8005f44 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	2180      	movs	r1, #128	; 0x80
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f000 f840 	bl	8005f7e <UART_WaitOnFlagUntilTimeout>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d001      	beq.n	8005f08 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e036      	b.n	8005f76 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10b      	bne.n	8005f26 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	881b      	ldrh	r3, [r3, #0]
 8005f12:	461a      	mov	r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	3302      	adds	r3, #2
 8005f22:	61bb      	str	r3, [r7, #24]
 8005f24:	e007      	b.n	8005f36 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	781a      	ldrb	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	3301      	adds	r3, #1
 8005f34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1cf      	bne.n	8005eee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	9300      	str	r3, [sp, #0]
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	2200      	movs	r2, #0
 8005f56:	2140      	movs	r1, #64	; 0x40
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 f810 	bl	8005f7e <UART_WaitOnFlagUntilTimeout>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d001      	beq.n	8005f68 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e006      	b.n	8005f76 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2220      	movs	r2, #32
 8005f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005f70:	2300      	movs	r3, #0
 8005f72:	e000      	b.n	8005f76 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005f74:	2302      	movs	r3, #2
  }
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3720      	adds	r7, #32
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b090      	sub	sp, #64	; 0x40
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	60f8      	str	r0, [r7, #12]
 8005f86:	60b9      	str	r1, [r7, #8]
 8005f88:	603b      	str	r3, [r7, #0]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f8e:	e050      	b.n	8006032 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f96:	d04c      	beq.n	8006032 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005f98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d007      	beq.n	8005fae <UART_WaitOnFlagUntilTimeout+0x30>
 8005f9e:	f7fd fa93 	bl	80034c8 <HAL_GetTick>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d241      	bcs.n	8006032 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	330c      	adds	r3, #12
 8005fb4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb8:	e853 3f00 	ldrex	r3, [r3]
 8005fbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	330c      	adds	r3, #12
 8005fcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fce:	637a      	str	r2, [r7, #52]	; 0x34
 8005fd0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005fd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fd6:	e841 2300 	strex	r3, r2, [r1]
 8005fda:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1e5      	bne.n	8005fae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	3314      	adds	r3, #20
 8005fe8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	e853 3f00 	ldrex	r3, [r3]
 8005ff0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	f023 0301 	bic.w	r3, r3, #1
 8005ff8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	3314      	adds	r3, #20
 8006000:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006002:	623a      	str	r2, [r7, #32]
 8006004:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006006:	69f9      	ldr	r1, [r7, #28]
 8006008:	6a3a      	ldr	r2, [r7, #32]
 800600a:	e841 2300 	strex	r3, r2, [r1]
 800600e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1e5      	bne.n	8005fe2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2220      	movs	r2, #32
 800601a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2220      	movs	r2, #32
 8006022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	e00f      	b.n	8006052 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	4013      	ands	r3, r2
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	429a      	cmp	r2, r3
 8006040:	bf0c      	ite	eq
 8006042:	2301      	moveq	r3, #1
 8006044:	2300      	movne	r3, #0
 8006046:	b2db      	uxtb	r3, r3
 8006048:	461a      	mov	r2, r3
 800604a:	79fb      	ldrb	r3, [r7, #7]
 800604c:	429a      	cmp	r2, r3
 800604e:	d09f      	beq.n	8005f90 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3740      	adds	r7, #64	; 0x40
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
	...

0800605c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800605c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006060:	b09f      	sub	sp, #124	; 0x7c
 8006062:	af00      	add	r7, sp, #0
 8006064:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006072:	68d9      	ldr	r1, [r3, #12]
 8006074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	ea40 0301 	orr.w	r3, r0, r1
 800607c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800607e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006080:	689a      	ldr	r2, [r3, #8]
 8006082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	431a      	orrs	r2, r3
 8006088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800608a:	695b      	ldr	r3, [r3, #20]
 800608c:	431a      	orrs	r2, r3
 800608e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006090:	69db      	ldr	r3, [r3, #28]
 8006092:	4313      	orrs	r3, r2
 8006094:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80060a0:	f021 010c 	bic.w	r1, r1, #12
 80060a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060aa:	430b      	orrs	r3, r1
 80060ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	695b      	ldr	r3, [r3, #20]
 80060b4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80060b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060ba:	6999      	ldr	r1, [r3, #24]
 80060bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	ea40 0301 	orr.w	r3, r0, r1
 80060c4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	4bc5      	ldr	r3, [pc, #788]	; (80063e0 <UART_SetConfig+0x384>)
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d004      	beq.n	80060da <UART_SetConfig+0x7e>
 80060d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	4bc3      	ldr	r3, [pc, #780]	; (80063e4 <UART_SetConfig+0x388>)
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d103      	bne.n	80060e2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80060da:	f7ff f8b5 	bl	8005248 <HAL_RCC_GetPCLK2Freq>
 80060de:	6778      	str	r0, [r7, #116]	; 0x74
 80060e0:	e002      	b.n	80060e8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80060e2:	f7ff f89d 	bl	8005220 <HAL_RCC_GetPCLK1Freq>
 80060e6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060ea:	69db      	ldr	r3, [r3, #28]
 80060ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060f0:	f040 80b6 	bne.w	8006260 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060f6:	461c      	mov	r4, r3
 80060f8:	f04f 0500 	mov.w	r5, #0
 80060fc:	4622      	mov	r2, r4
 80060fe:	462b      	mov	r3, r5
 8006100:	1891      	adds	r1, r2, r2
 8006102:	6439      	str	r1, [r7, #64]	; 0x40
 8006104:	415b      	adcs	r3, r3
 8006106:	647b      	str	r3, [r7, #68]	; 0x44
 8006108:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800610c:	1912      	adds	r2, r2, r4
 800610e:	eb45 0303 	adc.w	r3, r5, r3
 8006112:	f04f 0000 	mov.w	r0, #0
 8006116:	f04f 0100 	mov.w	r1, #0
 800611a:	00d9      	lsls	r1, r3, #3
 800611c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006120:	00d0      	lsls	r0, r2, #3
 8006122:	4602      	mov	r2, r0
 8006124:	460b      	mov	r3, r1
 8006126:	1911      	adds	r1, r2, r4
 8006128:	6639      	str	r1, [r7, #96]	; 0x60
 800612a:	416b      	adcs	r3, r5
 800612c:	667b      	str	r3, [r7, #100]	; 0x64
 800612e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	461a      	mov	r2, r3
 8006134:	f04f 0300 	mov.w	r3, #0
 8006138:	1891      	adds	r1, r2, r2
 800613a:	63b9      	str	r1, [r7, #56]	; 0x38
 800613c:	415b      	adcs	r3, r3
 800613e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006140:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006144:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006148:	f7fa fd7e 	bl	8000c48 <__aeabi_uldivmod>
 800614c:	4602      	mov	r2, r0
 800614e:	460b      	mov	r3, r1
 8006150:	4ba5      	ldr	r3, [pc, #660]	; (80063e8 <UART_SetConfig+0x38c>)
 8006152:	fba3 2302 	umull	r2, r3, r3, r2
 8006156:	095b      	lsrs	r3, r3, #5
 8006158:	011e      	lsls	r6, r3, #4
 800615a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800615c:	461c      	mov	r4, r3
 800615e:	f04f 0500 	mov.w	r5, #0
 8006162:	4622      	mov	r2, r4
 8006164:	462b      	mov	r3, r5
 8006166:	1891      	adds	r1, r2, r2
 8006168:	6339      	str	r1, [r7, #48]	; 0x30
 800616a:	415b      	adcs	r3, r3
 800616c:	637b      	str	r3, [r7, #52]	; 0x34
 800616e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006172:	1912      	adds	r2, r2, r4
 8006174:	eb45 0303 	adc.w	r3, r5, r3
 8006178:	f04f 0000 	mov.w	r0, #0
 800617c:	f04f 0100 	mov.w	r1, #0
 8006180:	00d9      	lsls	r1, r3, #3
 8006182:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006186:	00d0      	lsls	r0, r2, #3
 8006188:	4602      	mov	r2, r0
 800618a:	460b      	mov	r3, r1
 800618c:	1911      	adds	r1, r2, r4
 800618e:	65b9      	str	r1, [r7, #88]	; 0x58
 8006190:	416b      	adcs	r3, r5
 8006192:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	461a      	mov	r2, r3
 800619a:	f04f 0300 	mov.w	r3, #0
 800619e:	1891      	adds	r1, r2, r2
 80061a0:	62b9      	str	r1, [r7, #40]	; 0x28
 80061a2:	415b      	adcs	r3, r3
 80061a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80061aa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80061ae:	f7fa fd4b 	bl	8000c48 <__aeabi_uldivmod>
 80061b2:	4602      	mov	r2, r0
 80061b4:	460b      	mov	r3, r1
 80061b6:	4b8c      	ldr	r3, [pc, #560]	; (80063e8 <UART_SetConfig+0x38c>)
 80061b8:	fba3 1302 	umull	r1, r3, r3, r2
 80061bc:	095b      	lsrs	r3, r3, #5
 80061be:	2164      	movs	r1, #100	; 0x64
 80061c0:	fb01 f303 	mul.w	r3, r1, r3
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	00db      	lsls	r3, r3, #3
 80061c8:	3332      	adds	r3, #50	; 0x32
 80061ca:	4a87      	ldr	r2, [pc, #540]	; (80063e8 <UART_SetConfig+0x38c>)
 80061cc:	fba2 2303 	umull	r2, r3, r2, r3
 80061d0:	095b      	lsrs	r3, r3, #5
 80061d2:	005b      	lsls	r3, r3, #1
 80061d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80061d8:	441e      	add	r6, r3
 80061da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061dc:	4618      	mov	r0, r3
 80061de:	f04f 0100 	mov.w	r1, #0
 80061e2:	4602      	mov	r2, r0
 80061e4:	460b      	mov	r3, r1
 80061e6:	1894      	adds	r4, r2, r2
 80061e8:	623c      	str	r4, [r7, #32]
 80061ea:	415b      	adcs	r3, r3
 80061ec:	627b      	str	r3, [r7, #36]	; 0x24
 80061ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80061f2:	1812      	adds	r2, r2, r0
 80061f4:	eb41 0303 	adc.w	r3, r1, r3
 80061f8:	f04f 0400 	mov.w	r4, #0
 80061fc:	f04f 0500 	mov.w	r5, #0
 8006200:	00dd      	lsls	r5, r3, #3
 8006202:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006206:	00d4      	lsls	r4, r2, #3
 8006208:	4622      	mov	r2, r4
 800620a:	462b      	mov	r3, r5
 800620c:	1814      	adds	r4, r2, r0
 800620e:	653c      	str	r4, [r7, #80]	; 0x50
 8006210:	414b      	adcs	r3, r1
 8006212:	657b      	str	r3, [r7, #84]	; 0x54
 8006214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	461a      	mov	r2, r3
 800621a:	f04f 0300 	mov.w	r3, #0
 800621e:	1891      	adds	r1, r2, r2
 8006220:	61b9      	str	r1, [r7, #24]
 8006222:	415b      	adcs	r3, r3
 8006224:	61fb      	str	r3, [r7, #28]
 8006226:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800622a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800622e:	f7fa fd0b 	bl	8000c48 <__aeabi_uldivmod>
 8006232:	4602      	mov	r2, r0
 8006234:	460b      	mov	r3, r1
 8006236:	4b6c      	ldr	r3, [pc, #432]	; (80063e8 <UART_SetConfig+0x38c>)
 8006238:	fba3 1302 	umull	r1, r3, r3, r2
 800623c:	095b      	lsrs	r3, r3, #5
 800623e:	2164      	movs	r1, #100	; 0x64
 8006240:	fb01 f303 	mul.w	r3, r1, r3
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	00db      	lsls	r3, r3, #3
 8006248:	3332      	adds	r3, #50	; 0x32
 800624a:	4a67      	ldr	r2, [pc, #412]	; (80063e8 <UART_SetConfig+0x38c>)
 800624c:	fba2 2303 	umull	r2, r3, r2, r3
 8006250:	095b      	lsrs	r3, r3, #5
 8006252:	f003 0207 	and.w	r2, r3, #7
 8006256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4432      	add	r2, r6
 800625c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800625e:	e0b9      	b.n	80063d4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006260:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006262:	461c      	mov	r4, r3
 8006264:	f04f 0500 	mov.w	r5, #0
 8006268:	4622      	mov	r2, r4
 800626a:	462b      	mov	r3, r5
 800626c:	1891      	adds	r1, r2, r2
 800626e:	6139      	str	r1, [r7, #16]
 8006270:	415b      	adcs	r3, r3
 8006272:	617b      	str	r3, [r7, #20]
 8006274:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006278:	1912      	adds	r2, r2, r4
 800627a:	eb45 0303 	adc.w	r3, r5, r3
 800627e:	f04f 0000 	mov.w	r0, #0
 8006282:	f04f 0100 	mov.w	r1, #0
 8006286:	00d9      	lsls	r1, r3, #3
 8006288:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800628c:	00d0      	lsls	r0, r2, #3
 800628e:	4602      	mov	r2, r0
 8006290:	460b      	mov	r3, r1
 8006292:	eb12 0804 	adds.w	r8, r2, r4
 8006296:	eb43 0905 	adc.w	r9, r3, r5
 800629a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	4618      	mov	r0, r3
 80062a0:	f04f 0100 	mov.w	r1, #0
 80062a4:	f04f 0200 	mov.w	r2, #0
 80062a8:	f04f 0300 	mov.w	r3, #0
 80062ac:	008b      	lsls	r3, r1, #2
 80062ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80062b2:	0082      	lsls	r2, r0, #2
 80062b4:	4640      	mov	r0, r8
 80062b6:	4649      	mov	r1, r9
 80062b8:	f7fa fcc6 	bl	8000c48 <__aeabi_uldivmod>
 80062bc:	4602      	mov	r2, r0
 80062be:	460b      	mov	r3, r1
 80062c0:	4b49      	ldr	r3, [pc, #292]	; (80063e8 <UART_SetConfig+0x38c>)
 80062c2:	fba3 2302 	umull	r2, r3, r3, r2
 80062c6:	095b      	lsrs	r3, r3, #5
 80062c8:	011e      	lsls	r6, r3, #4
 80062ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062cc:	4618      	mov	r0, r3
 80062ce:	f04f 0100 	mov.w	r1, #0
 80062d2:	4602      	mov	r2, r0
 80062d4:	460b      	mov	r3, r1
 80062d6:	1894      	adds	r4, r2, r2
 80062d8:	60bc      	str	r4, [r7, #8]
 80062da:	415b      	adcs	r3, r3
 80062dc:	60fb      	str	r3, [r7, #12]
 80062de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062e2:	1812      	adds	r2, r2, r0
 80062e4:	eb41 0303 	adc.w	r3, r1, r3
 80062e8:	f04f 0400 	mov.w	r4, #0
 80062ec:	f04f 0500 	mov.w	r5, #0
 80062f0:	00dd      	lsls	r5, r3, #3
 80062f2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80062f6:	00d4      	lsls	r4, r2, #3
 80062f8:	4622      	mov	r2, r4
 80062fa:	462b      	mov	r3, r5
 80062fc:	1814      	adds	r4, r2, r0
 80062fe:	64bc      	str	r4, [r7, #72]	; 0x48
 8006300:	414b      	adcs	r3, r1
 8006302:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	4618      	mov	r0, r3
 800630a:	f04f 0100 	mov.w	r1, #0
 800630e:	f04f 0200 	mov.w	r2, #0
 8006312:	f04f 0300 	mov.w	r3, #0
 8006316:	008b      	lsls	r3, r1, #2
 8006318:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800631c:	0082      	lsls	r2, r0, #2
 800631e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006322:	f7fa fc91 	bl	8000c48 <__aeabi_uldivmod>
 8006326:	4602      	mov	r2, r0
 8006328:	460b      	mov	r3, r1
 800632a:	4b2f      	ldr	r3, [pc, #188]	; (80063e8 <UART_SetConfig+0x38c>)
 800632c:	fba3 1302 	umull	r1, r3, r3, r2
 8006330:	095b      	lsrs	r3, r3, #5
 8006332:	2164      	movs	r1, #100	; 0x64
 8006334:	fb01 f303 	mul.w	r3, r1, r3
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	011b      	lsls	r3, r3, #4
 800633c:	3332      	adds	r3, #50	; 0x32
 800633e:	4a2a      	ldr	r2, [pc, #168]	; (80063e8 <UART_SetConfig+0x38c>)
 8006340:	fba2 2303 	umull	r2, r3, r2, r3
 8006344:	095b      	lsrs	r3, r3, #5
 8006346:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800634a:	441e      	add	r6, r3
 800634c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800634e:	4618      	mov	r0, r3
 8006350:	f04f 0100 	mov.w	r1, #0
 8006354:	4602      	mov	r2, r0
 8006356:	460b      	mov	r3, r1
 8006358:	1894      	adds	r4, r2, r2
 800635a:	603c      	str	r4, [r7, #0]
 800635c:	415b      	adcs	r3, r3
 800635e:	607b      	str	r3, [r7, #4]
 8006360:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006364:	1812      	adds	r2, r2, r0
 8006366:	eb41 0303 	adc.w	r3, r1, r3
 800636a:	f04f 0400 	mov.w	r4, #0
 800636e:	f04f 0500 	mov.w	r5, #0
 8006372:	00dd      	lsls	r5, r3, #3
 8006374:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006378:	00d4      	lsls	r4, r2, #3
 800637a:	4622      	mov	r2, r4
 800637c:	462b      	mov	r3, r5
 800637e:	eb12 0a00 	adds.w	sl, r2, r0
 8006382:	eb43 0b01 	adc.w	fp, r3, r1
 8006386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	4618      	mov	r0, r3
 800638c:	f04f 0100 	mov.w	r1, #0
 8006390:	f04f 0200 	mov.w	r2, #0
 8006394:	f04f 0300 	mov.w	r3, #0
 8006398:	008b      	lsls	r3, r1, #2
 800639a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800639e:	0082      	lsls	r2, r0, #2
 80063a0:	4650      	mov	r0, sl
 80063a2:	4659      	mov	r1, fp
 80063a4:	f7fa fc50 	bl	8000c48 <__aeabi_uldivmod>
 80063a8:	4602      	mov	r2, r0
 80063aa:	460b      	mov	r3, r1
 80063ac:	4b0e      	ldr	r3, [pc, #56]	; (80063e8 <UART_SetConfig+0x38c>)
 80063ae:	fba3 1302 	umull	r1, r3, r3, r2
 80063b2:	095b      	lsrs	r3, r3, #5
 80063b4:	2164      	movs	r1, #100	; 0x64
 80063b6:	fb01 f303 	mul.w	r3, r1, r3
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	011b      	lsls	r3, r3, #4
 80063be:	3332      	adds	r3, #50	; 0x32
 80063c0:	4a09      	ldr	r2, [pc, #36]	; (80063e8 <UART_SetConfig+0x38c>)
 80063c2:	fba2 2303 	umull	r2, r3, r2, r3
 80063c6:	095b      	lsrs	r3, r3, #5
 80063c8:	f003 020f 	and.w	r2, r3, #15
 80063cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4432      	add	r2, r6
 80063d2:	609a      	str	r2, [r3, #8]
}
 80063d4:	bf00      	nop
 80063d6:	377c      	adds	r7, #124	; 0x7c
 80063d8:	46bd      	mov	sp, r7
 80063da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063de:	bf00      	nop
 80063e0:	40011000 	.word	0x40011000
 80063e4:	40011400 	.word	0x40011400
 80063e8:	51eb851f 	.word	0x51eb851f

080063ec <__errno>:
 80063ec:	4b01      	ldr	r3, [pc, #4]	; (80063f4 <__errno+0x8>)
 80063ee:	6818      	ldr	r0, [r3, #0]
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	2000000c 	.word	0x2000000c

080063f8 <__libc_init_array>:
 80063f8:	b570      	push	{r4, r5, r6, lr}
 80063fa:	4d0d      	ldr	r5, [pc, #52]	; (8006430 <__libc_init_array+0x38>)
 80063fc:	4c0d      	ldr	r4, [pc, #52]	; (8006434 <__libc_init_array+0x3c>)
 80063fe:	1b64      	subs	r4, r4, r5
 8006400:	10a4      	asrs	r4, r4, #2
 8006402:	2600      	movs	r6, #0
 8006404:	42a6      	cmp	r6, r4
 8006406:	d109      	bne.n	800641c <__libc_init_array+0x24>
 8006408:	4d0b      	ldr	r5, [pc, #44]	; (8006438 <__libc_init_array+0x40>)
 800640a:	4c0c      	ldr	r4, [pc, #48]	; (800643c <__libc_init_array+0x44>)
 800640c:	f002 fd0a 	bl	8008e24 <_init>
 8006410:	1b64      	subs	r4, r4, r5
 8006412:	10a4      	asrs	r4, r4, #2
 8006414:	2600      	movs	r6, #0
 8006416:	42a6      	cmp	r6, r4
 8006418:	d105      	bne.n	8006426 <__libc_init_array+0x2e>
 800641a:	bd70      	pop	{r4, r5, r6, pc}
 800641c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006420:	4798      	blx	r3
 8006422:	3601      	adds	r6, #1
 8006424:	e7ee      	b.n	8006404 <__libc_init_array+0xc>
 8006426:	f855 3b04 	ldr.w	r3, [r5], #4
 800642a:	4798      	blx	r3
 800642c:	3601      	adds	r6, #1
 800642e:	e7f2      	b.n	8006416 <__libc_init_array+0x1e>
 8006430:	08009354 	.word	0x08009354
 8006434:	08009354 	.word	0x08009354
 8006438:	08009354 	.word	0x08009354
 800643c:	08009358 	.word	0x08009358

08006440 <memset>:
 8006440:	4402      	add	r2, r0
 8006442:	4603      	mov	r3, r0
 8006444:	4293      	cmp	r3, r2
 8006446:	d100      	bne.n	800644a <memset+0xa>
 8006448:	4770      	bx	lr
 800644a:	f803 1b01 	strb.w	r1, [r3], #1
 800644e:	e7f9      	b.n	8006444 <memset+0x4>

08006450 <__cvt>:
 8006450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006454:	ec55 4b10 	vmov	r4, r5, d0
 8006458:	2d00      	cmp	r5, #0
 800645a:	460e      	mov	r6, r1
 800645c:	4619      	mov	r1, r3
 800645e:	462b      	mov	r3, r5
 8006460:	bfbb      	ittet	lt
 8006462:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006466:	461d      	movlt	r5, r3
 8006468:	2300      	movge	r3, #0
 800646a:	232d      	movlt	r3, #45	; 0x2d
 800646c:	700b      	strb	r3, [r1, #0]
 800646e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006470:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006474:	4691      	mov	r9, r2
 8006476:	f023 0820 	bic.w	r8, r3, #32
 800647a:	bfbc      	itt	lt
 800647c:	4622      	movlt	r2, r4
 800647e:	4614      	movlt	r4, r2
 8006480:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006484:	d005      	beq.n	8006492 <__cvt+0x42>
 8006486:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800648a:	d100      	bne.n	800648e <__cvt+0x3e>
 800648c:	3601      	adds	r6, #1
 800648e:	2102      	movs	r1, #2
 8006490:	e000      	b.n	8006494 <__cvt+0x44>
 8006492:	2103      	movs	r1, #3
 8006494:	ab03      	add	r3, sp, #12
 8006496:	9301      	str	r3, [sp, #4]
 8006498:	ab02      	add	r3, sp, #8
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	ec45 4b10 	vmov	d0, r4, r5
 80064a0:	4653      	mov	r3, sl
 80064a2:	4632      	mov	r2, r6
 80064a4:	f000 fce4 	bl	8006e70 <_dtoa_r>
 80064a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80064ac:	4607      	mov	r7, r0
 80064ae:	d102      	bne.n	80064b6 <__cvt+0x66>
 80064b0:	f019 0f01 	tst.w	r9, #1
 80064b4:	d022      	beq.n	80064fc <__cvt+0xac>
 80064b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80064ba:	eb07 0906 	add.w	r9, r7, r6
 80064be:	d110      	bne.n	80064e2 <__cvt+0x92>
 80064c0:	783b      	ldrb	r3, [r7, #0]
 80064c2:	2b30      	cmp	r3, #48	; 0x30
 80064c4:	d10a      	bne.n	80064dc <__cvt+0x8c>
 80064c6:	2200      	movs	r2, #0
 80064c8:	2300      	movs	r3, #0
 80064ca:	4620      	mov	r0, r4
 80064cc:	4629      	mov	r1, r5
 80064ce:	f7fa fafb 	bl	8000ac8 <__aeabi_dcmpeq>
 80064d2:	b918      	cbnz	r0, 80064dc <__cvt+0x8c>
 80064d4:	f1c6 0601 	rsb	r6, r6, #1
 80064d8:	f8ca 6000 	str.w	r6, [sl]
 80064dc:	f8da 3000 	ldr.w	r3, [sl]
 80064e0:	4499      	add	r9, r3
 80064e2:	2200      	movs	r2, #0
 80064e4:	2300      	movs	r3, #0
 80064e6:	4620      	mov	r0, r4
 80064e8:	4629      	mov	r1, r5
 80064ea:	f7fa faed 	bl	8000ac8 <__aeabi_dcmpeq>
 80064ee:	b108      	cbz	r0, 80064f4 <__cvt+0xa4>
 80064f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80064f4:	2230      	movs	r2, #48	; 0x30
 80064f6:	9b03      	ldr	r3, [sp, #12]
 80064f8:	454b      	cmp	r3, r9
 80064fa:	d307      	bcc.n	800650c <__cvt+0xbc>
 80064fc:	9b03      	ldr	r3, [sp, #12]
 80064fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006500:	1bdb      	subs	r3, r3, r7
 8006502:	4638      	mov	r0, r7
 8006504:	6013      	str	r3, [r2, #0]
 8006506:	b004      	add	sp, #16
 8006508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800650c:	1c59      	adds	r1, r3, #1
 800650e:	9103      	str	r1, [sp, #12]
 8006510:	701a      	strb	r2, [r3, #0]
 8006512:	e7f0      	b.n	80064f6 <__cvt+0xa6>

08006514 <__exponent>:
 8006514:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006516:	4603      	mov	r3, r0
 8006518:	2900      	cmp	r1, #0
 800651a:	bfb8      	it	lt
 800651c:	4249      	neglt	r1, r1
 800651e:	f803 2b02 	strb.w	r2, [r3], #2
 8006522:	bfb4      	ite	lt
 8006524:	222d      	movlt	r2, #45	; 0x2d
 8006526:	222b      	movge	r2, #43	; 0x2b
 8006528:	2909      	cmp	r1, #9
 800652a:	7042      	strb	r2, [r0, #1]
 800652c:	dd2a      	ble.n	8006584 <__exponent+0x70>
 800652e:	f10d 0407 	add.w	r4, sp, #7
 8006532:	46a4      	mov	ip, r4
 8006534:	270a      	movs	r7, #10
 8006536:	46a6      	mov	lr, r4
 8006538:	460a      	mov	r2, r1
 800653a:	fb91 f6f7 	sdiv	r6, r1, r7
 800653e:	fb07 1516 	mls	r5, r7, r6, r1
 8006542:	3530      	adds	r5, #48	; 0x30
 8006544:	2a63      	cmp	r2, #99	; 0x63
 8006546:	f104 34ff 	add.w	r4, r4, #4294967295
 800654a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800654e:	4631      	mov	r1, r6
 8006550:	dcf1      	bgt.n	8006536 <__exponent+0x22>
 8006552:	3130      	adds	r1, #48	; 0x30
 8006554:	f1ae 0502 	sub.w	r5, lr, #2
 8006558:	f804 1c01 	strb.w	r1, [r4, #-1]
 800655c:	1c44      	adds	r4, r0, #1
 800655e:	4629      	mov	r1, r5
 8006560:	4561      	cmp	r1, ip
 8006562:	d30a      	bcc.n	800657a <__exponent+0x66>
 8006564:	f10d 0209 	add.w	r2, sp, #9
 8006568:	eba2 020e 	sub.w	r2, r2, lr
 800656c:	4565      	cmp	r5, ip
 800656e:	bf88      	it	hi
 8006570:	2200      	movhi	r2, #0
 8006572:	4413      	add	r3, r2
 8006574:	1a18      	subs	r0, r3, r0
 8006576:	b003      	add	sp, #12
 8006578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800657a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800657e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006582:	e7ed      	b.n	8006560 <__exponent+0x4c>
 8006584:	2330      	movs	r3, #48	; 0x30
 8006586:	3130      	adds	r1, #48	; 0x30
 8006588:	7083      	strb	r3, [r0, #2]
 800658a:	70c1      	strb	r1, [r0, #3]
 800658c:	1d03      	adds	r3, r0, #4
 800658e:	e7f1      	b.n	8006574 <__exponent+0x60>

08006590 <_printf_float>:
 8006590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006594:	ed2d 8b02 	vpush	{d8}
 8006598:	b08d      	sub	sp, #52	; 0x34
 800659a:	460c      	mov	r4, r1
 800659c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80065a0:	4616      	mov	r6, r2
 80065a2:	461f      	mov	r7, r3
 80065a4:	4605      	mov	r5, r0
 80065a6:	f001 fb45 	bl	8007c34 <_localeconv_r>
 80065aa:	f8d0 a000 	ldr.w	sl, [r0]
 80065ae:	4650      	mov	r0, sl
 80065b0:	f7f9 fe0e 	bl	80001d0 <strlen>
 80065b4:	2300      	movs	r3, #0
 80065b6:	930a      	str	r3, [sp, #40]	; 0x28
 80065b8:	6823      	ldr	r3, [r4, #0]
 80065ba:	9305      	str	r3, [sp, #20]
 80065bc:	f8d8 3000 	ldr.w	r3, [r8]
 80065c0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80065c4:	3307      	adds	r3, #7
 80065c6:	f023 0307 	bic.w	r3, r3, #7
 80065ca:	f103 0208 	add.w	r2, r3, #8
 80065ce:	f8c8 2000 	str.w	r2, [r8]
 80065d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80065da:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80065de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80065e2:	9307      	str	r3, [sp, #28]
 80065e4:	f8cd 8018 	str.w	r8, [sp, #24]
 80065e8:	ee08 0a10 	vmov	s16, r0
 80065ec:	4b9f      	ldr	r3, [pc, #636]	; (800686c <_printf_float+0x2dc>)
 80065ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065f2:	f04f 32ff 	mov.w	r2, #4294967295
 80065f6:	f7fa fa99 	bl	8000b2c <__aeabi_dcmpun>
 80065fa:	bb88      	cbnz	r0, 8006660 <_printf_float+0xd0>
 80065fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006600:	4b9a      	ldr	r3, [pc, #616]	; (800686c <_printf_float+0x2dc>)
 8006602:	f04f 32ff 	mov.w	r2, #4294967295
 8006606:	f7fa fa73 	bl	8000af0 <__aeabi_dcmple>
 800660a:	bb48      	cbnz	r0, 8006660 <_printf_float+0xd0>
 800660c:	2200      	movs	r2, #0
 800660e:	2300      	movs	r3, #0
 8006610:	4640      	mov	r0, r8
 8006612:	4649      	mov	r1, r9
 8006614:	f7fa fa62 	bl	8000adc <__aeabi_dcmplt>
 8006618:	b110      	cbz	r0, 8006620 <_printf_float+0x90>
 800661a:	232d      	movs	r3, #45	; 0x2d
 800661c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006620:	4b93      	ldr	r3, [pc, #588]	; (8006870 <_printf_float+0x2e0>)
 8006622:	4894      	ldr	r0, [pc, #592]	; (8006874 <_printf_float+0x2e4>)
 8006624:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006628:	bf94      	ite	ls
 800662a:	4698      	movls	r8, r3
 800662c:	4680      	movhi	r8, r0
 800662e:	2303      	movs	r3, #3
 8006630:	6123      	str	r3, [r4, #16]
 8006632:	9b05      	ldr	r3, [sp, #20]
 8006634:	f023 0204 	bic.w	r2, r3, #4
 8006638:	6022      	str	r2, [r4, #0]
 800663a:	f04f 0900 	mov.w	r9, #0
 800663e:	9700      	str	r7, [sp, #0]
 8006640:	4633      	mov	r3, r6
 8006642:	aa0b      	add	r2, sp, #44	; 0x2c
 8006644:	4621      	mov	r1, r4
 8006646:	4628      	mov	r0, r5
 8006648:	f000 f9d8 	bl	80069fc <_printf_common>
 800664c:	3001      	adds	r0, #1
 800664e:	f040 8090 	bne.w	8006772 <_printf_float+0x1e2>
 8006652:	f04f 30ff 	mov.w	r0, #4294967295
 8006656:	b00d      	add	sp, #52	; 0x34
 8006658:	ecbd 8b02 	vpop	{d8}
 800665c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006660:	4642      	mov	r2, r8
 8006662:	464b      	mov	r3, r9
 8006664:	4640      	mov	r0, r8
 8006666:	4649      	mov	r1, r9
 8006668:	f7fa fa60 	bl	8000b2c <__aeabi_dcmpun>
 800666c:	b140      	cbz	r0, 8006680 <_printf_float+0xf0>
 800666e:	464b      	mov	r3, r9
 8006670:	2b00      	cmp	r3, #0
 8006672:	bfbc      	itt	lt
 8006674:	232d      	movlt	r3, #45	; 0x2d
 8006676:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800667a:	487f      	ldr	r0, [pc, #508]	; (8006878 <_printf_float+0x2e8>)
 800667c:	4b7f      	ldr	r3, [pc, #508]	; (800687c <_printf_float+0x2ec>)
 800667e:	e7d1      	b.n	8006624 <_printf_float+0x94>
 8006680:	6863      	ldr	r3, [r4, #4]
 8006682:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006686:	9206      	str	r2, [sp, #24]
 8006688:	1c5a      	adds	r2, r3, #1
 800668a:	d13f      	bne.n	800670c <_printf_float+0x17c>
 800668c:	2306      	movs	r3, #6
 800668e:	6063      	str	r3, [r4, #4]
 8006690:	9b05      	ldr	r3, [sp, #20]
 8006692:	6861      	ldr	r1, [r4, #4]
 8006694:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006698:	2300      	movs	r3, #0
 800669a:	9303      	str	r3, [sp, #12]
 800669c:	ab0a      	add	r3, sp, #40	; 0x28
 800669e:	e9cd b301 	strd	fp, r3, [sp, #4]
 80066a2:	ab09      	add	r3, sp, #36	; 0x24
 80066a4:	ec49 8b10 	vmov	d0, r8, r9
 80066a8:	9300      	str	r3, [sp, #0]
 80066aa:	6022      	str	r2, [r4, #0]
 80066ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80066b0:	4628      	mov	r0, r5
 80066b2:	f7ff fecd 	bl	8006450 <__cvt>
 80066b6:	9b06      	ldr	r3, [sp, #24]
 80066b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066ba:	2b47      	cmp	r3, #71	; 0x47
 80066bc:	4680      	mov	r8, r0
 80066be:	d108      	bne.n	80066d2 <_printf_float+0x142>
 80066c0:	1cc8      	adds	r0, r1, #3
 80066c2:	db02      	blt.n	80066ca <_printf_float+0x13a>
 80066c4:	6863      	ldr	r3, [r4, #4]
 80066c6:	4299      	cmp	r1, r3
 80066c8:	dd41      	ble.n	800674e <_printf_float+0x1be>
 80066ca:	f1ab 0b02 	sub.w	fp, fp, #2
 80066ce:	fa5f fb8b 	uxtb.w	fp, fp
 80066d2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80066d6:	d820      	bhi.n	800671a <_printf_float+0x18a>
 80066d8:	3901      	subs	r1, #1
 80066da:	465a      	mov	r2, fp
 80066dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80066e0:	9109      	str	r1, [sp, #36]	; 0x24
 80066e2:	f7ff ff17 	bl	8006514 <__exponent>
 80066e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066e8:	1813      	adds	r3, r2, r0
 80066ea:	2a01      	cmp	r2, #1
 80066ec:	4681      	mov	r9, r0
 80066ee:	6123      	str	r3, [r4, #16]
 80066f0:	dc02      	bgt.n	80066f8 <_printf_float+0x168>
 80066f2:	6822      	ldr	r2, [r4, #0]
 80066f4:	07d2      	lsls	r2, r2, #31
 80066f6:	d501      	bpl.n	80066fc <_printf_float+0x16c>
 80066f8:	3301      	adds	r3, #1
 80066fa:	6123      	str	r3, [r4, #16]
 80066fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006700:	2b00      	cmp	r3, #0
 8006702:	d09c      	beq.n	800663e <_printf_float+0xae>
 8006704:	232d      	movs	r3, #45	; 0x2d
 8006706:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800670a:	e798      	b.n	800663e <_printf_float+0xae>
 800670c:	9a06      	ldr	r2, [sp, #24]
 800670e:	2a47      	cmp	r2, #71	; 0x47
 8006710:	d1be      	bne.n	8006690 <_printf_float+0x100>
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1bc      	bne.n	8006690 <_printf_float+0x100>
 8006716:	2301      	movs	r3, #1
 8006718:	e7b9      	b.n	800668e <_printf_float+0xfe>
 800671a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800671e:	d118      	bne.n	8006752 <_printf_float+0x1c2>
 8006720:	2900      	cmp	r1, #0
 8006722:	6863      	ldr	r3, [r4, #4]
 8006724:	dd0b      	ble.n	800673e <_printf_float+0x1ae>
 8006726:	6121      	str	r1, [r4, #16]
 8006728:	b913      	cbnz	r3, 8006730 <_printf_float+0x1a0>
 800672a:	6822      	ldr	r2, [r4, #0]
 800672c:	07d0      	lsls	r0, r2, #31
 800672e:	d502      	bpl.n	8006736 <_printf_float+0x1a6>
 8006730:	3301      	adds	r3, #1
 8006732:	440b      	add	r3, r1
 8006734:	6123      	str	r3, [r4, #16]
 8006736:	65a1      	str	r1, [r4, #88]	; 0x58
 8006738:	f04f 0900 	mov.w	r9, #0
 800673c:	e7de      	b.n	80066fc <_printf_float+0x16c>
 800673e:	b913      	cbnz	r3, 8006746 <_printf_float+0x1b6>
 8006740:	6822      	ldr	r2, [r4, #0]
 8006742:	07d2      	lsls	r2, r2, #31
 8006744:	d501      	bpl.n	800674a <_printf_float+0x1ba>
 8006746:	3302      	adds	r3, #2
 8006748:	e7f4      	b.n	8006734 <_printf_float+0x1a4>
 800674a:	2301      	movs	r3, #1
 800674c:	e7f2      	b.n	8006734 <_printf_float+0x1a4>
 800674e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006754:	4299      	cmp	r1, r3
 8006756:	db05      	blt.n	8006764 <_printf_float+0x1d4>
 8006758:	6823      	ldr	r3, [r4, #0]
 800675a:	6121      	str	r1, [r4, #16]
 800675c:	07d8      	lsls	r0, r3, #31
 800675e:	d5ea      	bpl.n	8006736 <_printf_float+0x1a6>
 8006760:	1c4b      	adds	r3, r1, #1
 8006762:	e7e7      	b.n	8006734 <_printf_float+0x1a4>
 8006764:	2900      	cmp	r1, #0
 8006766:	bfd4      	ite	le
 8006768:	f1c1 0202 	rsble	r2, r1, #2
 800676c:	2201      	movgt	r2, #1
 800676e:	4413      	add	r3, r2
 8006770:	e7e0      	b.n	8006734 <_printf_float+0x1a4>
 8006772:	6823      	ldr	r3, [r4, #0]
 8006774:	055a      	lsls	r2, r3, #21
 8006776:	d407      	bmi.n	8006788 <_printf_float+0x1f8>
 8006778:	6923      	ldr	r3, [r4, #16]
 800677a:	4642      	mov	r2, r8
 800677c:	4631      	mov	r1, r6
 800677e:	4628      	mov	r0, r5
 8006780:	47b8      	blx	r7
 8006782:	3001      	adds	r0, #1
 8006784:	d12c      	bne.n	80067e0 <_printf_float+0x250>
 8006786:	e764      	b.n	8006652 <_printf_float+0xc2>
 8006788:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800678c:	f240 80e0 	bls.w	8006950 <_printf_float+0x3c0>
 8006790:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006794:	2200      	movs	r2, #0
 8006796:	2300      	movs	r3, #0
 8006798:	f7fa f996 	bl	8000ac8 <__aeabi_dcmpeq>
 800679c:	2800      	cmp	r0, #0
 800679e:	d034      	beq.n	800680a <_printf_float+0x27a>
 80067a0:	4a37      	ldr	r2, [pc, #220]	; (8006880 <_printf_float+0x2f0>)
 80067a2:	2301      	movs	r3, #1
 80067a4:	4631      	mov	r1, r6
 80067a6:	4628      	mov	r0, r5
 80067a8:	47b8      	blx	r7
 80067aa:	3001      	adds	r0, #1
 80067ac:	f43f af51 	beq.w	8006652 <_printf_float+0xc2>
 80067b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067b4:	429a      	cmp	r2, r3
 80067b6:	db02      	blt.n	80067be <_printf_float+0x22e>
 80067b8:	6823      	ldr	r3, [r4, #0]
 80067ba:	07d8      	lsls	r0, r3, #31
 80067bc:	d510      	bpl.n	80067e0 <_printf_float+0x250>
 80067be:	ee18 3a10 	vmov	r3, s16
 80067c2:	4652      	mov	r2, sl
 80067c4:	4631      	mov	r1, r6
 80067c6:	4628      	mov	r0, r5
 80067c8:	47b8      	blx	r7
 80067ca:	3001      	adds	r0, #1
 80067cc:	f43f af41 	beq.w	8006652 <_printf_float+0xc2>
 80067d0:	f04f 0800 	mov.w	r8, #0
 80067d4:	f104 091a 	add.w	r9, r4, #26
 80067d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067da:	3b01      	subs	r3, #1
 80067dc:	4543      	cmp	r3, r8
 80067de:	dc09      	bgt.n	80067f4 <_printf_float+0x264>
 80067e0:	6823      	ldr	r3, [r4, #0]
 80067e2:	079b      	lsls	r3, r3, #30
 80067e4:	f100 8105 	bmi.w	80069f2 <_printf_float+0x462>
 80067e8:	68e0      	ldr	r0, [r4, #12]
 80067ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067ec:	4298      	cmp	r0, r3
 80067ee:	bfb8      	it	lt
 80067f0:	4618      	movlt	r0, r3
 80067f2:	e730      	b.n	8006656 <_printf_float+0xc6>
 80067f4:	2301      	movs	r3, #1
 80067f6:	464a      	mov	r2, r9
 80067f8:	4631      	mov	r1, r6
 80067fa:	4628      	mov	r0, r5
 80067fc:	47b8      	blx	r7
 80067fe:	3001      	adds	r0, #1
 8006800:	f43f af27 	beq.w	8006652 <_printf_float+0xc2>
 8006804:	f108 0801 	add.w	r8, r8, #1
 8006808:	e7e6      	b.n	80067d8 <_printf_float+0x248>
 800680a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800680c:	2b00      	cmp	r3, #0
 800680e:	dc39      	bgt.n	8006884 <_printf_float+0x2f4>
 8006810:	4a1b      	ldr	r2, [pc, #108]	; (8006880 <_printf_float+0x2f0>)
 8006812:	2301      	movs	r3, #1
 8006814:	4631      	mov	r1, r6
 8006816:	4628      	mov	r0, r5
 8006818:	47b8      	blx	r7
 800681a:	3001      	adds	r0, #1
 800681c:	f43f af19 	beq.w	8006652 <_printf_float+0xc2>
 8006820:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006824:	4313      	orrs	r3, r2
 8006826:	d102      	bne.n	800682e <_printf_float+0x29e>
 8006828:	6823      	ldr	r3, [r4, #0]
 800682a:	07d9      	lsls	r1, r3, #31
 800682c:	d5d8      	bpl.n	80067e0 <_printf_float+0x250>
 800682e:	ee18 3a10 	vmov	r3, s16
 8006832:	4652      	mov	r2, sl
 8006834:	4631      	mov	r1, r6
 8006836:	4628      	mov	r0, r5
 8006838:	47b8      	blx	r7
 800683a:	3001      	adds	r0, #1
 800683c:	f43f af09 	beq.w	8006652 <_printf_float+0xc2>
 8006840:	f04f 0900 	mov.w	r9, #0
 8006844:	f104 0a1a 	add.w	sl, r4, #26
 8006848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800684a:	425b      	negs	r3, r3
 800684c:	454b      	cmp	r3, r9
 800684e:	dc01      	bgt.n	8006854 <_printf_float+0x2c4>
 8006850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006852:	e792      	b.n	800677a <_printf_float+0x1ea>
 8006854:	2301      	movs	r3, #1
 8006856:	4652      	mov	r2, sl
 8006858:	4631      	mov	r1, r6
 800685a:	4628      	mov	r0, r5
 800685c:	47b8      	blx	r7
 800685e:	3001      	adds	r0, #1
 8006860:	f43f aef7 	beq.w	8006652 <_printf_float+0xc2>
 8006864:	f109 0901 	add.w	r9, r9, #1
 8006868:	e7ee      	b.n	8006848 <_printf_float+0x2b8>
 800686a:	bf00      	nop
 800686c:	7fefffff 	.word	0x7fefffff
 8006870:	08008f70 	.word	0x08008f70
 8006874:	08008f74 	.word	0x08008f74
 8006878:	08008f7c 	.word	0x08008f7c
 800687c:	08008f78 	.word	0x08008f78
 8006880:	08008f80 	.word	0x08008f80
 8006884:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006886:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006888:	429a      	cmp	r2, r3
 800688a:	bfa8      	it	ge
 800688c:	461a      	movge	r2, r3
 800688e:	2a00      	cmp	r2, #0
 8006890:	4691      	mov	r9, r2
 8006892:	dc37      	bgt.n	8006904 <_printf_float+0x374>
 8006894:	f04f 0b00 	mov.w	fp, #0
 8006898:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800689c:	f104 021a 	add.w	r2, r4, #26
 80068a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068a2:	9305      	str	r3, [sp, #20]
 80068a4:	eba3 0309 	sub.w	r3, r3, r9
 80068a8:	455b      	cmp	r3, fp
 80068aa:	dc33      	bgt.n	8006914 <_printf_float+0x384>
 80068ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068b0:	429a      	cmp	r2, r3
 80068b2:	db3b      	blt.n	800692c <_printf_float+0x39c>
 80068b4:	6823      	ldr	r3, [r4, #0]
 80068b6:	07da      	lsls	r2, r3, #31
 80068b8:	d438      	bmi.n	800692c <_printf_float+0x39c>
 80068ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068bc:	9b05      	ldr	r3, [sp, #20]
 80068be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	eba2 0901 	sub.w	r9, r2, r1
 80068c6:	4599      	cmp	r9, r3
 80068c8:	bfa8      	it	ge
 80068ca:	4699      	movge	r9, r3
 80068cc:	f1b9 0f00 	cmp.w	r9, #0
 80068d0:	dc35      	bgt.n	800693e <_printf_float+0x3ae>
 80068d2:	f04f 0800 	mov.w	r8, #0
 80068d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068da:	f104 0a1a 	add.w	sl, r4, #26
 80068de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068e2:	1a9b      	subs	r3, r3, r2
 80068e4:	eba3 0309 	sub.w	r3, r3, r9
 80068e8:	4543      	cmp	r3, r8
 80068ea:	f77f af79 	ble.w	80067e0 <_printf_float+0x250>
 80068ee:	2301      	movs	r3, #1
 80068f0:	4652      	mov	r2, sl
 80068f2:	4631      	mov	r1, r6
 80068f4:	4628      	mov	r0, r5
 80068f6:	47b8      	blx	r7
 80068f8:	3001      	adds	r0, #1
 80068fa:	f43f aeaa 	beq.w	8006652 <_printf_float+0xc2>
 80068fe:	f108 0801 	add.w	r8, r8, #1
 8006902:	e7ec      	b.n	80068de <_printf_float+0x34e>
 8006904:	4613      	mov	r3, r2
 8006906:	4631      	mov	r1, r6
 8006908:	4642      	mov	r2, r8
 800690a:	4628      	mov	r0, r5
 800690c:	47b8      	blx	r7
 800690e:	3001      	adds	r0, #1
 8006910:	d1c0      	bne.n	8006894 <_printf_float+0x304>
 8006912:	e69e      	b.n	8006652 <_printf_float+0xc2>
 8006914:	2301      	movs	r3, #1
 8006916:	4631      	mov	r1, r6
 8006918:	4628      	mov	r0, r5
 800691a:	9205      	str	r2, [sp, #20]
 800691c:	47b8      	blx	r7
 800691e:	3001      	adds	r0, #1
 8006920:	f43f ae97 	beq.w	8006652 <_printf_float+0xc2>
 8006924:	9a05      	ldr	r2, [sp, #20]
 8006926:	f10b 0b01 	add.w	fp, fp, #1
 800692a:	e7b9      	b.n	80068a0 <_printf_float+0x310>
 800692c:	ee18 3a10 	vmov	r3, s16
 8006930:	4652      	mov	r2, sl
 8006932:	4631      	mov	r1, r6
 8006934:	4628      	mov	r0, r5
 8006936:	47b8      	blx	r7
 8006938:	3001      	adds	r0, #1
 800693a:	d1be      	bne.n	80068ba <_printf_float+0x32a>
 800693c:	e689      	b.n	8006652 <_printf_float+0xc2>
 800693e:	9a05      	ldr	r2, [sp, #20]
 8006940:	464b      	mov	r3, r9
 8006942:	4442      	add	r2, r8
 8006944:	4631      	mov	r1, r6
 8006946:	4628      	mov	r0, r5
 8006948:	47b8      	blx	r7
 800694a:	3001      	adds	r0, #1
 800694c:	d1c1      	bne.n	80068d2 <_printf_float+0x342>
 800694e:	e680      	b.n	8006652 <_printf_float+0xc2>
 8006950:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006952:	2a01      	cmp	r2, #1
 8006954:	dc01      	bgt.n	800695a <_printf_float+0x3ca>
 8006956:	07db      	lsls	r3, r3, #31
 8006958:	d538      	bpl.n	80069cc <_printf_float+0x43c>
 800695a:	2301      	movs	r3, #1
 800695c:	4642      	mov	r2, r8
 800695e:	4631      	mov	r1, r6
 8006960:	4628      	mov	r0, r5
 8006962:	47b8      	blx	r7
 8006964:	3001      	adds	r0, #1
 8006966:	f43f ae74 	beq.w	8006652 <_printf_float+0xc2>
 800696a:	ee18 3a10 	vmov	r3, s16
 800696e:	4652      	mov	r2, sl
 8006970:	4631      	mov	r1, r6
 8006972:	4628      	mov	r0, r5
 8006974:	47b8      	blx	r7
 8006976:	3001      	adds	r0, #1
 8006978:	f43f ae6b 	beq.w	8006652 <_printf_float+0xc2>
 800697c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006980:	2200      	movs	r2, #0
 8006982:	2300      	movs	r3, #0
 8006984:	f7fa f8a0 	bl	8000ac8 <__aeabi_dcmpeq>
 8006988:	b9d8      	cbnz	r0, 80069c2 <_printf_float+0x432>
 800698a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800698c:	f108 0201 	add.w	r2, r8, #1
 8006990:	3b01      	subs	r3, #1
 8006992:	4631      	mov	r1, r6
 8006994:	4628      	mov	r0, r5
 8006996:	47b8      	blx	r7
 8006998:	3001      	adds	r0, #1
 800699a:	d10e      	bne.n	80069ba <_printf_float+0x42a>
 800699c:	e659      	b.n	8006652 <_printf_float+0xc2>
 800699e:	2301      	movs	r3, #1
 80069a0:	4652      	mov	r2, sl
 80069a2:	4631      	mov	r1, r6
 80069a4:	4628      	mov	r0, r5
 80069a6:	47b8      	blx	r7
 80069a8:	3001      	adds	r0, #1
 80069aa:	f43f ae52 	beq.w	8006652 <_printf_float+0xc2>
 80069ae:	f108 0801 	add.w	r8, r8, #1
 80069b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069b4:	3b01      	subs	r3, #1
 80069b6:	4543      	cmp	r3, r8
 80069b8:	dcf1      	bgt.n	800699e <_printf_float+0x40e>
 80069ba:	464b      	mov	r3, r9
 80069bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80069c0:	e6dc      	b.n	800677c <_printf_float+0x1ec>
 80069c2:	f04f 0800 	mov.w	r8, #0
 80069c6:	f104 0a1a 	add.w	sl, r4, #26
 80069ca:	e7f2      	b.n	80069b2 <_printf_float+0x422>
 80069cc:	2301      	movs	r3, #1
 80069ce:	4642      	mov	r2, r8
 80069d0:	e7df      	b.n	8006992 <_printf_float+0x402>
 80069d2:	2301      	movs	r3, #1
 80069d4:	464a      	mov	r2, r9
 80069d6:	4631      	mov	r1, r6
 80069d8:	4628      	mov	r0, r5
 80069da:	47b8      	blx	r7
 80069dc:	3001      	adds	r0, #1
 80069de:	f43f ae38 	beq.w	8006652 <_printf_float+0xc2>
 80069e2:	f108 0801 	add.w	r8, r8, #1
 80069e6:	68e3      	ldr	r3, [r4, #12]
 80069e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80069ea:	1a5b      	subs	r3, r3, r1
 80069ec:	4543      	cmp	r3, r8
 80069ee:	dcf0      	bgt.n	80069d2 <_printf_float+0x442>
 80069f0:	e6fa      	b.n	80067e8 <_printf_float+0x258>
 80069f2:	f04f 0800 	mov.w	r8, #0
 80069f6:	f104 0919 	add.w	r9, r4, #25
 80069fa:	e7f4      	b.n	80069e6 <_printf_float+0x456>

080069fc <_printf_common>:
 80069fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a00:	4616      	mov	r6, r2
 8006a02:	4699      	mov	r9, r3
 8006a04:	688a      	ldr	r2, [r1, #8]
 8006a06:	690b      	ldr	r3, [r1, #16]
 8006a08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	bfb8      	it	lt
 8006a10:	4613      	movlt	r3, r2
 8006a12:	6033      	str	r3, [r6, #0]
 8006a14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a18:	4607      	mov	r7, r0
 8006a1a:	460c      	mov	r4, r1
 8006a1c:	b10a      	cbz	r2, 8006a22 <_printf_common+0x26>
 8006a1e:	3301      	adds	r3, #1
 8006a20:	6033      	str	r3, [r6, #0]
 8006a22:	6823      	ldr	r3, [r4, #0]
 8006a24:	0699      	lsls	r1, r3, #26
 8006a26:	bf42      	ittt	mi
 8006a28:	6833      	ldrmi	r3, [r6, #0]
 8006a2a:	3302      	addmi	r3, #2
 8006a2c:	6033      	strmi	r3, [r6, #0]
 8006a2e:	6825      	ldr	r5, [r4, #0]
 8006a30:	f015 0506 	ands.w	r5, r5, #6
 8006a34:	d106      	bne.n	8006a44 <_printf_common+0x48>
 8006a36:	f104 0a19 	add.w	sl, r4, #25
 8006a3a:	68e3      	ldr	r3, [r4, #12]
 8006a3c:	6832      	ldr	r2, [r6, #0]
 8006a3e:	1a9b      	subs	r3, r3, r2
 8006a40:	42ab      	cmp	r3, r5
 8006a42:	dc26      	bgt.n	8006a92 <_printf_common+0x96>
 8006a44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a48:	1e13      	subs	r3, r2, #0
 8006a4a:	6822      	ldr	r2, [r4, #0]
 8006a4c:	bf18      	it	ne
 8006a4e:	2301      	movne	r3, #1
 8006a50:	0692      	lsls	r2, r2, #26
 8006a52:	d42b      	bmi.n	8006aac <_printf_common+0xb0>
 8006a54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a58:	4649      	mov	r1, r9
 8006a5a:	4638      	mov	r0, r7
 8006a5c:	47c0      	blx	r8
 8006a5e:	3001      	adds	r0, #1
 8006a60:	d01e      	beq.n	8006aa0 <_printf_common+0xa4>
 8006a62:	6823      	ldr	r3, [r4, #0]
 8006a64:	68e5      	ldr	r5, [r4, #12]
 8006a66:	6832      	ldr	r2, [r6, #0]
 8006a68:	f003 0306 	and.w	r3, r3, #6
 8006a6c:	2b04      	cmp	r3, #4
 8006a6e:	bf08      	it	eq
 8006a70:	1aad      	subeq	r5, r5, r2
 8006a72:	68a3      	ldr	r3, [r4, #8]
 8006a74:	6922      	ldr	r2, [r4, #16]
 8006a76:	bf0c      	ite	eq
 8006a78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a7c:	2500      	movne	r5, #0
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	bfc4      	itt	gt
 8006a82:	1a9b      	subgt	r3, r3, r2
 8006a84:	18ed      	addgt	r5, r5, r3
 8006a86:	2600      	movs	r6, #0
 8006a88:	341a      	adds	r4, #26
 8006a8a:	42b5      	cmp	r5, r6
 8006a8c:	d11a      	bne.n	8006ac4 <_printf_common+0xc8>
 8006a8e:	2000      	movs	r0, #0
 8006a90:	e008      	b.n	8006aa4 <_printf_common+0xa8>
 8006a92:	2301      	movs	r3, #1
 8006a94:	4652      	mov	r2, sl
 8006a96:	4649      	mov	r1, r9
 8006a98:	4638      	mov	r0, r7
 8006a9a:	47c0      	blx	r8
 8006a9c:	3001      	adds	r0, #1
 8006a9e:	d103      	bne.n	8006aa8 <_printf_common+0xac>
 8006aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8006aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aa8:	3501      	adds	r5, #1
 8006aaa:	e7c6      	b.n	8006a3a <_printf_common+0x3e>
 8006aac:	18e1      	adds	r1, r4, r3
 8006aae:	1c5a      	adds	r2, r3, #1
 8006ab0:	2030      	movs	r0, #48	; 0x30
 8006ab2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ab6:	4422      	add	r2, r4
 8006ab8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006abc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ac0:	3302      	adds	r3, #2
 8006ac2:	e7c7      	b.n	8006a54 <_printf_common+0x58>
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	4622      	mov	r2, r4
 8006ac8:	4649      	mov	r1, r9
 8006aca:	4638      	mov	r0, r7
 8006acc:	47c0      	blx	r8
 8006ace:	3001      	adds	r0, #1
 8006ad0:	d0e6      	beq.n	8006aa0 <_printf_common+0xa4>
 8006ad2:	3601      	adds	r6, #1
 8006ad4:	e7d9      	b.n	8006a8a <_printf_common+0x8e>
	...

08006ad8 <_printf_i>:
 8006ad8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006adc:	460c      	mov	r4, r1
 8006ade:	4691      	mov	r9, r2
 8006ae0:	7e27      	ldrb	r7, [r4, #24]
 8006ae2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006ae4:	2f78      	cmp	r7, #120	; 0x78
 8006ae6:	4680      	mov	r8, r0
 8006ae8:	469a      	mov	sl, r3
 8006aea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006aee:	d807      	bhi.n	8006b00 <_printf_i+0x28>
 8006af0:	2f62      	cmp	r7, #98	; 0x62
 8006af2:	d80a      	bhi.n	8006b0a <_printf_i+0x32>
 8006af4:	2f00      	cmp	r7, #0
 8006af6:	f000 80d8 	beq.w	8006caa <_printf_i+0x1d2>
 8006afa:	2f58      	cmp	r7, #88	; 0x58
 8006afc:	f000 80a3 	beq.w	8006c46 <_printf_i+0x16e>
 8006b00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006b04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b08:	e03a      	b.n	8006b80 <_printf_i+0xa8>
 8006b0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b0e:	2b15      	cmp	r3, #21
 8006b10:	d8f6      	bhi.n	8006b00 <_printf_i+0x28>
 8006b12:	a001      	add	r0, pc, #4	; (adr r0, 8006b18 <_printf_i+0x40>)
 8006b14:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006b18:	08006b71 	.word	0x08006b71
 8006b1c:	08006b85 	.word	0x08006b85
 8006b20:	08006b01 	.word	0x08006b01
 8006b24:	08006b01 	.word	0x08006b01
 8006b28:	08006b01 	.word	0x08006b01
 8006b2c:	08006b01 	.word	0x08006b01
 8006b30:	08006b85 	.word	0x08006b85
 8006b34:	08006b01 	.word	0x08006b01
 8006b38:	08006b01 	.word	0x08006b01
 8006b3c:	08006b01 	.word	0x08006b01
 8006b40:	08006b01 	.word	0x08006b01
 8006b44:	08006c91 	.word	0x08006c91
 8006b48:	08006bb5 	.word	0x08006bb5
 8006b4c:	08006c73 	.word	0x08006c73
 8006b50:	08006b01 	.word	0x08006b01
 8006b54:	08006b01 	.word	0x08006b01
 8006b58:	08006cb3 	.word	0x08006cb3
 8006b5c:	08006b01 	.word	0x08006b01
 8006b60:	08006bb5 	.word	0x08006bb5
 8006b64:	08006b01 	.word	0x08006b01
 8006b68:	08006b01 	.word	0x08006b01
 8006b6c:	08006c7b 	.word	0x08006c7b
 8006b70:	680b      	ldr	r3, [r1, #0]
 8006b72:	1d1a      	adds	r2, r3, #4
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	600a      	str	r2, [r1, #0]
 8006b78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006b7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b80:	2301      	movs	r3, #1
 8006b82:	e0a3      	b.n	8006ccc <_printf_i+0x1f4>
 8006b84:	6825      	ldr	r5, [r4, #0]
 8006b86:	6808      	ldr	r0, [r1, #0]
 8006b88:	062e      	lsls	r6, r5, #24
 8006b8a:	f100 0304 	add.w	r3, r0, #4
 8006b8e:	d50a      	bpl.n	8006ba6 <_printf_i+0xce>
 8006b90:	6805      	ldr	r5, [r0, #0]
 8006b92:	600b      	str	r3, [r1, #0]
 8006b94:	2d00      	cmp	r5, #0
 8006b96:	da03      	bge.n	8006ba0 <_printf_i+0xc8>
 8006b98:	232d      	movs	r3, #45	; 0x2d
 8006b9a:	426d      	negs	r5, r5
 8006b9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ba0:	485e      	ldr	r0, [pc, #376]	; (8006d1c <_printf_i+0x244>)
 8006ba2:	230a      	movs	r3, #10
 8006ba4:	e019      	b.n	8006bda <_printf_i+0x102>
 8006ba6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006baa:	6805      	ldr	r5, [r0, #0]
 8006bac:	600b      	str	r3, [r1, #0]
 8006bae:	bf18      	it	ne
 8006bb0:	b22d      	sxthne	r5, r5
 8006bb2:	e7ef      	b.n	8006b94 <_printf_i+0xbc>
 8006bb4:	680b      	ldr	r3, [r1, #0]
 8006bb6:	6825      	ldr	r5, [r4, #0]
 8006bb8:	1d18      	adds	r0, r3, #4
 8006bba:	6008      	str	r0, [r1, #0]
 8006bbc:	0628      	lsls	r0, r5, #24
 8006bbe:	d501      	bpl.n	8006bc4 <_printf_i+0xec>
 8006bc0:	681d      	ldr	r5, [r3, #0]
 8006bc2:	e002      	b.n	8006bca <_printf_i+0xf2>
 8006bc4:	0669      	lsls	r1, r5, #25
 8006bc6:	d5fb      	bpl.n	8006bc0 <_printf_i+0xe8>
 8006bc8:	881d      	ldrh	r5, [r3, #0]
 8006bca:	4854      	ldr	r0, [pc, #336]	; (8006d1c <_printf_i+0x244>)
 8006bcc:	2f6f      	cmp	r7, #111	; 0x6f
 8006bce:	bf0c      	ite	eq
 8006bd0:	2308      	moveq	r3, #8
 8006bd2:	230a      	movne	r3, #10
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006bda:	6866      	ldr	r6, [r4, #4]
 8006bdc:	60a6      	str	r6, [r4, #8]
 8006bde:	2e00      	cmp	r6, #0
 8006be0:	bfa2      	ittt	ge
 8006be2:	6821      	ldrge	r1, [r4, #0]
 8006be4:	f021 0104 	bicge.w	r1, r1, #4
 8006be8:	6021      	strge	r1, [r4, #0]
 8006bea:	b90d      	cbnz	r5, 8006bf0 <_printf_i+0x118>
 8006bec:	2e00      	cmp	r6, #0
 8006bee:	d04d      	beq.n	8006c8c <_printf_i+0x1b4>
 8006bf0:	4616      	mov	r6, r2
 8006bf2:	fbb5 f1f3 	udiv	r1, r5, r3
 8006bf6:	fb03 5711 	mls	r7, r3, r1, r5
 8006bfa:	5dc7      	ldrb	r7, [r0, r7]
 8006bfc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c00:	462f      	mov	r7, r5
 8006c02:	42bb      	cmp	r3, r7
 8006c04:	460d      	mov	r5, r1
 8006c06:	d9f4      	bls.n	8006bf2 <_printf_i+0x11a>
 8006c08:	2b08      	cmp	r3, #8
 8006c0a:	d10b      	bne.n	8006c24 <_printf_i+0x14c>
 8006c0c:	6823      	ldr	r3, [r4, #0]
 8006c0e:	07df      	lsls	r7, r3, #31
 8006c10:	d508      	bpl.n	8006c24 <_printf_i+0x14c>
 8006c12:	6923      	ldr	r3, [r4, #16]
 8006c14:	6861      	ldr	r1, [r4, #4]
 8006c16:	4299      	cmp	r1, r3
 8006c18:	bfde      	ittt	le
 8006c1a:	2330      	movle	r3, #48	; 0x30
 8006c1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c20:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c24:	1b92      	subs	r2, r2, r6
 8006c26:	6122      	str	r2, [r4, #16]
 8006c28:	f8cd a000 	str.w	sl, [sp]
 8006c2c:	464b      	mov	r3, r9
 8006c2e:	aa03      	add	r2, sp, #12
 8006c30:	4621      	mov	r1, r4
 8006c32:	4640      	mov	r0, r8
 8006c34:	f7ff fee2 	bl	80069fc <_printf_common>
 8006c38:	3001      	adds	r0, #1
 8006c3a:	d14c      	bne.n	8006cd6 <_printf_i+0x1fe>
 8006c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c40:	b004      	add	sp, #16
 8006c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c46:	4835      	ldr	r0, [pc, #212]	; (8006d1c <_printf_i+0x244>)
 8006c48:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006c4c:	6823      	ldr	r3, [r4, #0]
 8006c4e:	680e      	ldr	r6, [r1, #0]
 8006c50:	061f      	lsls	r7, r3, #24
 8006c52:	f856 5b04 	ldr.w	r5, [r6], #4
 8006c56:	600e      	str	r6, [r1, #0]
 8006c58:	d514      	bpl.n	8006c84 <_printf_i+0x1ac>
 8006c5a:	07d9      	lsls	r1, r3, #31
 8006c5c:	bf44      	itt	mi
 8006c5e:	f043 0320 	orrmi.w	r3, r3, #32
 8006c62:	6023      	strmi	r3, [r4, #0]
 8006c64:	b91d      	cbnz	r5, 8006c6e <_printf_i+0x196>
 8006c66:	6823      	ldr	r3, [r4, #0]
 8006c68:	f023 0320 	bic.w	r3, r3, #32
 8006c6c:	6023      	str	r3, [r4, #0]
 8006c6e:	2310      	movs	r3, #16
 8006c70:	e7b0      	b.n	8006bd4 <_printf_i+0xfc>
 8006c72:	6823      	ldr	r3, [r4, #0]
 8006c74:	f043 0320 	orr.w	r3, r3, #32
 8006c78:	6023      	str	r3, [r4, #0]
 8006c7a:	2378      	movs	r3, #120	; 0x78
 8006c7c:	4828      	ldr	r0, [pc, #160]	; (8006d20 <_printf_i+0x248>)
 8006c7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c82:	e7e3      	b.n	8006c4c <_printf_i+0x174>
 8006c84:	065e      	lsls	r6, r3, #25
 8006c86:	bf48      	it	mi
 8006c88:	b2ad      	uxthmi	r5, r5
 8006c8a:	e7e6      	b.n	8006c5a <_printf_i+0x182>
 8006c8c:	4616      	mov	r6, r2
 8006c8e:	e7bb      	b.n	8006c08 <_printf_i+0x130>
 8006c90:	680b      	ldr	r3, [r1, #0]
 8006c92:	6826      	ldr	r6, [r4, #0]
 8006c94:	6960      	ldr	r0, [r4, #20]
 8006c96:	1d1d      	adds	r5, r3, #4
 8006c98:	600d      	str	r5, [r1, #0]
 8006c9a:	0635      	lsls	r5, r6, #24
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	d501      	bpl.n	8006ca4 <_printf_i+0x1cc>
 8006ca0:	6018      	str	r0, [r3, #0]
 8006ca2:	e002      	b.n	8006caa <_printf_i+0x1d2>
 8006ca4:	0671      	lsls	r1, r6, #25
 8006ca6:	d5fb      	bpl.n	8006ca0 <_printf_i+0x1c8>
 8006ca8:	8018      	strh	r0, [r3, #0]
 8006caa:	2300      	movs	r3, #0
 8006cac:	6123      	str	r3, [r4, #16]
 8006cae:	4616      	mov	r6, r2
 8006cb0:	e7ba      	b.n	8006c28 <_printf_i+0x150>
 8006cb2:	680b      	ldr	r3, [r1, #0]
 8006cb4:	1d1a      	adds	r2, r3, #4
 8006cb6:	600a      	str	r2, [r1, #0]
 8006cb8:	681e      	ldr	r6, [r3, #0]
 8006cba:	6862      	ldr	r2, [r4, #4]
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	4630      	mov	r0, r6
 8006cc0:	f7f9 fa8e 	bl	80001e0 <memchr>
 8006cc4:	b108      	cbz	r0, 8006cca <_printf_i+0x1f2>
 8006cc6:	1b80      	subs	r0, r0, r6
 8006cc8:	6060      	str	r0, [r4, #4]
 8006cca:	6863      	ldr	r3, [r4, #4]
 8006ccc:	6123      	str	r3, [r4, #16]
 8006cce:	2300      	movs	r3, #0
 8006cd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cd4:	e7a8      	b.n	8006c28 <_printf_i+0x150>
 8006cd6:	6923      	ldr	r3, [r4, #16]
 8006cd8:	4632      	mov	r2, r6
 8006cda:	4649      	mov	r1, r9
 8006cdc:	4640      	mov	r0, r8
 8006cde:	47d0      	blx	sl
 8006ce0:	3001      	adds	r0, #1
 8006ce2:	d0ab      	beq.n	8006c3c <_printf_i+0x164>
 8006ce4:	6823      	ldr	r3, [r4, #0]
 8006ce6:	079b      	lsls	r3, r3, #30
 8006ce8:	d413      	bmi.n	8006d12 <_printf_i+0x23a>
 8006cea:	68e0      	ldr	r0, [r4, #12]
 8006cec:	9b03      	ldr	r3, [sp, #12]
 8006cee:	4298      	cmp	r0, r3
 8006cf0:	bfb8      	it	lt
 8006cf2:	4618      	movlt	r0, r3
 8006cf4:	e7a4      	b.n	8006c40 <_printf_i+0x168>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	4632      	mov	r2, r6
 8006cfa:	4649      	mov	r1, r9
 8006cfc:	4640      	mov	r0, r8
 8006cfe:	47d0      	blx	sl
 8006d00:	3001      	adds	r0, #1
 8006d02:	d09b      	beq.n	8006c3c <_printf_i+0x164>
 8006d04:	3501      	adds	r5, #1
 8006d06:	68e3      	ldr	r3, [r4, #12]
 8006d08:	9903      	ldr	r1, [sp, #12]
 8006d0a:	1a5b      	subs	r3, r3, r1
 8006d0c:	42ab      	cmp	r3, r5
 8006d0e:	dcf2      	bgt.n	8006cf6 <_printf_i+0x21e>
 8006d10:	e7eb      	b.n	8006cea <_printf_i+0x212>
 8006d12:	2500      	movs	r5, #0
 8006d14:	f104 0619 	add.w	r6, r4, #25
 8006d18:	e7f5      	b.n	8006d06 <_printf_i+0x22e>
 8006d1a:	bf00      	nop
 8006d1c:	08008f82 	.word	0x08008f82
 8006d20:	08008f93 	.word	0x08008f93

08006d24 <iprintf>:
 8006d24:	b40f      	push	{r0, r1, r2, r3}
 8006d26:	4b0a      	ldr	r3, [pc, #40]	; (8006d50 <iprintf+0x2c>)
 8006d28:	b513      	push	{r0, r1, r4, lr}
 8006d2a:	681c      	ldr	r4, [r3, #0]
 8006d2c:	b124      	cbz	r4, 8006d38 <iprintf+0x14>
 8006d2e:	69a3      	ldr	r3, [r4, #24]
 8006d30:	b913      	cbnz	r3, 8006d38 <iprintf+0x14>
 8006d32:	4620      	mov	r0, r4
 8006d34:	f000 fee0 	bl	8007af8 <__sinit>
 8006d38:	ab05      	add	r3, sp, #20
 8006d3a:	9a04      	ldr	r2, [sp, #16]
 8006d3c:	68a1      	ldr	r1, [r4, #8]
 8006d3e:	9301      	str	r3, [sp, #4]
 8006d40:	4620      	mov	r0, r4
 8006d42:	f001 fbf7 	bl	8008534 <_vfiprintf_r>
 8006d46:	b002      	add	sp, #8
 8006d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d4c:	b004      	add	sp, #16
 8006d4e:	4770      	bx	lr
 8006d50:	2000000c 	.word	0x2000000c

08006d54 <quorem>:
 8006d54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d58:	6903      	ldr	r3, [r0, #16]
 8006d5a:	690c      	ldr	r4, [r1, #16]
 8006d5c:	42a3      	cmp	r3, r4
 8006d5e:	4607      	mov	r7, r0
 8006d60:	f2c0 8081 	blt.w	8006e66 <quorem+0x112>
 8006d64:	3c01      	subs	r4, #1
 8006d66:	f101 0814 	add.w	r8, r1, #20
 8006d6a:	f100 0514 	add.w	r5, r0, #20
 8006d6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d72:	9301      	str	r3, [sp, #4]
 8006d74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006d84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d88:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d8c:	d331      	bcc.n	8006df2 <quorem+0x9e>
 8006d8e:	f04f 0e00 	mov.w	lr, #0
 8006d92:	4640      	mov	r0, r8
 8006d94:	46ac      	mov	ip, r5
 8006d96:	46f2      	mov	sl, lr
 8006d98:	f850 2b04 	ldr.w	r2, [r0], #4
 8006d9c:	b293      	uxth	r3, r2
 8006d9e:	fb06 e303 	mla	r3, r6, r3, lr
 8006da2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	ebaa 0303 	sub.w	r3, sl, r3
 8006dac:	0c12      	lsrs	r2, r2, #16
 8006dae:	f8dc a000 	ldr.w	sl, [ip]
 8006db2:	fb06 e202 	mla	r2, r6, r2, lr
 8006db6:	fa13 f38a 	uxtah	r3, r3, sl
 8006dba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006dbe:	fa1f fa82 	uxth.w	sl, r2
 8006dc2:	f8dc 2000 	ldr.w	r2, [ip]
 8006dc6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006dca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006dd4:	4581      	cmp	r9, r0
 8006dd6:	f84c 3b04 	str.w	r3, [ip], #4
 8006dda:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006dde:	d2db      	bcs.n	8006d98 <quorem+0x44>
 8006de0:	f855 300b 	ldr.w	r3, [r5, fp]
 8006de4:	b92b      	cbnz	r3, 8006df2 <quorem+0x9e>
 8006de6:	9b01      	ldr	r3, [sp, #4]
 8006de8:	3b04      	subs	r3, #4
 8006dea:	429d      	cmp	r5, r3
 8006dec:	461a      	mov	r2, r3
 8006dee:	d32e      	bcc.n	8006e4e <quorem+0xfa>
 8006df0:	613c      	str	r4, [r7, #16]
 8006df2:	4638      	mov	r0, r7
 8006df4:	f001 f9ba 	bl	800816c <__mcmp>
 8006df8:	2800      	cmp	r0, #0
 8006dfa:	db24      	blt.n	8006e46 <quorem+0xf2>
 8006dfc:	3601      	adds	r6, #1
 8006dfe:	4628      	mov	r0, r5
 8006e00:	f04f 0c00 	mov.w	ip, #0
 8006e04:	f858 2b04 	ldr.w	r2, [r8], #4
 8006e08:	f8d0 e000 	ldr.w	lr, [r0]
 8006e0c:	b293      	uxth	r3, r2
 8006e0e:	ebac 0303 	sub.w	r3, ip, r3
 8006e12:	0c12      	lsrs	r2, r2, #16
 8006e14:	fa13 f38e 	uxtah	r3, r3, lr
 8006e18:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006e1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e26:	45c1      	cmp	r9, r8
 8006e28:	f840 3b04 	str.w	r3, [r0], #4
 8006e2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006e30:	d2e8      	bcs.n	8006e04 <quorem+0xb0>
 8006e32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e3a:	b922      	cbnz	r2, 8006e46 <quorem+0xf2>
 8006e3c:	3b04      	subs	r3, #4
 8006e3e:	429d      	cmp	r5, r3
 8006e40:	461a      	mov	r2, r3
 8006e42:	d30a      	bcc.n	8006e5a <quorem+0x106>
 8006e44:	613c      	str	r4, [r7, #16]
 8006e46:	4630      	mov	r0, r6
 8006e48:	b003      	add	sp, #12
 8006e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e4e:	6812      	ldr	r2, [r2, #0]
 8006e50:	3b04      	subs	r3, #4
 8006e52:	2a00      	cmp	r2, #0
 8006e54:	d1cc      	bne.n	8006df0 <quorem+0x9c>
 8006e56:	3c01      	subs	r4, #1
 8006e58:	e7c7      	b.n	8006dea <quorem+0x96>
 8006e5a:	6812      	ldr	r2, [r2, #0]
 8006e5c:	3b04      	subs	r3, #4
 8006e5e:	2a00      	cmp	r2, #0
 8006e60:	d1f0      	bne.n	8006e44 <quorem+0xf0>
 8006e62:	3c01      	subs	r4, #1
 8006e64:	e7eb      	b.n	8006e3e <quorem+0xea>
 8006e66:	2000      	movs	r0, #0
 8006e68:	e7ee      	b.n	8006e48 <quorem+0xf4>
 8006e6a:	0000      	movs	r0, r0
 8006e6c:	0000      	movs	r0, r0
	...

08006e70 <_dtoa_r>:
 8006e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e74:	ed2d 8b02 	vpush	{d8}
 8006e78:	ec57 6b10 	vmov	r6, r7, d0
 8006e7c:	b095      	sub	sp, #84	; 0x54
 8006e7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006e80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006e84:	9105      	str	r1, [sp, #20]
 8006e86:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006e8a:	4604      	mov	r4, r0
 8006e8c:	9209      	str	r2, [sp, #36]	; 0x24
 8006e8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e90:	b975      	cbnz	r5, 8006eb0 <_dtoa_r+0x40>
 8006e92:	2010      	movs	r0, #16
 8006e94:	f000 fed6 	bl	8007c44 <malloc>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	6260      	str	r0, [r4, #36]	; 0x24
 8006e9c:	b920      	cbnz	r0, 8006ea8 <_dtoa_r+0x38>
 8006e9e:	4bb2      	ldr	r3, [pc, #712]	; (8007168 <_dtoa_r+0x2f8>)
 8006ea0:	21ea      	movs	r1, #234	; 0xea
 8006ea2:	48b2      	ldr	r0, [pc, #712]	; (800716c <_dtoa_r+0x2fc>)
 8006ea4:	f001 fd9c 	bl	80089e0 <__assert_func>
 8006ea8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006eac:	6005      	str	r5, [r0, #0]
 8006eae:	60c5      	str	r5, [r0, #12]
 8006eb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006eb2:	6819      	ldr	r1, [r3, #0]
 8006eb4:	b151      	cbz	r1, 8006ecc <_dtoa_r+0x5c>
 8006eb6:	685a      	ldr	r2, [r3, #4]
 8006eb8:	604a      	str	r2, [r1, #4]
 8006eba:	2301      	movs	r3, #1
 8006ebc:	4093      	lsls	r3, r2
 8006ebe:	608b      	str	r3, [r1, #8]
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	f000 ff15 	bl	8007cf0 <_Bfree>
 8006ec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ec8:	2200      	movs	r2, #0
 8006eca:	601a      	str	r2, [r3, #0]
 8006ecc:	1e3b      	subs	r3, r7, #0
 8006ece:	bfb9      	ittee	lt
 8006ed0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006ed4:	9303      	strlt	r3, [sp, #12]
 8006ed6:	2300      	movge	r3, #0
 8006ed8:	f8c8 3000 	strge.w	r3, [r8]
 8006edc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006ee0:	4ba3      	ldr	r3, [pc, #652]	; (8007170 <_dtoa_r+0x300>)
 8006ee2:	bfbc      	itt	lt
 8006ee4:	2201      	movlt	r2, #1
 8006ee6:	f8c8 2000 	strlt.w	r2, [r8]
 8006eea:	ea33 0309 	bics.w	r3, r3, r9
 8006eee:	d11b      	bne.n	8006f28 <_dtoa_r+0xb8>
 8006ef0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006ef2:	f242 730f 	movw	r3, #9999	; 0x270f
 8006ef6:	6013      	str	r3, [r2, #0]
 8006ef8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006efc:	4333      	orrs	r3, r6
 8006efe:	f000 857a 	beq.w	80079f6 <_dtoa_r+0xb86>
 8006f02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f04:	b963      	cbnz	r3, 8006f20 <_dtoa_r+0xb0>
 8006f06:	4b9b      	ldr	r3, [pc, #620]	; (8007174 <_dtoa_r+0x304>)
 8006f08:	e024      	b.n	8006f54 <_dtoa_r+0xe4>
 8006f0a:	4b9b      	ldr	r3, [pc, #620]	; (8007178 <_dtoa_r+0x308>)
 8006f0c:	9300      	str	r3, [sp, #0]
 8006f0e:	3308      	adds	r3, #8
 8006f10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006f12:	6013      	str	r3, [r2, #0]
 8006f14:	9800      	ldr	r0, [sp, #0]
 8006f16:	b015      	add	sp, #84	; 0x54
 8006f18:	ecbd 8b02 	vpop	{d8}
 8006f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f20:	4b94      	ldr	r3, [pc, #592]	; (8007174 <_dtoa_r+0x304>)
 8006f22:	9300      	str	r3, [sp, #0]
 8006f24:	3303      	adds	r3, #3
 8006f26:	e7f3      	b.n	8006f10 <_dtoa_r+0xa0>
 8006f28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	ec51 0b17 	vmov	r0, r1, d7
 8006f32:	2300      	movs	r3, #0
 8006f34:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006f38:	f7f9 fdc6 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f3c:	4680      	mov	r8, r0
 8006f3e:	b158      	cbz	r0, 8006f58 <_dtoa_r+0xe8>
 8006f40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006f42:	2301      	movs	r3, #1
 8006f44:	6013      	str	r3, [r2, #0]
 8006f46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f000 8551 	beq.w	80079f0 <_dtoa_r+0xb80>
 8006f4e:	488b      	ldr	r0, [pc, #556]	; (800717c <_dtoa_r+0x30c>)
 8006f50:	6018      	str	r0, [r3, #0]
 8006f52:	1e43      	subs	r3, r0, #1
 8006f54:	9300      	str	r3, [sp, #0]
 8006f56:	e7dd      	b.n	8006f14 <_dtoa_r+0xa4>
 8006f58:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006f5c:	aa12      	add	r2, sp, #72	; 0x48
 8006f5e:	a913      	add	r1, sp, #76	; 0x4c
 8006f60:	4620      	mov	r0, r4
 8006f62:	f001 f9a7 	bl	80082b4 <__d2b>
 8006f66:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006f6a:	4683      	mov	fp, r0
 8006f6c:	2d00      	cmp	r5, #0
 8006f6e:	d07c      	beq.n	800706a <_dtoa_r+0x1fa>
 8006f70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f72:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006f76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f7a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006f7e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006f82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006f86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006f8a:	4b7d      	ldr	r3, [pc, #500]	; (8007180 <_dtoa_r+0x310>)
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	4630      	mov	r0, r6
 8006f90:	4639      	mov	r1, r7
 8006f92:	f7f9 f979 	bl	8000288 <__aeabi_dsub>
 8006f96:	a36e      	add	r3, pc, #440	; (adr r3, 8007150 <_dtoa_r+0x2e0>)
 8006f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9c:	f7f9 fb2c 	bl	80005f8 <__aeabi_dmul>
 8006fa0:	a36d      	add	r3, pc, #436	; (adr r3, 8007158 <_dtoa_r+0x2e8>)
 8006fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa6:	f7f9 f971 	bl	800028c <__adddf3>
 8006faa:	4606      	mov	r6, r0
 8006fac:	4628      	mov	r0, r5
 8006fae:	460f      	mov	r7, r1
 8006fb0:	f7f9 fab8 	bl	8000524 <__aeabi_i2d>
 8006fb4:	a36a      	add	r3, pc, #424	; (adr r3, 8007160 <_dtoa_r+0x2f0>)
 8006fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fba:	f7f9 fb1d 	bl	80005f8 <__aeabi_dmul>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	4630      	mov	r0, r6
 8006fc4:	4639      	mov	r1, r7
 8006fc6:	f7f9 f961 	bl	800028c <__adddf3>
 8006fca:	4606      	mov	r6, r0
 8006fcc:	460f      	mov	r7, r1
 8006fce:	f7f9 fdc3 	bl	8000b58 <__aeabi_d2iz>
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	4682      	mov	sl, r0
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	4630      	mov	r0, r6
 8006fda:	4639      	mov	r1, r7
 8006fdc:	f7f9 fd7e 	bl	8000adc <__aeabi_dcmplt>
 8006fe0:	b148      	cbz	r0, 8006ff6 <_dtoa_r+0x186>
 8006fe2:	4650      	mov	r0, sl
 8006fe4:	f7f9 fa9e 	bl	8000524 <__aeabi_i2d>
 8006fe8:	4632      	mov	r2, r6
 8006fea:	463b      	mov	r3, r7
 8006fec:	f7f9 fd6c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ff0:	b908      	cbnz	r0, 8006ff6 <_dtoa_r+0x186>
 8006ff2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ff6:	f1ba 0f16 	cmp.w	sl, #22
 8006ffa:	d854      	bhi.n	80070a6 <_dtoa_r+0x236>
 8006ffc:	4b61      	ldr	r3, [pc, #388]	; (8007184 <_dtoa_r+0x314>)
 8006ffe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007006:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800700a:	f7f9 fd67 	bl	8000adc <__aeabi_dcmplt>
 800700e:	2800      	cmp	r0, #0
 8007010:	d04b      	beq.n	80070aa <_dtoa_r+0x23a>
 8007012:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007016:	2300      	movs	r3, #0
 8007018:	930e      	str	r3, [sp, #56]	; 0x38
 800701a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800701c:	1b5d      	subs	r5, r3, r5
 800701e:	1e6b      	subs	r3, r5, #1
 8007020:	9304      	str	r3, [sp, #16]
 8007022:	bf43      	ittte	mi
 8007024:	2300      	movmi	r3, #0
 8007026:	f1c5 0801 	rsbmi	r8, r5, #1
 800702a:	9304      	strmi	r3, [sp, #16]
 800702c:	f04f 0800 	movpl.w	r8, #0
 8007030:	f1ba 0f00 	cmp.w	sl, #0
 8007034:	db3b      	blt.n	80070ae <_dtoa_r+0x23e>
 8007036:	9b04      	ldr	r3, [sp, #16]
 8007038:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800703c:	4453      	add	r3, sl
 800703e:	9304      	str	r3, [sp, #16]
 8007040:	2300      	movs	r3, #0
 8007042:	9306      	str	r3, [sp, #24]
 8007044:	9b05      	ldr	r3, [sp, #20]
 8007046:	2b09      	cmp	r3, #9
 8007048:	d869      	bhi.n	800711e <_dtoa_r+0x2ae>
 800704a:	2b05      	cmp	r3, #5
 800704c:	bfc4      	itt	gt
 800704e:	3b04      	subgt	r3, #4
 8007050:	9305      	strgt	r3, [sp, #20]
 8007052:	9b05      	ldr	r3, [sp, #20]
 8007054:	f1a3 0302 	sub.w	r3, r3, #2
 8007058:	bfcc      	ite	gt
 800705a:	2500      	movgt	r5, #0
 800705c:	2501      	movle	r5, #1
 800705e:	2b03      	cmp	r3, #3
 8007060:	d869      	bhi.n	8007136 <_dtoa_r+0x2c6>
 8007062:	e8df f003 	tbb	[pc, r3]
 8007066:	4e2c      	.short	0x4e2c
 8007068:	5a4c      	.short	0x5a4c
 800706a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800706e:	441d      	add	r5, r3
 8007070:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007074:	2b20      	cmp	r3, #32
 8007076:	bfc1      	itttt	gt
 8007078:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800707c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007080:	fa09 f303 	lslgt.w	r3, r9, r3
 8007084:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007088:	bfda      	itte	le
 800708a:	f1c3 0320 	rsble	r3, r3, #32
 800708e:	fa06 f003 	lslle.w	r0, r6, r3
 8007092:	4318      	orrgt	r0, r3
 8007094:	f7f9 fa36 	bl	8000504 <__aeabi_ui2d>
 8007098:	2301      	movs	r3, #1
 800709a:	4606      	mov	r6, r0
 800709c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80070a0:	3d01      	subs	r5, #1
 80070a2:	9310      	str	r3, [sp, #64]	; 0x40
 80070a4:	e771      	b.n	8006f8a <_dtoa_r+0x11a>
 80070a6:	2301      	movs	r3, #1
 80070a8:	e7b6      	b.n	8007018 <_dtoa_r+0x1a8>
 80070aa:	900e      	str	r0, [sp, #56]	; 0x38
 80070ac:	e7b5      	b.n	800701a <_dtoa_r+0x1aa>
 80070ae:	f1ca 0300 	rsb	r3, sl, #0
 80070b2:	9306      	str	r3, [sp, #24]
 80070b4:	2300      	movs	r3, #0
 80070b6:	eba8 080a 	sub.w	r8, r8, sl
 80070ba:	930d      	str	r3, [sp, #52]	; 0x34
 80070bc:	e7c2      	b.n	8007044 <_dtoa_r+0x1d4>
 80070be:	2300      	movs	r3, #0
 80070c0:	9308      	str	r3, [sp, #32]
 80070c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	dc39      	bgt.n	800713c <_dtoa_r+0x2cc>
 80070c8:	f04f 0901 	mov.w	r9, #1
 80070cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80070d0:	464b      	mov	r3, r9
 80070d2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80070d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80070d8:	2200      	movs	r2, #0
 80070da:	6042      	str	r2, [r0, #4]
 80070dc:	2204      	movs	r2, #4
 80070de:	f102 0614 	add.w	r6, r2, #20
 80070e2:	429e      	cmp	r6, r3
 80070e4:	6841      	ldr	r1, [r0, #4]
 80070e6:	d92f      	bls.n	8007148 <_dtoa_r+0x2d8>
 80070e8:	4620      	mov	r0, r4
 80070ea:	f000 fdc1 	bl	8007c70 <_Balloc>
 80070ee:	9000      	str	r0, [sp, #0]
 80070f0:	2800      	cmp	r0, #0
 80070f2:	d14b      	bne.n	800718c <_dtoa_r+0x31c>
 80070f4:	4b24      	ldr	r3, [pc, #144]	; (8007188 <_dtoa_r+0x318>)
 80070f6:	4602      	mov	r2, r0
 80070f8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80070fc:	e6d1      	b.n	8006ea2 <_dtoa_r+0x32>
 80070fe:	2301      	movs	r3, #1
 8007100:	e7de      	b.n	80070c0 <_dtoa_r+0x250>
 8007102:	2300      	movs	r3, #0
 8007104:	9308      	str	r3, [sp, #32]
 8007106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007108:	eb0a 0903 	add.w	r9, sl, r3
 800710c:	f109 0301 	add.w	r3, r9, #1
 8007110:	2b01      	cmp	r3, #1
 8007112:	9301      	str	r3, [sp, #4]
 8007114:	bfb8      	it	lt
 8007116:	2301      	movlt	r3, #1
 8007118:	e7dd      	b.n	80070d6 <_dtoa_r+0x266>
 800711a:	2301      	movs	r3, #1
 800711c:	e7f2      	b.n	8007104 <_dtoa_r+0x294>
 800711e:	2501      	movs	r5, #1
 8007120:	2300      	movs	r3, #0
 8007122:	9305      	str	r3, [sp, #20]
 8007124:	9508      	str	r5, [sp, #32]
 8007126:	f04f 39ff 	mov.w	r9, #4294967295
 800712a:	2200      	movs	r2, #0
 800712c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007130:	2312      	movs	r3, #18
 8007132:	9209      	str	r2, [sp, #36]	; 0x24
 8007134:	e7cf      	b.n	80070d6 <_dtoa_r+0x266>
 8007136:	2301      	movs	r3, #1
 8007138:	9308      	str	r3, [sp, #32]
 800713a:	e7f4      	b.n	8007126 <_dtoa_r+0x2b6>
 800713c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007140:	f8cd 9004 	str.w	r9, [sp, #4]
 8007144:	464b      	mov	r3, r9
 8007146:	e7c6      	b.n	80070d6 <_dtoa_r+0x266>
 8007148:	3101      	adds	r1, #1
 800714a:	6041      	str	r1, [r0, #4]
 800714c:	0052      	lsls	r2, r2, #1
 800714e:	e7c6      	b.n	80070de <_dtoa_r+0x26e>
 8007150:	636f4361 	.word	0x636f4361
 8007154:	3fd287a7 	.word	0x3fd287a7
 8007158:	8b60c8b3 	.word	0x8b60c8b3
 800715c:	3fc68a28 	.word	0x3fc68a28
 8007160:	509f79fb 	.word	0x509f79fb
 8007164:	3fd34413 	.word	0x3fd34413
 8007168:	08008fb1 	.word	0x08008fb1
 800716c:	08008fc8 	.word	0x08008fc8
 8007170:	7ff00000 	.word	0x7ff00000
 8007174:	08008fad 	.word	0x08008fad
 8007178:	08008fa4 	.word	0x08008fa4
 800717c:	08008f81 	.word	0x08008f81
 8007180:	3ff80000 	.word	0x3ff80000
 8007184:	08009120 	.word	0x08009120
 8007188:	08009027 	.word	0x08009027
 800718c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800718e:	9a00      	ldr	r2, [sp, #0]
 8007190:	601a      	str	r2, [r3, #0]
 8007192:	9b01      	ldr	r3, [sp, #4]
 8007194:	2b0e      	cmp	r3, #14
 8007196:	f200 80ad 	bhi.w	80072f4 <_dtoa_r+0x484>
 800719a:	2d00      	cmp	r5, #0
 800719c:	f000 80aa 	beq.w	80072f4 <_dtoa_r+0x484>
 80071a0:	f1ba 0f00 	cmp.w	sl, #0
 80071a4:	dd36      	ble.n	8007214 <_dtoa_r+0x3a4>
 80071a6:	4ac3      	ldr	r2, [pc, #780]	; (80074b4 <_dtoa_r+0x644>)
 80071a8:	f00a 030f 	and.w	r3, sl, #15
 80071ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80071b0:	ed93 7b00 	vldr	d7, [r3]
 80071b4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80071b8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80071bc:	eeb0 8a47 	vmov.f32	s16, s14
 80071c0:	eef0 8a67 	vmov.f32	s17, s15
 80071c4:	d016      	beq.n	80071f4 <_dtoa_r+0x384>
 80071c6:	4bbc      	ldr	r3, [pc, #752]	; (80074b8 <_dtoa_r+0x648>)
 80071c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80071cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80071d0:	f7f9 fb3c 	bl	800084c <__aeabi_ddiv>
 80071d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071d8:	f007 070f 	and.w	r7, r7, #15
 80071dc:	2503      	movs	r5, #3
 80071de:	4eb6      	ldr	r6, [pc, #728]	; (80074b8 <_dtoa_r+0x648>)
 80071e0:	b957      	cbnz	r7, 80071f8 <_dtoa_r+0x388>
 80071e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071e6:	ec53 2b18 	vmov	r2, r3, d8
 80071ea:	f7f9 fb2f 	bl	800084c <__aeabi_ddiv>
 80071ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071f2:	e029      	b.n	8007248 <_dtoa_r+0x3d8>
 80071f4:	2502      	movs	r5, #2
 80071f6:	e7f2      	b.n	80071de <_dtoa_r+0x36e>
 80071f8:	07f9      	lsls	r1, r7, #31
 80071fa:	d508      	bpl.n	800720e <_dtoa_r+0x39e>
 80071fc:	ec51 0b18 	vmov	r0, r1, d8
 8007200:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007204:	f7f9 f9f8 	bl	80005f8 <__aeabi_dmul>
 8007208:	ec41 0b18 	vmov	d8, r0, r1
 800720c:	3501      	adds	r5, #1
 800720e:	107f      	asrs	r7, r7, #1
 8007210:	3608      	adds	r6, #8
 8007212:	e7e5      	b.n	80071e0 <_dtoa_r+0x370>
 8007214:	f000 80a6 	beq.w	8007364 <_dtoa_r+0x4f4>
 8007218:	f1ca 0600 	rsb	r6, sl, #0
 800721c:	4ba5      	ldr	r3, [pc, #660]	; (80074b4 <_dtoa_r+0x644>)
 800721e:	4fa6      	ldr	r7, [pc, #664]	; (80074b8 <_dtoa_r+0x648>)
 8007220:	f006 020f 	and.w	r2, r6, #15
 8007224:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007230:	f7f9 f9e2 	bl	80005f8 <__aeabi_dmul>
 8007234:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007238:	1136      	asrs	r6, r6, #4
 800723a:	2300      	movs	r3, #0
 800723c:	2502      	movs	r5, #2
 800723e:	2e00      	cmp	r6, #0
 8007240:	f040 8085 	bne.w	800734e <_dtoa_r+0x4de>
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1d2      	bne.n	80071ee <_dtoa_r+0x37e>
 8007248:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800724a:	2b00      	cmp	r3, #0
 800724c:	f000 808c 	beq.w	8007368 <_dtoa_r+0x4f8>
 8007250:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007254:	4b99      	ldr	r3, [pc, #612]	; (80074bc <_dtoa_r+0x64c>)
 8007256:	2200      	movs	r2, #0
 8007258:	4630      	mov	r0, r6
 800725a:	4639      	mov	r1, r7
 800725c:	f7f9 fc3e 	bl	8000adc <__aeabi_dcmplt>
 8007260:	2800      	cmp	r0, #0
 8007262:	f000 8081 	beq.w	8007368 <_dtoa_r+0x4f8>
 8007266:	9b01      	ldr	r3, [sp, #4]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d07d      	beq.n	8007368 <_dtoa_r+0x4f8>
 800726c:	f1b9 0f00 	cmp.w	r9, #0
 8007270:	dd3c      	ble.n	80072ec <_dtoa_r+0x47c>
 8007272:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007276:	9307      	str	r3, [sp, #28]
 8007278:	2200      	movs	r2, #0
 800727a:	4b91      	ldr	r3, [pc, #580]	; (80074c0 <_dtoa_r+0x650>)
 800727c:	4630      	mov	r0, r6
 800727e:	4639      	mov	r1, r7
 8007280:	f7f9 f9ba 	bl	80005f8 <__aeabi_dmul>
 8007284:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007288:	3501      	adds	r5, #1
 800728a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800728e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007292:	4628      	mov	r0, r5
 8007294:	f7f9 f946 	bl	8000524 <__aeabi_i2d>
 8007298:	4632      	mov	r2, r6
 800729a:	463b      	mov	r3, r7
 800729c:	f7f9 f9ac 	bl	80005f8 <__aeabi_dmul>
 80072a0:	4b88      	ldr	r3, [pc, #544]	; (80074c4 <_dtoa_r+0x654>)
 80072a2:	2200      	movs	r2, #0
 80072a4:	f7f8 fff2 	bl	800028c <__adddf3>
 80072a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80072ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072b0:	9303      	str	r3, [sp, #12]
 80072b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d15c      	bne.n	8007372 <_dtoa_r+0x502>
 80072b8:	4b83      	ldr	r3, [pc, #524]	; (80074c8 <_dtoa_r+0x658>)
 80072ba:	2200      	movs	r2, #0
 80072bc:	4630      	mov	r0, r6
 80072be:	4639      	mov	r1, r7
 80072c0:	f7f8 ffe2 	bl	8000288 <__aeabi_dsub>
 80072c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072c8:	4606      	mov	r6, r0
 80072ca:	460f      	mov	r7, r1
 80072cc:	f7f9 fc24 	bl	8000b18 <__aeabi_dcmpgt>
 80072d0:	2800      	cmp	r0, #0
 80072d2:	f040 8296 	bne.w	8007802 <_dtoa_r+0x992>
 80072d6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80072da:	4630      	mov	r0, r6
 80072dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80072e0:	4639      	mov	r1, r7
 80072e2:	f7f9 fbfb 	bl	8000adc <__aeabi_dcmplt>
 80072e6:	2800      	cmp	r0, #0
 80072e8:	f040 8288 	bne.w	80077fc <_dtoa_r+0x98c>
 80072ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80072f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80072f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	f2c0 8158 	blt.w	80075ac <_dtoa_r+0x73c>
 80072fc:	f1ba 0f0e 	cmp.w	sl, #14
 8007300:	f300 8154 	bgt.w	80075ac <_dtoa_r+0x73c>
 8007304:	4b6b      	ldr	r3, [pc, #428]	; (80074b4 <_dtoa_r+0x644>)
 8007306:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800730a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800730e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007310:	2b00      	cmp	r3, #0
 8007312:	f280 80e3 	bge.w	80074dc <_dtoa_r+0x66c>
 8007316:	9b01      	ldr	r3, [sp, #4]
 8007318:	2b00      	cmp	r3, #0
 800731a:	f300 80df 	bgt.w	80074dc <_dtoa_r+0x66c>
 800731e:	f040 826d 	bne.w	80077fc <_dtoa_r+0x98c>
 8007322:	4b69      	ldr	r3, [pc, #420]	; (80074c8 <_dtoa_r+0x658>)
 8007324:	2200      	movs	r2, #0
 8007326:	4640      	mov	r0, r8
 8007328:	4649      	mov	r1, r9
 800732a:	f7f9 f965 	bl	80005f8 <__aeabi_dmul>
 800732e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007332:	f7f9 fbe7 	bl	8000b04 <__aeabi_dcmpge>
 8007336:	9e01      	ldr	r6, [sp, #4]
 8007338:	4637      	mov	r7, r6
 800733a:	2800      	cmp	r0, #0
 800733c:	f040 8243 	bne.w	80077c6 <_dtoa_r+0x956>
 8007340:	9d00      	ldr	r5, [sp, #0]
 8007342:	2331      	movs	r3, #49	; 0x31
 8007344:	f805 3b01 	strb.w	r3, [r5], #1
 8007348:	f10a 0a01 	add.w	sl, sl, #1
 800734c:	e23f      	b.n	80077ce <_dtoa_r+0x95e>
 800734e:	07f2      	lsls	r2, r6, #31
 8007350:	d505      	bpl.n	800735e <_dtoa_r+0x4ee>
 8007352:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007356:	f7f9 f94f 	bl	80005f8 <__aeabi_dmul>
 800735a:	3501      	adds	r5, #1
 800735c:	2301      	movs	r3, #1
 800735e:	1076      	asrs	r6, r6, #1
 8007360:	3708      	adds	r7, #8
 8007362:	e76c      	b.n	800723e <_dtoa_r+0x3ce>
 8007364:	2502      	movs	r5, #2
 8007366:	e76f      	b.n	8007248 <_dtoa_r+0x3d8>
 8007368:	9b01      	ldr	r3, [sp, #4]
 800736a:	f8cd a01c 	str.w	sl, [sp, #28]
 800736e:	930c      	str	r3, [sp, #48]	; 0x30
 8007370:	e78d      	b.n	800728e <_dtoa_r+0x41e>
 8007372:	9900      	ldr	r1, [sp, #0]
 8007374:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007376:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007378:	4b4e      	ldr	r3, [pc, #312]	; (80074b4 <_dtoa_r+0x644>)
 800737a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800737e:	4401      	add	r1, r0
 8007380:	9102      	str	r1, [sp, #8]
 8007382:	9908      	ldr	r1, [sp, #32]
 8007384:	eeb0 8a47 	vmov.f32	s16, s14
 8007388:	eef0 8a67 	vmov.f32	s17, s15
 800738c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007390:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007394:	2900      	cmp	r1, #0
 8007396:	d045      	beq.n	8007424 <_dtoa_r+0x5b4>
 8007398:	494c      	ldr	r1, [pc, #304]	; (80074cc <_dtoa_r+0x65c>)
 800739a:	2000      	movs	r0, #0
 800739c:	f7f9 fa56 	bl	800084c <__aeabi_ddiv>
 80073a0:	ec53 2b18 	vmov	r2, r3, d8
 80073a4:	f7f8 ff70 	bl	8000288 <__aeabi_dsub>
 80073a8:	9d00      	ldr	r5, [sp, #0]
 80073aa:	ec41 0b18 	vmov	d8, r0, r1
 80073ae:	4639      	mov	r1, r7
 80073b0:	4630      	mov	r0, r6
 80073b2:	f7f9 fbd1 	bl	8000b58 <__aeabi_d2iz>
 80073b6:	900c      	str	r0, [sp, #48]	; 0x30
 80073b8:	f7f9 f8b4 	bl	8000524 <__aeabi_i2d>
 80073bc:	4602      	mov	r2, r0
 80073be:	460b      	mov	r3, r1
 80073c0:	4630      	mov	r0, r6
 80073c2:	4639      	mov	r1, r7
 80073c4:	f7f8 ff60 	bl	8000288 <__aeabi_dsub>
 80073c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073ca:	3330      	adds	r3, #48	; 0x30
 80073cc:	f805 3b01 	strb.w	r3, [r5], #1
 80073d0:	ec53 2b18 	vmov	r2, r3, d8
 80073d4:	4606      	mov	r6, r0
 80073d6:	460f      	mov	r7, r1
 80073d8:	f7f9 fb80 	bl	8000adc <__aeabi_dcmplt>
 80073dc:	2800      	cmp	r0, #0
 80073de:	d165      	bne.n	80074ac <_dtoa_r+0x63c>
 80073e0:	4632      	mov	r2, r6
 80073e2:	463b      	mov	r3, r7
 80073e4:	4935      	ldr	r1, [pc, #212]	; (80074bc <_dtoa_r+0x64c>)
 80073e6:	2000      	movs	r0, #0
 80073e8:	f7f8 ff4e 	bl	8000288 <__aeabi_dsub>
 80073ec:	ec53 2b18 	vmov	r2, r3, d8
 80073f0:	f7f9 fb74 	bl	8000adc <__aeabi_dcmplt>
 80073f4:	2800      	cmp	r0, #0
 80073f6:	f040 80b9 	bne.w	800756c <_dtoa_r+0x6fc>
 80073fa:	9b02      	ldr	r3, [sp, #8]
 80073fc:	429d      	cmp	r5, r3
 80073fe:	f43f af75 	beq.w	80072ec <_dtoa_r+0x47c>
 8007402:	4b2f      	ldr	r3, [pc, #188]	; (80074c0 <_dtoa_r+0x650>)
 8007404:	ec51 0b18 	vmov	r0, r1, d8
 8007408:	2200      	movs	r2, #0
 800740a:	f7f9 f8f5 	bl	80005f8 <__aeabi_dmul>
 800740e:	4b2c      	ldr	r3, [pc, #176]	; (80074c0 <_dtoa_r+0x650>)
 8007410:	ec41 0b18 	vmov	d8, r0, r1
 8007414:	2200      	movs	r2, #0
 8007416:	4630      	mov	r0, r6
 8007418:	4639      	mov	r1, r7
 800741a:	f7f9 f8ed 	bl	80005f8 <__aeabi_dmul>
 800741e:	4606      	mov	r6, r0
 8007420:	460f      	mov	r7, r1
 8007422:	e7c4      	b.n	80073ae <_dtoa_r+0x53e>
 8007424:	ec51 0b17 	vmov	r0, r1, d7
 8007428:	f7f9 f8e6 	bl	80005f8 <__aeabi_dmul>
 800742c:	9b02      	ldr	r3, [sp, #8]
 800742e:	9d00      	ldr	r5, [sp, #0]
 8007430:	930c      	str	r3, [sp, #48]	; 0x30
 8007432:	ec41 0b18 	vmov	d8, r0, r1
 8007436:	4639      	mov	r1, r7
 8007438:	4630      	mov	r0, r6
 800743a:	f7f9 fb8d 	bl	8000b58 <__aeabi_d2iz>
 800743e:	9011      	str	r0, [sp, #68]	; 0x44
 8007440:	f7f9 f870 	bl	8000524 <__aeabi_i2d>
 8007444:	4602      	mov	r2, r0
 8007446:	460b      	mov	r3, r1
 8007448:	4630      	mov	r0, r6
 800744a:	4639      	mov	r1, r7
 800744c:	f7f8 ff1c 	bl	8000288 <__aeabi_dsub>
 8007450:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007452:	3330      	adds	r3, #48	; 0x30
 8007454:	f805 3b01 	strb.w	r3, [r5], #1
 8007458:	9b02      	ldr	r3, [sp, #8]
 800745a:	429d      	cmp	r5, r3
 800745c:	4606      	mov	r6, r0
 800745e:	460f      	mov	r7, r1
 8007460:	f04f 0200 	mov.w	r2, #0
 8007464:	d134      	bne.n	80074d0 <_dtoa_r+0x660>
 8007466:	4b19      	ldr	r3, [pc, #100]	; (80074cc <_dtoa_r+0x65c>)
 8007468:	ec51 0b18 	vmov	r0, r1, d8
 800746c:	f7f8 ff0e 	bl	800028c <__adddf3>
 8007470:	4602      	mov	r2, r0
 8007472:	460b      	mov	r3, r1
 8007474:	4630      	mov	r0, r6
 8007476:	4639      	mov	r1, r7
 8007478:	f7f9 fb4e 	bl	8000b18 <__aeabi_dcmpgt>
 800747c:	2800      	cmp	r0, #0
 800747e:	d175      	bne.n	800756c <_dtoa_r+0x6fc>
 8007480:	ec53 2b18 	vmov	r2, r3, d8
 8007484:	4911      	ldr	r1, [pc, #68]	; (80074cc <_dtoa_r+0x65c>)
 8007486:	2000      	movs	r0, #0
 8007488:	f7f8 fefe 	bl	8000288 <__aeabi_dsub>
 800748c:	4602      	mov	r2, r0
 800748e:	460b      	mov	r3, r1
 8007490:	4630      	mov	r0, r6
 8007492:	4639      	mov	r1, r7
 8007494:	f7f9 fb22 	bl	8000adc <__aeabi_dcmplt>
 8007498:	2800      	cmp	r0, #0
 800749a:	f43f af27 	beq.w	80072ec <_dtoa_r+0x47c>
 800749e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80074a0:	1e6b      	subs	r3, r5, #1
 80074a2:	930c      	str	r3, [sp, #48]	; 0x30
 80074a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80074a8:	2b30      	cmp	r3, #48	; 0x30
 80074aa:	d0f8      	beq.n	800749e <_dtoa_r+0x62e>
 80074ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80074b0:	e04a      	b.n	8007548 <_dtoa_r+0x6d8>
 80074b2:	bf00      	nop
 80074b4:	08009120 	.word	0x08009120
 80074b8:	080090f8 	.word	0x080090f8
 80074bc:	3ff00000 	.word	0x3ff00000
 80074c0:	40240000 	.word	0x40240000
 80074c4:	401c0000 	.word	0x401c0000
 80074c8:	40140000 	.word	0x40140000
 80074cc:	3fe00000 	.word	0x3fe00000
 80074d0:	4baf      	ldr	r3, [pc, #700]	; (8007790 <_dtoa_r+0x920>)
 80074d2:	f7f9 f891 	bl	80005f8 <__aeabi_dmul>
 80074d6:	4606      	mov	r6, r0
 80074d8:	460f      	mov	r7, r1
 80074da:	e7ac      	b.n	8007436 <_dtoa_r+0x5c6>
 80074dc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80074e0:	9d00      	ldr	r5, [sp, #0]
 80074e2:	4642      	mov	r2, r8
 80074e4:	464b      	mov	r3, r9
 80074e6:	4630      	mov	r0, r6
 80074e8:	4639      	mov	r1, r7
 80074ea:	f7f9 f9af 	bl	800084c <__aeabi_ddiv>
 80074ee:	f7f9 fb33 	bl	8000b58 <__aeabi_d2iz>
 80074f2:	9002      	str	r0, [sp, #8]
 80074f4:	f7f9 f816 	bl	8000524 <__aeabi_i2d>
 80074f8:	4642      	mov	r2, r8
 80074fa:	464b      	mov	r3, r9
 80074fc:	f7f9 f87c 	bl	80005f8 <__aeabi_dmul>
 8007500:	4602      	mov	r2, r0
 8007502:	460b      	mov	r3, r1
 8007504:	4630      	mov	r0, r6
 8007506:	4639      	mov	r1, r7
 8007508:	f7f8 febe 	bl	8000288 <__aeabi_dsub>
 800750c:	9e02      	ldr	r6, [sp, #8]
 800750e:	9f01      	ldr	r7, [sp, #4]
 8007510:	3630      	adds	r6, #48	; 0x30
 8007512:	f805 6b01 	strb.w	r6, [r5], #1
 8007516:	9e00      	ldr	r6, [sp, #0]
 8007518:	1bae      	subs	r6, r5, r6
 800751a:	42b7      	cmp	r7, r6
 800751c:	4602      	mov	r2, r0
 800751e:	460b      	mov	r3, r1
 8007520:	d137      	bne.n	8007592 <_dtoa_r+0x722>
 8007522:	f7f8 feb3 	bl	800028c <__adddf3>
 8007526:	4642      	mov	r2, r8
 8007528:	464b      	mov	r3, r9
 800752a:	4606      	mov	r6, r0
 800752c:	460f      	mov	r7, r1
 800752e:	f7f9 faf3 	bl	8000b18 <__aeabi_dcmpgt>
 8007532:	b9c8      	cbnz	r0, 8007568 <_dtoa_r+0x6f8>
 8007534:	4642      	mov	r2, r8
 8007536:	464b      	mov	r3, r9
 8007538:	4630      	mov	r0, r6
 800753a:	4639      	mov	r1, r7
 800753c:	f7f9 fac4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007540:	b110      	cbz	r0, 8007548 <_dtoa_r+0x6d8>
 8007542:	9b02      	ldr	r3, [sp, #8]
 8007544:	07d9      	lsls	r1, r3, #31
 8007546:	d40f      	bmi.n	8007568 <_dtoa_r+0x6f8>
 8007548:	4620      	mov	r0, r4
 800754a:	4659      	mov	r1, fp
 800754c:	f000 fbd0 	bl	8007cf0 <_Bfree>
 8007550:	2300      	movs	r3, #0
 8007552:	702b      	strb	r3, [r5, #0]
 8007554:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007556:	f10a 0001 	add.w	r0, sl, #1
 800755a:	6018      	str	r0, [r3, #0]
 800755c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800755e:	2b00      	cmp	r3, #0
 8007560:	f43f acd8 	beq.w	8006f14 <_dtoa_r+0xa4>
 8007564:	601d      	str	r5, [r3, #0]
 8007566:	e4d5      	b.n	8006f14 <_dtoa_r+0xa4>
 8007568:	f8cd a01c 	str.w	sl, [sp, #28]
 800756c:	462b      	mov	r3, r5
 800756e:	461d      	mov	r5, r3
 8007570:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007574:	2a39      	cmp	r2, #57	; 0x39
 8007576:	d108      	bne.n	800758a <_dtoa_r+0x71a>
 8007578:	9a00      	ldr	r2, [sp, #0]
 800757a:	429a      	cmp	r2, r3
 800757c:	d1f7      	bne.n	800756e <_dtoa_r+0x6fe>
 800757e:	9a07      	ldr	r2, [sp, #28]
 8007580:	9900      	ldr	r1, [sp, #0]
 8007582:	3201      	adds	r2, #1
 8007584:	9207      	str	r2, [sp, #28]
 8007586:	2230      	movs	r2, #48	; 0x30
 8007588:	700a      	strb	r2, [r1, #0]
 800758a:	781a      	ldrb	r2, [r3, #0]
 800758c:	3201      	adds	r2, #1
 800758e:	701a      	strb	r2, [r3, #0]
 8007590:	e78c      	b.n	80074ac <_dtoa_r+0x63c>
 8007592:	4b7f      	ldr	r3, [pc, #508]	; (8007790 <_dtoa_r+0x920>)
 8007594:	2200      	movs	r2, #0
 8007596:	f7f9 f82f 	bl	80005f8 <__aeabi_dmul>
 800759a:	2200      	movs	r2, #0
 800759c:	2300      	movs	r3, #0
 800759e:	4606      	mov	r6, r0
 80075a0:	460f      	mov	r7, r1
 80075a2:	f7f9 fa91 	bl	8000ac8 <__aeabi_dcmpeq>
 80075a6:	2800      	cmp	r0, #0
 80075a8:	d09b      	beq.n	80074e2 <_dtoa_r+0x672>
 80075aa:	e7cd      	b.n	8007548 <_dtoa_r+0x6d8>
 80075ac:	9a08      	ldr	r2, [sp, #32]
 80075ae:	2a00      	cmp	r2, #0
 80075b0:	f000 80c4 	beq.w	800773c <_dtoa_r+0x8cc>
 80075b4:	9a05      	ldr	r2, [sp, #20]
 80075b6:	2a01      	cmp	r2, #1
 80075b8:	f300 80a8 	bgt.w	800770c <_dtoa_r+0x89c>
 80075bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80075be:	2a00      	cmp	r2, #0
 80075c0:	f000 80a0 	beq.w	8007704 <_dtoa_r+0x894>
 80075c4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80075c8:	9e06      	ldr	r6, [sp, #24]
 80075ca:	4645      	mov	r5, r8
 80075cc:	9a04      	ldr	r2, [sp, #16]
 80075ce:	2101      	movs	r1, #1
 80075d0:	441a      	add	r2, r3
 80075d2:	4620      	mov	r0, r4
 80075d4:	4498      	add	r8, r3
 80075d6:	9204      	str	r2, [sp, #16]
 80075d8:	f000 fc46 	bl	8007e68 <__i2b>
 80075dc:	4607      	mov	r7, r0
 80075de:	2d00      	cmp	r5, #0
 80075e0:	dd0b      	ble.n	80075fa <_dtoa_r+0x78a>
 80075e2:	9b04      	ldr	r3, [sp, #16]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	dd08      	ble.n	80075fa <_dtoa_r+0x78a>
 80075e8:	42ab      	cmp	r3, r5
 80075ea:	9a04      	ldr	r2, [sp, #16]
 80075ec:	bfa8      	it	ge
 80075ee:	462b      	movge	r3, r5
 80075f0:	eba8 0803 	sub.w	r8, r8, r3
 80075f4:	1aed      	subs	r5, r5, r3
 80075f6:	1ad3      	subs	r3, r2, r3
 80075f8:	9304      	str	r3, [sp, #16]
 80075fa:	9b06      	ldr	r3, [sp, #24]
 80075fc:	b1fb      	cbz	r3, 800763e <_dtoa_r+0x7ce>
 80075fe:	9b08      	ldr	r3, [sp, #32]
 8007600:	2b00      	cmp	r3, #0
 8007602:	f000 809f 	beq.w	8007744 <_dtoa_r+0x8d4>
 8007606:	2e00      	cmp	r6, #0
 8007608:	dd11      	ble.n	800762e <_dtoa_r+0x7be>
 800760a:	4639      	mov	r1, r7
 800760c:	4632      	mov	r2, r6
 800760e:	4620      	mov	r0, r4
 8007610:	f000 fce6 	bl	8007fe0 <__pow5mult>
 8007614:	465a      	mov	r2, fp
 8007616:	4601      	mov	r1, r0
 8007618:	4607      	mov	r7, r0
 800761a:	4620      	mov	r0, r4
 800761c:	f000 fc3a 	bl	8007e94 <__multiply>
 8007620:	4659      	mov	r1, fp
 8007622:	9007      	str	r0, [sp, #28]
 8007624:	4620      	mov	r0, r4
 8007626:	f000 fb63 	bl	8007cf0 <_Bfree>
 800762a:	9b07      	ldr	r3, [sp, #28]
 800762c:	469b      	mov	fp, r3
 800762e:	9b06      	ldr	r3, [sp, #24]
 8007630:	1b9a      	subs	r2, r3, r6
 8007632:	d004      	beq.n	800763e <_dtoa_r+0x7ce>
 8007634:	4659      	mov	r1, fp
 8007636:	4620      	mov	r0, r4
 8007638:	f000 fcd2 	bl	8007fe0 <__pow5mult>
 800763c:	4683      	mov	fp, r0
 800763e:	2101      	movs	r1, #1
 8007640:	4620      	mov	r0, r4
 8007642:	f000 fc11 	bl	8007e68 <__i2b>
 8007646:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007648:	2b00      	cmp	r3, #0
 800764a:	4606      	mov	r6, r0
 800764c:	dd7c      	ble.n	8007748 <_dtoa_r+0x8d8>
 800764e:	461a      	mov	r2, r3
 8007650:	4601      	mov	r1, r0
 8007652:	4620      	mov	r0, r4
 8007654:	f000 fcc4 	bl	8007fe0 <__pow5mult>
 8007658:	9b05      	ldr	r3, [sp, #20]
 800765a:	2b01      	cmp	r3, #1
 800765c:	4606      	mov	r6, r0
 800765e:	dd76      	ble.n	800774e <_dtoa_r+0x8de>
 8007660:	2300      	movs	r3, #0
 8007662:	9306      	str	r3, [sp, #24]
 8007664:	6933      	ldr	r3, [r6, #16]
 8007666:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800766a:	6918      	ldr	r0, [r3, #16]
 800766c:	f000 fbac 	bl	8007dc8 <__hi0bits>
 8007670:	f1c0 0020 	rsb	r0, r0, #32
 8007674:	9b04      	ldr	r3, [sp, #16]
 8007676:	4418      	add	r0, r3
 8007678:	f010 001f 	ands.w	r0, r0, #31
 800767c:	f000 8086 	beq.w	800778c <_dtoa_r+0x91c>
 8007680:	f1c0 0320 	rsb	r3, r0, #32
 8007684:	2b04      	cmp	r3, #4
 8007686:	dd7f      	ble.n	8007788 <_dtoa_r+0x918>
 8007688:	f1c0 001c 	rsb	r0, r0, #28
 800768c:	9b04      	ldr	r3, [sp, #16]
 800768e:	4403      	add	r3, r0
 8007690:	4480      	add	r8, r0
 8007692:	4405      	add	r5, r0
 8007694:	9304      	str	r3, [sp, #16]
 8007696:	f1b8 0f00 	cmp.w	r8, #0
 800769a:	dd05      	ble.n	80076a8 <_dtoa_r+0x838>
 800769c:	4659      	mov	r1, fp
 800769e:	4642      	mov	r2, r8
 80076a0:	4620      	mov	r0, r4
 80076a2:	f000 fcf7 	bl	8008094 <__lshift>
 80076a6:	4683      	mov	fp, r0
 80076a8:	9b04      	ldr	r3, [sp, #16]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	dd05      	ble.n	80076ba <_dtoa_r+0x84a>
 80076ae:	4631      	mov	r1, r6
 80076b0:	461a      	mov	r2, r3
 80076b2:	4620      	mov	r0, r4
 80076b4:	f000 fcee 	bl	8008094 <__lshift>
 80076b8:	4606      	mov	r6, r0
 80076ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d069      	beq.n	8007794 <_dtoa_r+0x924>
 80076c0:	4631      	mov	r1, r6
 80076c2:	4658      	mov	r0, fp
 80076c4:	f000 fd52 	bl	800816c <__mcmp>
 80076c8:	2800      	cmp	r0, #0
 80076ca:	da63      	bge.n	8007794 <_dtoa_r+0x924>
 80076cc:	2300      	movs	r3, #0
 80076ce:	4659      	mov	r1, fp
 80076d0:	220a      	movs	r2, #10
 80076d2:	4620      	mov	r0, r4
 80076d4:	f000 fb2e 	bl	8007d34 <__multadd>
 80076d8:	9b08      	ldr	r3, [sp, #32]
 80076da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80076de:	4683      	mov	fp, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f000 818f 	beq.w	8007a04 <_dtoa_r+0xb94>
 80076e6:	4639      	mov	r1, r7
 80076e8:	2300      	movs	r3, #0
 80076ea:	220a      	movs	r2, #10
 80076ec:	4620      	mov	r0, r4
 80076ee:	f000 fb21 	bl	8007d34 <__multadd>
 80076f2:	f1b9 0f00 	cmp.w	r9, #0
 80076f6:	4607      	mov	r7, r0
 80076f8:	f300 808e 	bgt.w	8007818 <_dtoa_r+0x9a8>
 80076fc:	9b05      	ldr	r3, [sp, #20]
 80076fe:	2b02      	cmp	r3, #2
 8007700:	dc50      	bgt.n	80077a4 <_dtoa_r+0x934>
 8007702:	e089      	b.n	8007818 <_dtoa_r+0x9a8>
 8007704:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007706:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800770a:	e75d      	b.n	80075c8 <_dtoa_r+0x758>
 800770c:	9b01      	ldr	r3, [sp, #4]
 800770e:	1e5e      	subs	r6, r3, #1
 8007710:	9b06      	ldr	r3, [sp, #24]
 8007712:	42b3      	cmp	r3, r6
 8007714:	bfbf      	itttt	lt
 8007716:	9b06      	ldrlt	r3, [sp, #24]
 8007718:	9606      	strlt	r6, [sp, #24]
 800771a:	1af2      	sublt	r2, r6, r3
 800771c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800771e:	bfb6      	itet	lt
 8007720:	189b      	addlt	r3, r3, r2
 8007722:	1b9e      	subge	r6, r3, r6
 8007724:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007726:	9b01      	ldr	r3, [sp, #4]
 8007728:	bfb8      	it	lt
 800772a:	2600      	movlt	r6, #0
 800772c:	2b00      	cmp	r3, #0
 800772e:	bfb5      	itete	lt
 8007730:	eba8 0503 	sublt.w	r5, r8, r3
 8007734:	9b01      	ldrge	r3, [sp, #4]
 8007736:	2300      	movlt	r3, #0
 8007738:	4645      	movge	r5, r8
 800773a:	e747      	b.n	80075cc <_dtoa_r+0x75c>
 800773c:	9e06      	ldr	r6, [sp, #24]
 800773e:	9f08      	ldr	r7, [sp, #32]
 8007740:	4645      	mov	r5, r8
 8007742:	e74c      	b.n	80075de <_dtoa_r+0x76e>
 8007744:	9a06      	ldr	r2, [sp, #24]
 8007746:	e775      	b.n	8007634 <_dtoa_r+0x7c4>
 8007748:	9b05      	ldr	r3, [sp, #20]
 800774a:	2b01      	cmp	r3, #1
 800774c:	dc18      	bgt.n	8007780 <_dtoa_r+0x910>
 800774e:	9b02      	ldr	r3, [sp, #8]
 8007750:	b9b3      	cbnz	r3, 8007780 <_dtoa_r+0x910>
 8007752:	9b03      	ldr	r3, [sp, #12]
 8007754:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007758:	b9a3      	cbnz	r3, 8007784 <_dtoa_r+0x914>
 800775a:	9b03      	ldr	r3, [sp, #12]
 800775c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007760:	0d1b      	lsrs	r3, r3, #20
 8007762:	051b      	lsls	r3, r3, #20
 8007764:	b12b      	cbz	r3, 8007772 <_dtoa_r+0x902>
 8007766:	9b04      	ldr	r3, [sp, #16]
 8007768:	3301      	adds	r3, #1
 800776a:	9304      	str	r3, [sp, #16]
 800776c:	f108 0801 	add.w	r8, r8, #1
 8007770:	2301      	movs	r3, #1
 8007772:	9306      	str	r3, [sp, #24]
 8007774:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007776:	2b00      	cmp	r3, #0
 8007778:	f47f af74 	bne.w	8007664 <_dtoa_r+0x7f4>
 800777c:	2001      	movs	r0, #1
 800777e:	e779      	b.n	8007674 <_dtoa_r+0x804>
 8007780:	2300      	movs	r3, #0
 8007782:	e7f6      	b.n	8007772 <_dtoa_r+0x902>
 8007784:	9b02      	ldr	r3, [sp, #8]
 8007786:	e7f4      	b.n	8007772 <_dtoa_r+0x902>
 8007788:	d085      	beq.n	8007696 <_dtoa_r+0x826>
 800778a:	4618      	mov	r0, r3
 800778c:	301c      	adds	r0, #28
 800778e:	e77d      	b.n	800768c <_dtoa_r+0x81c>
 8007790:	40240000 	.word	0x40240000
 8007794:	9b01      	ldr	r3, [sp, #4]
 8007796:	2b00      	cmp	r3, #0
 8007798:	dc38      	bgt.n	800780c <_dtoa_r+0x99c>
 800779a:	9b05      	ldr	r3, [sp, #20]
 800779c:	2b02      	cmp	r3, #2
 800779e:	dd35      	ble.n	800780c <_dtoa_r+0x99c>
 80077a0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80077a4:	f1b9 0f00 	cmp.w	r9, #0
 80077a8:	d10d      	bne.n	80077c6 <_dtoa_r+0x956>
 80077aa:	4631      	mov	r1, r6
 80077ac:	464b      	mov	r3, r9
 80077ae:	2205      	movs	r2, #5
 80077b0:	4620      	mov	r0, r4
 80077b2:	f000 fabf 	bl	8007d34 <__multadd>
 80077b6:	4601      	mov	r1, r0
 80077b8:	4606      	mov	r6, r0
 80077ba:	4658      	mov	r0, fp
 80077bc:	f000 fcd6 	bl	800816c <__mcmp>
 80077c0:	2800      	cmp	r0, #0
 80077c2:	f73f adbd 	bgt.w	8007340 <_dtoa_r+0x4d0>
 80077c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077c8:	9d00      	ldr	r5, [sp, #0]
 80077ca:	ea6f 0a03 	mvn.w	sl, r3
 80077ce:	f04f 0800 	mov.w	r8, #0
 80077d2:	4631      	mov	r1, r6
 80077d4:	4620      	mov	r0, r4
 80077d6:	f000 fa8b 	bl	8007cf0 <_Bfree>
 80077da:	2f00      	cmp	r7, #0
 80077dc:	f43f aeb4 	beq.w	8007548 <_dtoa_r+0x6d8>
 80077e0:	f1b8 0f00 	cmp.w	r8, #0
 80077e4:	d005      	beq.n	80077f2 <_dtoa_r+0x982>
 80077e6:	45b8      	cmp	r8, r7
 80077e8:	d003      	beq.n	80077f2 <_dtoa_r+0x982>
 80077ea:	4641      	mov	r1, r8
 80077ec:	4620      	mov	r0, r4
 80077ee:	f000 fa7f 	bl	8007cf0 <_Bfree>
 80077f2:	4639      	mov	r1, r7
 80077f4:	4620      	mov	r0, r4
 80077f6:	f000 fa7b 	bl	8007cf0 <_Bfree>
 80077fa:	e6a5      	b.n	8007548 <_dtoa_r+0x6d8>
 80077fc:	2600      	movs	r6, #0
 80077fe:	4637      	mov	r7, r6
 8007800:	e7e1      	b.n	80077c6 <_dtoa_r+0x956>
 8007802:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007804:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007808:	4637      	mov	r7, r6
 800780a:	e599      	b.n	8007340 <_dtoa_r+0x4d0>
 800780c:	9b08      	ldr	r3, [sp, #32]
 800780e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007812:	2b00      	cmp	r3, #0
 8007814:	f000 80fd 	beq.w	8007a12 <_dtoa_r+0xba2>
 8007818:	2d00      	cmp	r5, #0
 800781a:	dd05      	ble.n	8007828 <_dtoa_r+0x9b8>
 800781c:	4639      	mov	r1, r7
 800781e:	462a      	mov	r2, r5
 8007820:	4620      	mov	r0, r4
 8007822:	f000 fc37 	bl	8008094 <__lshift>
 8007826:	4607      	mov	r7, r0
 8007828:	9b06      	ldr	r3, [sp, #24]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d05c      	beq.n	80078e8 <_dtoa_r+0xa78>
 800782e:	6879      	ldr	r1, [r7, #4]
 8007830:	4620      	mov	r0, r4
 8007832:	f000 fa1d 	bl	8007c70 <_Balloc>
 8007836:	4605      	mov	r5, r0
 8007838:	b928      	cbnz	r0, 8007846 <_dtoa_r+0x9d6>
 800783a:	4b80      	ldr	r3, [pc, #512]	; (8007a3c <_dtoa_r+0xbcc>)
 800783c:	4602      	mov	r2, r0
 800783e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007842:	f7ff bb2e 	b.w	8006ea2 <_dtoa_r+0x32>
 8007846:	693a      	ldr	r2, [r7, #16]
 8007848:	3202      	adds	r2, #2
 800784a:	0092      	lsls	r2, r2, #2
 800784c:	f107 010c 	add.w	r1, r7, #12
 8007850:	300c      	adds	r0, #12
 8007852:	f000 f9ff 	bl	8007c54 <memcpy>
 8007856:	2201      	movs	r2, #1
 8007858:	4629      	mov	r1, r5
 800785a:	4620      	mov	r0, r4
 800785c:	f000 fc1a 	bl	8008094 <__lshift>
 8007860:	9b00      	ldr	r3, [sp, #0]
 8007862:	3301      	adds	r3, #1
 8007864:	9301      	str	r3, [sp, #4]
 8007866:	9b00      	ldr	r3, [sp, #0]
 8007868:	444b      	add	r3, r9
 800786a:	9307      	str	r3, [sp, #28]
 800786c:	9b02      	ldr	r3, [sp, #8]
 800786e:	f003 0301 	and.w	r3, r3, #1
 8007872:	46b8      	mov	r8, r7
 8007874:	9306      	str	r3, [sp, #24]
 8007876:	4607      	mov	r7, r0
 8007878:	9b01      	ldr	r3, [sp, #4]
 800787a:	4631      	mov	r1, r6
 800787c:	3b01      	subs	r3, #1
 800787e:	4658      	mov	r0, fp
 8007880:	9302      	str	r3, [sp, #8]
 8007882:	f7ff fa67 	bl	8006d54 <quorem>
 8007886:	4603      	mov	r3, r0
 8007888:	3330      	adds	r3, #48	; 0x30
 800788a:	9004      	str	r0, [sp, #16]
 800788c:	4641      	mov	r1, r8
 800788e:	4658      	mov	r0, fp
 8007890:	9308      	str	r3, [sp, #32]
 8007892:	f000 fc6b 	bl	800816c <__mcmp>
 8007896:	463a      	mov	r2, r7
 8007898:	4681      	mov	r9, r0
 800789a:	4631      	mov	r1, r6
 800789c:	4620      	mov	r0, r4
 800789e:	f000 fc81 	bl	80081a4 <__mdiff>
 80078a2:	68c2      	ldr	r2, [r0, #12]
 80078a4:	9b08      	ldr	r3, [sp, #32]
 80078a6:	4605      	mov	r5, r0
 80078a8:	bb02      	cbnz	r2, 80078ec <_dtoa_r+0xa7c>
 80078aa:	4601      	mov	r1, r0
 80078ac:	4658      	mov	r0, fp
 80078ae:	f000 fc5d 	bl	800816c <__mcmp>
 80078b2:	9b08      	ldr	r3, [sp, #32]
 80078b4:	4602      	mov	r2, r0
 80078b6:	4629      	mov	r1, r5
 80078b8:	4620      	mov	r0, r4
 80078ba:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80078be:	f000 fa17 	bl	8007cf0 <_Bfree>
 80078c2:	9b05      	ldr	r3, [sp, #20]
 80078c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078c6:	9d01      	ldr	r5, [sp, #4]
 80078c8:	ea43 0102 	orr.w	r1, r3, r2
 80078cc:	9b06      	ldr	r3, [sp, #24]
 80078ce:	430b      	orrs	r3, r1
 80078d0:	9b08      	ldr	r3, [sp, #32]
 80078d2:	d10d      	bne.n	80078f0 <_dtoa_r+0xa80>
 80078d4:	2b39      	cmp	r3, #57	; 0x39
 80078d6:	d029      	beq.n	800792c <_dtoa_r+0xabc>
 80078d8:	f1b9 0f00 	cmp.w	r9, #0
 80078dc:	dd01      	ble.n	80078e2 <_dtoa_r+0xa72>
 80078de:	9b04      	ldr	r3, [sp, #16]
 80078e0:	3331      	adds	r3, #49	; 0x31
 80078e2:	9a02      	ldr	r2, [sp, #8]
 80078e4:	7013      	strb	r3, [r2, #0]
 80078e6:	e774      	b.n	80077d2 <_dtoa_r+0x962>
 80078e8:	4638      	mov	r0, r7
 80078ea:	e7b9      	b.n	8007860 <_dtoa_r+0x9f0>
 80078ec:	2201      	movs	r2, #1
 80078ee:	e7e2      	b.n	80078b6 <_dtoa_r+0xa46>
 80078f0:	f1b9 0f00 	cmp.w	r9, #0
 80078f4:	db06      	blt.n	8007904 <_dtoa_r+0xa94>
 80078f6:	9905      	ldr	r1, [sp, #20]
 80078f8:	ea41 0909 	orr.w	r9, r1, r9
 80078fc:	9906      	ldr	r1, [sp, #24]
 80078fe:	ea59 0101 	orrs.w	r1, r9, r1
 8007902:	d120      	bne.n	8007946 <_dtoa_r+0xad6>
 8007904:	2a00      	cmp	r2, #0
 8007906:	ddec      	ble.n	80078e2 <_dtoa_r+0xa72>
 8007908:	4659      	mov	r1, fp
 800790a:	2201      	movs	r2, #1
 800790c:	4620      	mov	r0, r4
 800790e:	9301      	str	r3, [sp, #4]
 8007910:	f000 fbc0 	bl	8008094 <__lshift>
 8007914:	4631      	mov	r1, r6
 8007916:	4683      	mov	fp, r0
 8007918:	f000 fc28 	bl	800816c <__mcmp>
 800791c:	2800      	cmp	r0, #0
 800791e:	9b01      	ldr	r3, [sp, #4]
 8007920:	dc02      	bgt.n	8007928 <_dtoa_r+0xab8>
 8007922:	d1de      	bne.n	80078e2 <_dtoa_r+0xa72>
 8007924:	07da      	lsls	r2, r3, #31
 8007926:	d5dc      	bpl.n	80078e2 <_dtoa_r+0xa72>
 8007928:	2b39      	cmp	r3, #57	; 0x39
 800792a:	d1d8      	bne.n	80078de <_dtoa_r+0xa6e>
 800792c:	9a02      	ldr	r2, [sp, #8]
 800792e:	2339      	movs	r3, #57	; 0x39
 8007930:	7013      	strb	r3, [r2, #0]
 8007932:	462b      	mov	r3, r5
 8007934:	461d      	mov	r5, r3
 8007936:	3b01      	subs	r3, #1
 8007938:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800793c:	2a39      	cmp	r2, #57	; 0x39
 800793e:	d050      	beq.n	80079e2 <_dtoa_r+0xb72>
 8007940:	3201      	adds	r2, #1
 8007942:	701a      	strb	r2, [r3, #0]
 8007944:	e745      	b.n	80077d2 <_dtoa_r+0x962>
 8007946:	2a00      	cmp	r2, #0
 8007948:	dd03      	ble.n	8007952 <_dtoa_r+0xae2>
 800794a:	2b39      	cmp	r3, #57	; 0x39
 800794c:	d0ee      	beq.n	800792c <_dtoa_r+0xabc>
 800794e:	3301      	adds	r3, #1
 8007950:	e7c7      	b.n	80078e2 <_dtoa_r+0xa72>
 8007952:	9a01      	ldr	r2, [sp, #4]
 8007954:	9907      	ldr	r1, [sp, #28]
 8007956:	f802 3c01 	strb.w	r3, [r2, #-1]
 800795a:	428a      	cmp	r2, r1
 800795c:	d02a      	beq.n	80079b4 <_dtoa_r+0xb44>
 800795e:	4659      	mov	r1, fp
 8007960:	2300      	movs	r3, #0
 8007962:	220a      	movs	r2, #10
 8007964:	4620      	mov	r0, r4
 8007966:	f000 f9e5 	bl	8007d34 <__multadd>
 800796a:	45b8      	cmp	r8, r7
 800796c:	4683      	mov	fp, r0
 800796e:	f04f 0300 	mov.w	r3, #0
 8007972:	f04f 020a 	mov.w	r2, #10
 8007976:	4641      	mov	r1, r8
 8007978:	4620      	mov	r0, r4
 800797a:	d107      	bne.n	800798c <_dtoa_r+0xb1c>
 800797c:	f000 f9da 	bl	8007d34 <__multadd>
 8007980:	4680      	mov	r8, r0
 8007982:	4607      	mov	r7, r0
 8007984:	9b01      	ldr	r3, [sp, #4]
 8007986:	3301      	adds	r3, #1
 8007988:	9301      	str	r3, [sp, #4]
 800798a:	e775      	b.n	8007878 <_dtoa_r+0xa08>
 800798c:	f000 f9d2 	bl	8007d34 <__multadd>
 8007990:	4639      	mov	r1, r7
 8007992:	4680      	mov	r8, r0
 8007994:	2300      	movs	r3, #0
 8007996:	220a      	movs	r2, #10
 8007998:	4620      	mov	r0, r4
 800799a:	f000 f9cb 	bl	8007d34 <__multadd>
 800799e:	4607      	mov	r7, r0
 80079a0:	e7f0      	b.n	8007984 <_dtoa_r+0xb14>
 80079a2:	f1b9 0f00 	cmp.w	r9, #0
 80079a6:	9a00      	ldr	r2, [sp, #0]
 80079a8:	bfcc      	ite	gt
 80079aa:	464d      	movgt	r5, r9
 80079ac:	2501      	movle	r5, #1
 80079ae:	4415      	add	r5, r2
 80079b0:	f04f 0800 	mov.w	r8, #0
 80079b4:	4659      	mov	r1, fp
 80079b6:	2201      	movs	r2, #1
 80079b8:	4620      	mov	r0, r4
 80079ba:	9301      	str	r3, [sp, #4]
 80079bc:	f000 fb6a 	bl	8008094 <__lshift>
 80079c0:	4631      	mov	r1, r6
 80079c2:	4683      	mov	fp, r0
 80079c4:	f000 fbd2 	bl	800816c <__mcmp>
 80079c8:	2800      	cmp	r0, #0
 80079ca:	dcb2      	bgt.n	8007932 <_dtoa_r+0xac2>
 80079cc:	d102      	bne.n	80079d4 <_dtoa_r+0xb64>
 80079ce:	9b01      	ldr	r3, [sp, #4]
 80079d0:	07db      	lsls	r3, r3, #31
 80079d2:	d4ae      	bmi.n	8007932 <_dtoa_r+0xac2>
 80079d4:	462b      	mov	r3, r5
 80079d6:	461d      	mov	r5, r3
 80079d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079dc:	2a30      	cmp	r2, #48	; 0x30
 80079de:	d0fa      	beq.n	80079d6 <_dtoa_r+0xb66>
 80079e0:	e6f7      	b.n	80077d2 <_dtoa_r+0x962>
 80079e2:	9a00      	ldr	r2, [sp, #0]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d1a5      	bne.n	8007934 <_dtoa_r+0xac4>
 80079e8:	f10a 0a01 	add.w	sl, sl, #1
 80079ec:	2331      	movs	r3, #49	; 0x31
 80079ee:	e779      	b.n	80078e4 <_dtoa_r+0xa74>
 80079f0:	4b13      	ldr	r3, [pc, #76]	; (8007a40 <_dtoa_r+0xbd0>)
 80079f2:	f7ff baaf 	b.w	8006f54 <_dtoa_r+0xe4>
 80079f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f47f aa86 	bne.w	8006f0a <_dtoa_r+0x9a>
 80079fe:	4b11      	ldr	r3, [pc, #68]	; (8007a44 <_dtoa_r+0xbd4>)
 8007a00:	f7ff baa8 	b.w	8006f54 <_dtoa_r+0xe4>
 8007a04:	f1b9 0f00 	cmp.w	r9, #0
 8007a08:	dc03      	bgt.n	8007a12 <_dtoa_r+0xba2>
 8007a0a:	9b05      	ldr	r3, [sp, #20]
 8007a0c:	2b02      	cmp	r3, #2
 8007a0e:	f73f aec9 	bgt.w	80077a4 <_dtoa_r+0x934>
 8007a12:	9d00      	ldr	r5, [sp, #0]
 8007a14:	4631      	mov	r1, r6
 8007a16:	4658      	mov	r0, fp
 8007a18:	f7ff f99c 	bl	8006d54 <quorem>
 8007a1c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007a20:	f805 3b01 	strb.w	r3, [r5], #1
 8007a24:	9a00      	ldr	r2, [sp, #0]
 8007a26:	1aaa      	subs	r2, r5, r2
 8007a28:	4591      	cmp	r9, r2
 8007a2a:	ddba      	ble.n	80079a2 <_dtoa_r+0xb32>
 8007a2c:	4659      	mov	r1, fp
 8007a2e:	2300      	movs	r3, #0
 8007a30:	220a      	movs	r2, #10
 8007a32:	4620      	mov	r0, r4
 8007a34:	f000 f97e 	bl	8007d34 <__multadd>
 8007a38:	4683      	mov	fp, r0
 8007a3a:	e7eb      	b.n	8007a14 <_dtoa_r+0xba4>
 8007a3c:	08009027 	.word	0x08009027
 8007a40:	08008f80 	.word	0x08008f80
 8007a44:	08008fa4 	.word	0x08008fa4

08007a48 <std>:
 8007a48:	2300      	movs	r3, #0
 8007a4a:	b510      	push	{r4, lr}
 8007a4c:	4604      	mov	r4, r0
 8007a4e:	e9c0 3300 	strd	r3, r3, [r0]
 8007a52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a56:	6083      	str	r3, [r0, #8]
 8007a58:	8181      	strh	r1, [r0, #12]
 8007a5a:	6643      	str	r3, [r0, #100]	; 0x64
 8007a5c:	81c2      	strh	r2, [r0, #14]
 8007a5e:	6183      	str	r3, [r0, #24]
 8007a60:	4619      	mov	r1, r3
 8007a62:	2208      	movs	r2, #8
 8007a64:	305c      	adds	r0, #92	; 0x5c
 8007a66:	f7fe fceb 	bl	8006440 <memset>
 8007a6a:	4b05      	ldr	r3, [pc, #20]	; (8007a80 <std+0x38>)
 8007a6c:	6263      	str	r3, [r4, #36]	; 0x24
 8007a6e:	4b05      	ldr	r3, [pc, #20]	; (8007a84 <std+0x3c>)
 8007a70:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a72:	4b05      	ldr	r3, [pc, #20]	; (8007a88 <std+0x40>)
 8007a74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a76:	4b05      	ldr	r3, [pc, #20]	; (8007a8c <std+0x44>)
 8007a78:	6224      	str	r4, [r4, #32]
 8007a7a:	6323      	str	r3, [r4, #48]	; 0x30
 8007a7c:	bd10      	pop	{r4, pc}
 8007a7e:	bf00      	nop
 8007a80:	080087b5 	.word	0x080087b5
 8007a84:	080087d7 	.word	0x080087d7
 8007a88:	0800880f 	.word	0x0800880f
 8007a8c:	08008833 	.word	0x08008833

08007a90 <_cleanup_r>:
 8007a90:	4901      	ldr	r1, [pc, #4]	; (8007a98 <_cleanup_r+0x8>)
 8007a92:	f000 b8af 	b.w	8007bf4 <_fwalk_reent>
 8007a96:	bf00      	nop
 8007a98:	08008b49 	.word	0x08008b49

08007a9c <__sfmoreglue>:
 8007a9c:	b570      	push	{r4, r5, r6, lr}
 8007a9e:	1e4a      	subs	r2, r1, #1
 8007aa0:	2568      	movs	r5, #104	; 0x68
 8007aa2:	4355      	muls	r5, r2
 8007aa4:	460e      	mov	r6, r1
 8007aa6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007aaa:	f000 fcbf 	bl	800842c <_malloc_r>
 8007aae:	4604      	mov	r4, r0
 8007ab0:	b140      	cbz	r0, 8007ac4 <__sfmoreglue+0x28>
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	e9c0 1600 	strd	r1, r6, [r0]
 8007ab8:	300c      	adds	r0, #12
 8007aba:	60a0      	str	r0, [r4, #8]
 8007abc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ac0:	f7fe fcbe 	bl	8006440 <memset>
 8007ac4:	4620      	mov	r0, r4
 8007ac6:	bd70      	pop	{r4, r5, r6, pc}

08007ac8 <__sfp_lock_acquire>:
 8007ac8:	4801      	ldr	r0, [pc, #4]	; (8007ad0 <__sfp_lock_acquire+0x8>)
 8007aca:	f000 b8b8 	b.w	8007c3e <__retarget_lock_acquire_recursive>
 8007ace:	bf00      	nop
 8007ad0:	20000300 	.word	0x20000300

08007ad4 <__sfp_lock_release>:
 8007ad4:	4801      	ldr	r0, [pc, #4]	; (8007adc <__sfp_lock_release+0x8>)
 8007ad6:	f000 b8b3 	b.w	8007c40 <__retarget_lock_release_recursive>
 8007ada:	bf00      	nop
 8007adc:	20000300 	.word	0x20000300

08007ae0 <__sinit_lock_acquire>:
 8007ae0:	4801      	ldr	r0, [pc, #4]	; (8007ae8 <__sinit_lock_acquire+0x8>)
 8007ae2:	f000 b8ac 	b.w	8007c3e <__retarget_lock_acquire_recursive>
 8007ae6:	bf00      	nop
 8007ae8:	200002fb 	.word	0x200002fb

08007aec <__sinit_lock_release>:
 8007aec:	4801      	ldr	r0, [pc, #4]	; (8007af4 <__sinit_lock_release+0x8>)
 8007aee:	f000 b8a7 	b.w	8007c40 <__retarget_lock_release_recursive>
 8007af2:	bf00      	nop
 8007af4:	200002fb 	.word	0x200002fb

08007af8 <__sinit>:
 8007af8:	b510      	push	{r4, lr}
 8007afa:	4604      	mov	r4, r0
 8007afc:	f7ff fff0 	bl	8007ae0 <__sinit_lock_acquire>
 8007b00:	69a3      	ldr	r3, [r4, #24]
 8007b02:	b11b      	cbz	r3, 8007b0c <__sinit+0x14>
 8007b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b08:	f7ff bff0 	b.w	8007aec <__sinit_lock_release>
 8007b0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007b10:	6523      	str	r3, [r4, #80]	; 0x50
 8007b12:	4b13      	ldr	r3, [pc, #76]	; (8007b60 <__sinit+0x68>)
 8007b14:	4a13      	ldr	r2, [pc, #76]	; (8007b64 <__sinit+0x6c>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	62a2      	str	r2, [r4, #40]	; 0x28
 8007b1a:	42a3      	cmp	r3, r4
 8007b1c:	bf04      	itt	eq
 8007b1e:	2301      	moveq	r3, #1
 8007b20:	61a3      	streq	r3, [r4, #24]
 8007b22:	4620      	mov	r0, r4
 8007b24:	f000 f820 	bl	8007b68 <__sfp>
 8007b28:	6060      	str	r0, [r4, #4]
 8007b2a:	4620      	mov	r0, r4
 8007b2c:	f000 f81c 	bl	8007b68 <__sfp>
 8007b30:	60a0      	str	r0, [r4, #8]
 8007b32:	4620      	mov	r0, r4
 8007b34:	f000 f818 	bl	8007b68 <__sfp>
 8007b38:	2200      	movs	r2, #0
 8007b3a:	60e0      	str	r0, [r4, #12]
 8007b3c:	2104      	movs	r1, #4
 8007b3e:	6860      	ldr	r0, [r4, #4]
 8007b40:	f7ff ff82 	bl	8007a48 <std>
 8007b44:	68a0      	ldr	r0, [r4, #8]
 8007b46:	2201      	movs	r2, #1
 8007b48:	2109      	movs	r1, #9
 8007b4a:	f7ff ff7d 	bl	8007a48 <std>
 8007b4e:	68e0      	ldr	r0, [r4, #12]
 8007b50:	2202      	movs	r2, #2
 8007b52:	2112      	movs	r1, #18
 8007b54:	f7ff ff78 	bl	8007a48 <std>
 8007b58:	2301      	movs	r3, #1
 8007b5a:	61a3      	str	r3, [r4, #24]
 8007b5c:	e7d2      	b.n	8007b04 <__sinit+0xc>
 8007b5e:	bf00      	nop
 8007b60:	08008f6c 	.word	0x08008f6c
 8007b64:	08007a91 	.word	0x08007a91

08007b68 <__sfp>:
 8007b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b6a:	4607      	mov	r7, r0
 8007b6c:	f7ff ffac 	bl	8007ac8 <__sfp_lock_acquire>
 8007b70:	4b1e      	ldr	r3, [pc, #120]	; (8007bec <__sfp+0x84>)
 8007b72:	681e      	ldr	r6, [r3, #0]
 8007b74:	69b3      	ldr	r3, [r6, #24]
 8007b76:	b913      	cbnz	r3, 8007b7e <__sfp+0x16>
 8007b78:	4630      	mov	r0, r6
 8007b7a:	f7ff ffbd 	bl	8007af8 <__sinit>
 8007b7e:	3648      	adds	r6, #72	; 0x48
 8007b80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007b84:	3b01      	subs	r3, #1
 8007b86:	d503      	bpl.n	8007b90 <__sfp+0x28>
 8007b88:	6833      	ldr	r3, [r6, #0]
 8007b8a:	b30b      	cbz	r3, 8007bd0 <__sfp+0x68>
 8007b8c:	6836      	ldr	r6, [r6, #0]
 8007b8e:	e7f7      	b.n	8007b80 <__sfp+0x18>
 8007b90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007b94:	b9d5      	cbnz	r5, 8007bcc <__sfp+0x64>
 8007b96:	4b16      	ldr	r3, [pc, #88]	; (8007bf0 <__sfp+0x88>)
 8007b98:	60e3      	str	r3, [r4, #12]
 8007b9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007b9e:	6665      	str	r5, [r4, #100]	; 0x64
 8007ba0:	f000 f84c 	bl	8007c3c <__retarget_lock_init_recursive>
 8007ba4:	f7ff ff96 	bl	8007ad4 <__sfp_lock_release>
 8007ba8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007bac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007bb0:	6025      	str	r5, [r4, #0]
 8007bb2:	61a5      	str	r5, [r4, #24]
 8007bb4:	2208      	movs	r2, #8
 8007bb6:	4629      	mov	r1, r5
 8007bb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007bbc:	f7fe fc40 	bl	8006440 <memset>
 8007bc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007bc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007bc8:	4620      	mov	r0, r4
 8007bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bcc:	3468      	adds	r4, #104	; 0x68
 8007bce:	e7d9      	b.n	8007b84 <__sfp+0x1c>
 8007bd0:	2104      	movs	r1, #4
 8007bd2:	4638      	mov	r0, r7
 8007bd4:	f7ff ff62 	bl	8007a9c <__sfmoreglue>
 8007bd8:	4604      	mov	r4, r0
 8007bda:	6030      	str	r0, [r6, #0]
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	d1d5      	bne.n	8007b8c <__sfp+0x24>
 8007be0:	f7ff ff78 	bl	8007ad4 <__sfp_lock_release>
 8007be4:	230c      	movs	r3, #12
 8007be6:	603b      	str	r3, [r7, #0]
 8007be8:	e7ee      	b.n	8007bc8 <__sfp+0x60>
 8007bea:	bf00      	nop
 8007bec:	08008f6c 	.word	0x08008f6c
 8007bf0:	ffff0001 	.word	0xffff0001

08007bf4 <_fwalk_reent>:
 8007bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bf8:	4606      	mov	r6, r0
 8007bfa:	4688      	mov	r8, r1
 8007bfc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007c00:	2700      	movs	r7, #0
 8007c02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c06:	f1b9 0901 	subs.w	r9, r9, #1
 8007c0a:	d505      	bpl.n	8007c18 <_fwalk_reent+0x24>
 8007c0c:	6824      	ldr	r4, [r4, #0]
 8007c0e:	2c00      	cmp	r4, #0
 8007c10:	d1f7      	bne.n	8007c02 <_fwalk_reent+0xe>
 8007c12:	4638      	mov	r0, r7
 8007c14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c18:	89ab      	ldrh	r3, [r5, #12]
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d907      	bls.n	8007c2e <_fwalk_reent+0x3a>
 8007c1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c22:	3301      	adds	r3, #1
 8007c24:	d003      	beq.n	8007c2e <_fwalk_reent+0x3a>
 8007c26:	4629      	mov	r1, r5
 8007c28:	4630      	mov	r0, r6
 8007c2a:	47c0      	blx	r8
 8007c2c:	4307      	orrs	r7, r0
 8007c2e:	3568      	adds	r5, #104	; 0x68
 8007c30:	e7e9      	b.n	8007c06 <_fwalk_reent+0x12>
	...

08007c34 <_localeconv_r>:
 8007c34:	4800      	ldr	r0, [pc, #0]	; (8007c38 <_localeconv_r+0x4>)
 8007c36:	4770      	bx	lr
 8007c38:	20000160 	.word	0x20000160

08007c3c <__retarget_lock_init_recursive>:
 8007c3c:	4770      	bx	lr

08007c3e <__retarget_lock_acquire_recursive>:
 8007c3e:	4770      	bx	lr

08007c40 <__retarget_lock_release_recursive>:
 8007c40:	4770      	bx	lr
	...

08007c44 <malloc>:
 8007c44:	4b02      	ldr	r3, [pc, #8]	; (8007c50 <malloc+0xc>)
 8007c46:	4601      	mov	r1, r0
 8007c48:	6818      	ldr	r0, [r3, #0]
 8007c4a:	f000 bbef 	b.w	800842c <_malloc_r>
 8007c4e:	bf00      	nop
 8007c50:	2000000c 	.word	0x2000000c

08007c54 <memcpy>:
 8007c54:	440a      	add	r2, r1
 8007c56:	4291      	cmp	r1, r2
 8007c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c5c:	d100      	bne.n	8007c60 <memcpy+0xc>
 8007c5e:	4770      	bx	lr
 8007c60:	b510      	push	{r4, lr}
 8007c62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c6a:	4291      	cmp	r1, r2
 8007c6c:	d1f9      	bne.n	8007c62 <memcpy+0xe>
 8007c6e:	bd10      	pop	{r4, pc}

08007c70 <_Balloc>:
 8007c70:	b570      	push	{r4, r5, r6, lr}
 8007c72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c74:	4604      	mov	r4, r0
 8007c76:	460d      	mov	r5, r1
 8007c78:	b976      	cbnz	r6, 8007c98 <_Balloc+0x28>
 8007c7a:	2010      	movs	r0, #16
 8007c7c:	f7ff ffe2 	bl	8007c44 <malloc>
 8007c80:	4602      	mov	r2, r0
 8007c82:	6260      	str	r0, [r4, #36]	; 0x24
 8007c84:	b920      	cbnz	r0, 8007c90 <_Balloc+0x20>
 8007c86:	4b18      	ldr	r3, [pc, #96]	; (8007ce8 <_Balloc+0x78>)
 8007c88:	4818      	ldr	r0, [pc, #96]	; (8007cec <_Balloc+0x7c>)
 8007c8a:	2166      	movs	r1, #102	; 0x66
 8007c8c:	f000 fea8 	bl	80089e0 <__assert_func>
 8007c90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c94:	6006      	str	r6, [r0, #0]
 8007c96:	60c6      	str	r6, [r0, #12]
 8007c98:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007c9a:	68f3      	ldr	r3, [r6, #12]
 8007c9c:	b183      	cbz	r3, 8007cc0 <_Balloc+0x50>
 8007c9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007ca6:	b9b8      	cbnz	r0, 8007cd8 <_Balloc+0x68>
 8007ca8:	2101      	movs	r1, #1
 8007caa:	fa01 f605 	lsl.w	r6, r1, r5
 8007cae:	1d72      	adds	r2, r6, #5
 8007cb0:	0092      	lsls	r2, r2, #2
 8007cb2:	4620      	mov	r0, r4
 8007cb4:	f000 fb5a 	bl	800836c <_calloc_r>
 8007cb8:	b160      	cbz	r0, 8007cd4 <_Balloc+0x64>
 8007cba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007cbe:	e00e      	b.n	8007cde <_Balloc+0x6e>
 8007cc0:	2221      	movs	r2, #33	; 0x21
 8007cc2:	2104      	movs	r1, #4
 8007cc4:	4620      	mov	r0, r4
 8007cc6:	f000 fb51 	bl	800836c <_calloc_r>
 8007cca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ccc:	60f0      	str	r0, [r6, #12]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d1e4      	bne.n	8007c9e <_Balloc+0x2e>
 8007cd4:	2000      	movs	r0, #0
 8007cd6:	bd70      	pop	{r4, r5, r6, pc}
 8007cd8:	6802      	ldr	r2, [r0, #0]
 8007cda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007cde:	2300      	movs	r3, #0
 8007ce0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ce4:	e7f7      	b.n	8007cd6 <_Balloc+0x66>
 8007ce6:	bf00      	nop
 8007ce8:	08008fb1 	.word	0x08008fb1
 8007cec:	08009098 	.word	0x08009098

08007cf0 <_Bfree>:
 8007cf0:	b570      	push	{r4, r5, r6, lr}
 8007cf2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007cf4:	4605      	mov	r5, r0
 8007cf6:	460c      	mov	r4, r1
 8007cf8:	b976      	cbnz	r6, 8007d18 <_Bfree+0x28>
 8007cfa:	2010      	movs	r0, #16
 8007cfc:	f7ff ffa2 	bl	8007c44 <malloc>
 8007d00:	4602      	mov	r2, r0
 8007d02:	6268      	str	r0, [r5, #36]	; 0x24
 8007d04:	b920      	cbnz	r0, 8007d10 <_Bfree+0x20>
 8007d06:	4b09      	ldr	r3, [pc, #36]	; (8007d2c <_Bfree+0x3c>)
 8007d08:	4809      	ldr	r0, [pc, #36]	; (8007d30 <_Bfree+0x40>)
 8007d0a:	218a      	movs	r1, #138	; 0x8a
 8007d0c:	f000 fe68 	bl	80089e0 <__assert_func>
 8007d10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d14:	6006      	str	r6, [r0, #0]
 8007d16:	60c6      	str	r6, [r0, #12]
 8007d18:	b13c      	cbz	r4, 8007d2a <_Bfree+0x3a>
 8007d1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007d1c:	6862      	ldr	r2, [r4, #4]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d24:	6021      	str	r1, [r4, #0]
 8007d26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007d2a:	bd70      	pop	{r4, r5, r6, pc}
 8007d2c:	08008fb1 	.word	0x08008fb1
 8007d30:	08009098 	.word	0x08009098

08007d34 <__multadd>:
 8007d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d38:	690e      	ldr	r6, [r1, #16]
 8007d3a:	4607      	mov	r7, r0
 8007d3c:	4698      	mov	r8, r3
 8007d3e:	460c      	mov	r4, r1
 8007d40:	f101 0014 	add.w	r0, r1, #20
 8007d44:	2300      	movs	r3, #0
 8007d46:	6805      	ldr	r5, [r0, #0]
 8007d48:	b2a9      	uxth	r1, r5
 8007d4a:	fb02 8101 	mla	r1, r2, r1, r8
 8007d4e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007d52:	0c2d      	lsrs	r5, r5, #16
 8007d54:	fb02 c505 	mla	r5, r2, r5, ip
 8007d58:	b289      	uxth	r1, r1
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007d60:	429e      	cmp	r6, r3
 8007d62:	f840 1b04 	str.w	r1, [r0], #4
 8007d66:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007d6a:	dcec      	bgt.n	8007d46 <__multadd+0x12>
 8007d6c:	f1b8 0f00 	cmp.w	r8, #0
 8007d70:	d022      	beq.n	8007db8 <__multadd+0x84>
 8007d72:	68a3      	ldr	r3, [r4, #8]
 8007d74:	42b3      	cmp	r3, r6
 8007d76:	dc19      	bgt.n	8007dac <__multadd+0x78>
 8007d78:	6861      	ldr	r1, [r4, #4]
 8007d7a:	4638      	mov	r0, r7
 8007d7c:	3101      	adds	r1, #1
 8007d7e:	f7ff ff77 	bl	8007c70 <_Balloc>
 8007d82:	4605      	mov	r5, r0
 8007d84:	b928      	cbnz	r0, 8007d92 <__multadd+0x5e>
 8007d86:	4602      	mov	r2, r0
 8007d88:	4b0d      	ldr	r3, [pc, #52]	; (8007dc0 <__multadd+0x8c>)
 8007d8a:	480e      	ldr	r0, [pc, #56]	; (8007dc4 <__multadd+0x90>)
 8007d8c:	21b5      	movs	r1, #181	; 0xb5
 8007d8e:	f000 fe27 	bl	80089e0 <__assert_func>
 8007d92:	6922      	ldr	r2, [r4, #16]
 8007d94:	3202      	adds	r2, #2
 8007d96:	f104 010c 	add.w	r1, r4, #12
 8007d9a:	0092      	lsls	r2, r2, #2
 8007d9c:	300c      	adds	r0, #12
 8007d9e:	f7ff ff59 	bl	8007c54 <memcpy>
 8007da2:	4621      	mov	r1, r4
 8007da4:	4638      	mov	r0, r7
 8007da6:	f7ff ffa3 	bl	8007cf0 <_Bfree>
 8007daa:	462c      	mov	r4, r5
 8007dac:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007db0:	3601      	adds	r6, #1
 8007db2:	f8c3 8014 	str.w	r8, [r3, #20]
 8007db6:	6126      	str	r6, [r4, #16]
 8007db8:	4620      	mov	r0, r4
 8007dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dbe:	bf00      	nop
 8007dc0:	08009027 	.word	0x08009027
 8007dc4:	08009098 	.word	0x08009098

08007dc8 <__hi0bits>:
 8007dc8:	0c03      	lsrs	r3, r0, #16
 8007dca:	041b      	lsls	r3, r3, #16
 8007dcc:	b9d3      	cbnz	r3, 8007e04 <__hi0bits+0x3c>
 8007dce:	0400      	lsls	r0, r0, #16
 8007dd0:	2310      	movs	r3, #16
 8007dd2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007dd6:	bf04      	itt	eq
 8007dd8:	0200      	lsleq	r0, r0, #8
 8007dda:	3308      	addeq	r3, #8
 8007ddc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007de0:	bf04      	itt	eq
 8007de2:	0100      	lsleq	r0, r0, #4
 8007de4:	3304      	addeq	r3, #4
 8007de6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007dea:	bf04      	itt	eq
 8007dec:	0080      	lsleq	r0, r0, #2
 8007dee:	3302      	addeq	r3, #2
 8007df0:	2800      	cmp	r0, #0
 8007df2:	db05      	blt.n	8007e00 <__hi0bits+0x38>
 8007df4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007df8:	f103 0301 	add.w	r3, r3, #1
 8007dfc:	bf08      	it	eq
 8007dfe:	2320      	moveq	r3, #32
 8007e00:	4618      	mov	r0, r3
 8007e02:	4770      	bx	lr
 8007e04:	2300      	movs	r3, #0
 8007e06:	e7e4      	b.n	8007dd2 <__hi0bits+0xa>

08007e08 <__lo0bits>:
 8007e08:	6803      	ldr	r3, [r0, #0]
 8007e0a:	f013 0207 	ands.w	r2, r3, #7
 8007e0e:	4601      	mov	r1, r0
 8007e10:	d00b      	beq.n	8007e2a <__lo0bits+0x22>
 8007e12:	07da      	lsls	r2, r3, #31
 8007e14:	d424      	bmi.n	8007e60 <__lo0bits+0x58>
 8007e16:	0798      	lsls	r0, r3, #30
 8007e18:	bf49      	itett	mi
 8007e1a:	085b      	lsrmi	r3, r3, #1
 8007e1c:	089b      	lsrpl	r3, r3, #2
 8007e1e:	2001      	movmi	r0, #1
 8007e20:	600b      	strmi	r3, [r1, #0]
 8007e22:	bf5c      	itt	pl
 8007e24:	600b      	strpl	r3, [r1, #0]
 8007e26:	2002      	movpl	r0, #2
 8007e28:	4770      	bx	lr
 8007e2a:	b298      	uxth	r0, r3
 8007e2c:	b9b0      	cbnz	r0, 8007e5c <__lo0bits+0x54>
 8007e2e:	0c1b      	lsrs	r3, r3, #16
 8007e30:	2010      	movs	r0, #16
 8007e32:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007e36:	bf04      	itt	eq
 8007e38:	0a1b      	lsreq	r3, r3, #8
 8007e3a:	3008      	addeq	r0, #8
 8007e3c:	071a      	lsls	r2, r3, #28
 8007e3e:	bf04      	itt	eq
 8007e40:	091b      	lsreq	r3, r3, #4
 8007e42:	3004      	addeq	r0, #4
 8007e44:	079a      	lsls	r2, r3, #30
 8007e46:	bf04      	itt	eq
 8007e48:	089b      	lsreq	r3, r3, #2
 8007e4a:	3002      	addeq	r0, #2
 8007e4c:	07da      	lsls	r2, r3, #31
 8007e4e:	d403      	bmi.n	8007e58 <__lo0bits+0x50>
 8007e50:	085b      	lsrs	r3, r3, #1
 8007e52:	f100 0001 	add.w	r0, r0, #1
 8007e56:	d005      	beq.n	8007e64 <__lo0bits+0x5c>
 8007e58:	600b      	str	r3, [r1, #0]
 8007e5a:	4770      	bx	lr
 8007e5c:	4610      	mov	r0, r2
 8007e5e:	e7e8      	b.n	8007e32 <__lo0bits+0x2a>
 8007e60:	2000      	movs	r0, #0
 8007e62:	4770      	bx	lr
 8007e64:	2020      	movs	r0, #32
 8007e66:	4770      	bx	lr

08007e68 <__i2b>:
 8007e68:	b510      	push	{r4, lr}
 8007e6a:	460c      	mov	r4, r1
 8007e6c:	2101      	movs	r1, #1
 8007e6e:	f7ff feff 	bl	8007c70 <_Balloc>
 8007e72:	4602      	mov	r2, r0
 8007e74:	b928      	cbnz	r0, 8007e82 <__i2b+0x1a>
 8007e76:	4b05      	ldr	r3, [pc, #20]	; (8007e8c <__i2b+0x24>)
 8007e78:	4805      	ldr	r0, [pc, #20]	; (8007e90 <__i2b+0x28>)
 8007e7a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007e7e:	f000 fdaf 	bl	80089e0 <__assert_func>
 8007e82:	2301      	movs	r3, #1
 8007e84:	6144      	str	r4, [r0, #20]
 8007e86:	6103      	str	r3, [r0, #16]
 8007e88:	bd10      	pop	{r4, pc}
 8007e8a:	bf00      	nop
 8007e8c:	08009027 	.word	0x08009027
 8007e90:	08009098 	.word	0x08009098

08007e94 <__multiply>:
 8007e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e98:	4614      	mov	r4, r2
 8007e9a:	690a      	ldr	r2, [r1, #16]
 8007e9c:	6923      	ldr	r3, [r4, #16]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	bfb8      	it	lt
 8007ea2:	460b      	movlt	r3, r1
 8007ea4:	460d      	mov	r5, r1
 8007ea6:	bfbc      	itt	lt
 8007ea8:	4625      	movlt	r5, r4
 8007eaa:	461c      	movlt	r4, r3
 8007eac:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007eb0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007eb4:	68ab      	ldr	r3, [r5, #8]
 8007eb6:	6869      	ldr	r1, [r5, #4]
 8007eb8:	eb0a 0709 	add.w	r7, sl, r9
 8007ebc:	42bb      	cmp	r3, r7
 8007ebe:	b085      	sub	sp, #20
 8007ec0:	bfb8      	it	lt
 8007ec2:	3101      	addlt	r1, #1
 8007ec4:	f7ff fed4 	bl	8007c70 <_Balloc>
 8007ec8:	b930      	cbnz	r0, 8007ed8 <__multiply+0x44>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	4b42      	ldr	r3, [pc, #264]	; (8007fd8 <__multiply+0x144>)
 8007ece:	4843      	ldr	r0, [pc, #268]	; (8007fdc <__multiply+0x148>)
 8007ed0:	f240 115d 	movw	r1, #349	; 0x15d
 8007ed4:	f000 fd84 	bl	80089e0 <__assert_func>
 8007ed8:	f100 0614 	add.w	r6, r0, #20
 8007edc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007ee0:	4633      	mov	r3, r6
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	4543      	cmp	r3, r8
 8007ee6:	d31e      	bcc.n	8007f26 <__multiply+0x92>
 8007ee8:	f105 0c14 	add.w	ip, r5, #20
 8007eec:	f104 0314 	add.w	r3, r4, #20
 8007ef0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007ef4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007ef8:	9202      	str	r2, [sp, #8]
 8007efa:	ebac 0205 	sub.w	r2, ip, r5
 8007efe:	3a15      	subs	r2, #21
 8007f00:	f022 0203 	bic.w	r2, r2, #3
 8007f04:	3204      	adds	r2, #4
 8007f06:	f105 0115 	add.w	r1, r5, #21
 8007f0a:	458c      	cmp	ip, r1
 8007f0c:	bf38      	it	cc
 8007f0e:	2204      	movcc	r2, #4
 8007f10:	9201      	str	r2, [sp, #4]
 8007f12:	9a02      	ldr	r2, [sp, #8]
 8007f14:	9303      	str	r3, [sp, #12]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d808      	bhi.n	8007f2c <__multiply+0x98>
 8007f1a:	2f00      	cmp	r7, #0
 8007f1c:	dc55      	bgt.n	8007fca <__multiply+0x136>
 8007f1e:	6107      	str	r7, [r0, #16]
 8007f20:	b005      	add	sp, #20
 8007f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f26:	f843 2b04 	str.w	r2, [r3], #4
 8007f2a:	e7db      	b.n	8007ee4 <__multiply+0x50>
 8007f2c:	f8b3 a000 	ldrh.w	sl, [r3]
 8007f30:	f1ba 0f00 	cmp.w	sl, #0
 8007f34:	d020      	beq.n	8007f78 <__multiply+0xe4>
 8007f36:	f105 0e14 	add.w	lr, r5, #20
 8007f3a:	46b1      	mov	r9, r6
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007f42:	f8d9 b000 	ldr.w	fp, [r9]
 8007f46:	b2a1      	uxth	r1, r4
 8007f48:	fa1f fb8b 	uxth.w	fp, fp
 8007f4c:	fb0a b101 	mla	r1, sl, r1, fp
 8007f50:	4411      	add	r1, r2
 8007f52:	f8d9 2000 	ldr.w	r2, [r9]
 8007f56:	0c24      	lsrs	r4, r4, #16
 8007f58:	0c12      	lsrs	r2, r2, #16
 8007f5a:	fb0a 2404 	mla	r4, sl, r4, r2
 8007f5e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007f62:	b289      	uxth	r1, r1
 8007f64:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007f68:	45f4      	cmp	ip, lr
 8007f6a:	f849 1b04 	str.w	r1, [r9], #4
 8007f6e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007f72:	d8e4      	bhi.n	8007f3e <__multiply+0xaa>
 8007f74:	9901      	ldr	r1, [sp, #4]
 8007f76:	5072      	str	r2, [r6, r1]
 8007f78:	9a03      	ldr	r2, [sp, #12]
 8007f7a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007f7e:	3304      	adds	r3, #4
 8007f80:	f1b9 0f00 	cmp.w	r9, #0
 8007f84:	d01f      	beq.n	8007fc6 <__multiply+0x132>
 8007f86:	6834      	ldr	r4, [r6, #0]
 8007f88:	f105 0114 	add.w	r1, r5, #20
 8007f8c:	46b6      	mov	lr, r6
 8007f8e:	f04f 0a00 	mov.w	sl, #0
 8007f92:	880a      	ldrh	r2, [r1, #0]
 8007f94:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007f98:	fb09 b202 	mla	r2, r9, r2, fp
 8007f9c:	4492      	add	sl, r2
 8007f9e:	b2a4      	uxth	r4, r4
 8007fa0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007fa4:	f84e 4b04 	str.w	r4, [lr], #4
 8007fa8:	f851 4b04 	ldr.w	r4, [r1], #4
 8007fac:	f8be 2000 	ldrh.w	r2, [lr]
 8007fb0:	0c24      	lsrs	r4, r4, #16
 8007fb2:	fb09 2404 	mla	r4, r9, r4, r2
 8007fb6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007fba:	458c      	cmp	ip, r1
 8007fbc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007fc0:	d8e7      	bhi.n	8007f92 <__multiply+0xfe>
 8007fc2:	9a01      	ldr	r2, [sp, #4]
 8007fc4:	50b4      	str	r4, [r6, r2]
 8007fc6:	3604      	adds	r6, #4
 8007fc8:	e7a3      	b.n	8007f12 <__multiply+0x7e>
 8007fca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d1a5      	bne.n	8007f1e <__multiply+0x8a>
 8007fd2:	3f01      	subs	r7, #1
 8007fd4:	e7a1      	b.n	8007f1a <__multiply+0x86>
 8007fd6:	bf00      	nop
 8007fd8:	08009027 	.word	0x08009027
 8007fdc:	08009098 	.word	0x08009098

08007fe0 <__pow5mult>:
 8007fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fe4:	4615      	mov	r5, r2
 8007fe6:	f012 0203 	ands.w	r2, r2, #3
 8007fea:	4606      	mov	r6, r0
 8007fec:	460f      	mov	r7, r1
 8007fee:	d007      	beq.n	8008000 <__pow5mult+0x20>
 8007ff0:	4c25      	ldr	r4, [pc, #148]	; (8008088 <__pow5mult+0xa8>)
 8007ff2:	3a01      	subs	r2, #1
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007ffa:	f7ff fe9b 	bl	8007d34 <__multadd>
 8007ffe:	4607      	mov	r7, r0
 8008000:	10ad      	asrs	r5, r5, #2
 8008002:	d03d      	beq.n	8008080 <__pow5mult+0xa0>
 8008004:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008006:	b97c      	cbnz	r4, 8008028 <__pow5mult+0x48>
 8008008:	2010      	movs	r0, #16
 800800a:	f7ff fe1b 	bl	8007c44 <malloc>
 800800e:	4602      	mov	r2, r0
 8008010:	6270      	str	r0, [r6, #36]	; 0x24
 8008012:	b928      	cbnz	r0, 8008020 <__pow5mult+0x40>
 8008014:	4b1d      	ldr	r3, [pc, #116]	; (800808c <__pow5mult+0xac>)
 8008016:	481e      	ldr	r0, [pc, #120]	; (8008090 <__pow5mult+0xb0>)
 8008018:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800801c:	f000 fce0 	bl	80089e0 <__assert_func>
 8008020:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008024:	6004      	str	r4, [r0, #0]
 8008026:	60c4      	str	r4, [r0, #12]
 8008028:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800802c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008030:	b94c      	cbnz	r4, 8008046 <__pow5mult+0x66>
 8008032:	f240 2171 	movw	r1, #625	; 0x271
 8008036:	4630      	mov	r0, r6
 8008038:	f7ff ff16 	bl	8007e68 <__i2b>
 800803c:	2300      	movs	r3, #0
 800803e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008042:	4604      	mov	r4, r0
 8008044:	6003      	str	r3, [r0, #0]
 8008046:	f04f 0900 	mov.w	r9, #0
 800804a:	07eb      	lsls	r3, r5, #31
 800804c:	d50a      	bpl.n	8008064 <__pow5mult+0x84>
 800804e:	4639      	mov	r1, r7
 8008050:	4622      	mov	r2, r4
 8008052:	4630      	mov	r0, r6
 8008054:	f7ff ff1e 	bl	8007e94 <__multiply>
 8008058:	4639      	mov	r1, r7
 800805a:	4680      	mov	r8, r0
 800805c:	4630      	mov	r0, r6
 800805e:	f7ff fe47 	bl	8007cf0 <_Bfree>
 8008062:	4647      	mov	r7, r8
 8008064:	106d      	asrs	r5, r5, #1
 8008066:	d00b      	beq.n	8008080 <__pow5mult+0xa0>
 8008068:	6820      	ldr	r0, [r4, #0]
 800806a:	b938      	cbnz	r0, 800807c <__pow5mult+0x9c>
 800806c:	4622      	mov	r2, r4
 800806e:	4621      	mov	r1, r4
 8008070:	4630      	mov	r0, r6
 8008072:	f7ff ff0f 	bl	8007e94 <__multiply>
 8008076:	6020      	str	r0, [r4, #0]
 8008078:	f8c0 9000 	str.w	r9, [r0]
 800807c:	4604      	mov	r4, r0
 800807e:	e7e4      	b.n	800804a <__pow5mult+0x6a>
 8008080:	4638      	mov	r0, r7
 8008082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008086:	bf00      	nop
 8008088:	080091e8 	.word	0x080091e8
 800808c:	08008fb1 	.word	0x08008fb1
 8008090:	08009098 	.word	0x08009098

08008094 <__lshift>:
 8008094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008098:	460c      	mov	r4, r1
 800809a:	6849      	ldr	r1, [r1, #4]
 800809c:	6923      	ldr	r3, [r4, #16]
 800809e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80080a2:	68a3      	ldr	r3, [r4, #8]
 80080a4:	4607      	mov	r7, r0
 80080a6:	4691      	mov	r9, r2
 80080a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80080ac:	f108 0601 	add.w	r6, r8, #1
 80080b0:	42b3      	cmp	r3, r6
 80080b2:	db0b      	blt.n	80080cc <__lshift+0x38>
 80080b4:	4638      	mov	r0, r7
 80080b6:	f7ff fddb 	bl	8007c70 <_Balloc>
 80080ba:	4605      	mov	r5, r0
 80080bc:	b948      	cbnz	r0, 80080d2 <__lshift+0x3e>
 80080be:	4602      	mov	r2, r0
 80080c0:	4b28      	ldr	r3, [pc, #160]	; (8008164 <__lshift+0xd0>)
 80080c2:	4829      	ldr	r0, [pc, #164]	; (8008168 <__lshift+0xd4>)
 80080c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80080c8:	f000 fc8a 	bl	80089e0 <__assert_func>
 80080cc:	3101      	adds	r1, #1
 80080ce:	005b      	lsls	r3, r3, #1
 80080d0:	e7ee      	b.n	80080b0 <__lshift+0x1c>
 80080d2:	2300      	movs	r3, #0
 80080d4:	f100 0114 	add.w	r1, r0, #20
 80080d8:	f100 0210 	add.w	r2, r0, #16
 80080dc:	4618      	mov	r0, r3
 80080de:	4553      	cmp	r3, sl
 80080e0:	db33      	blt.n	800814a <__lshift+0xb6>
 80080e2:	6920      	ldr	r0, [r4, #16]
 80080e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80080e8:	f104 0314 	add.w	r3, r4, #20
 80080ec:	f019 091f 	ands.w	r9, r9, #31
 80080f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80080f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80080f8:	d02b      	beq.n	8008152 <__lshift+0xbe>
 80080fa:	f1c9 0e20 	rsb	lr, r9, #32
 80080fe:	468a      	mov	sl, r1
 8008100:	2200      	movs	r2, #0
 8008102:	6818      	ldr	r0, [r3, #0]
 8008104:	fa00 f009 	lsl.w	r0, r0, r9
 8008108:	4302      	orrs	r2, r0
 800810a:	f84a 2b04 	str.w	r2, [sl], #4
 800810e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008112:	459c      	cmp	ip, r3
 8008114:	fa22 f20e 	lsr.w	r2, r2, lr
 8008118:	d8f3      	bhi.n	8008102 <__lshift+0x6e>
 800811a:	ebac 0304 	sub.w	r3, ip, r4
 800811e:	3b15      	subs	r3, #21
 8008120:	f023 0303 	bic.w	r3, r3, #3
 8008124:	3304      	adds	r3, #4
 8008126:	f104 0015 	add.w	r0, r4, #21
 800812a:	4584      	cmp	ip, r0
 800812c:	bf38      	it	cc
 800812e:	2304      	movcc	r3, #4
 8008130:	50ca      	str	r2, [r1, r3]
 8008132:	b10a      	cbz	r2, 8008138 <__lshift+0xa4>
 8008134:	f108 0602 	add.w	r6, r8, #2
 8008138:	3e01      	subs	r6, #1
 800813a:	4638      	mov	r0, r7
 800813c:	612e      	str	r6, [r5, #16]
 800813e:	4621      	mov	r1, r4
 8008140:	f7ff fdd6 	bl	8007cf0 <_Bfree>
 8008144:	4628      	mov	r0, r5
 8008146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800814a:	f842 0f04 	str.w	r0, [r2, #4]!
 800814e:	3301      	adds	r3, #1
 8008150:	e7c5      	b.n	80080de <__lshift+0x4a>
 8008152:	3904      	subs	r1, #4
 8008154:	f853 2b04 	ldr.w	r2, [r3], #4
 8008158:	f841 2f04 	str.w	r2, [r1, #4]!
 800815c:	459c      	cmp	ip, r3
 800815e:	d8f9      	bhi.n	8008154 <__lshift+0xc0>
 8008160:	e7ea      	b.n	8008138 <__lshift+0xa4>
 8008162:	bf00      	nop
 8008164:	08009027 	.word	0x08009027
 8008168:	08009098 	.word	0x08009098

0800816c <__mcmp>:
 800816c:	b530      	push	{r4, r5, lr}
 800816e:	6902      	ldr	r2, [r0, #16]
 8008170:	690c      	ldr	r4, [r1, #16]
 8008172:	1b12      	subs	r2, r2, r4
 8008174:	d10e      	bne.n	8008194 <__mcmp+0x28>
 8008176:	f100 0314 	add.w	r3, r0, #20
 800817a:	3114      	adds	r1, #20
 800817c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008180:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008184:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008188:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800818c:	42a5      	cmp	r5, r4
 800818e:	d003      	beq.n	8008198 <__mcmp+0x2c>
 8008190:	d305      	bcc.n	800819e <__mcmp+0x32>
 8008192:	2201      	movs	r2, #1
 8008194:	4610      	mov	r0, r2
 8008196:	bd30      	pop	{r4, r5, pc}
 8008198:	4283      	cmp	r3, r0
 800819a:	d3f3      	bcc.n	8008184 <__mcmp+0x18>
 800819c:	e7fa      	b.n	8008194 <__mcmp+0x28>
 800819e:	f04f 32ff 	mov.w	r2, #4294967295
 80081a2:	e7f7      	b.n	8008194 <__mcmp+0x28>

080081a4 <__mdiff>:
 80081a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081a8:	460c      	mov	r4, r1
 80081aa:	4606      	mov	r6, r0
 80081ac:	4611      	mov	r1, r2
 80081ae:	4620      	mov	r0, r4
 80081b0:	4617      	mov	r7, r2
 80081b2:	f7ff ffdb 	bl	800816c <__mcmp>
 80081b6:	1e05      	subs	r5, r0, #0
 80081b8:	d110      	bne.n	80081dc <__mdiff+0x38>
 80081ba:	4629      	mov	r1, r5
 80081bc:	4630      	mov	r0, r6
 80081be:	f7ff fd57 	bl	8007c70 <_Balloc>
 80081c2:	b930      	cbnz	r0, 80081d2 <__mdiff+0x2e>
 80081c4:	4b39      	ldr	r3, [pc, #228]	; (80082ac <__mdiff+0x108>)
 80081c6:	4602      	mov	r2, r0
 80081c8:	f240 2132 	movw	r1, #562	; 0x232
 80081cc:	4838      	ldr	r0, [pc, #224]	; (80082b0 <__mdiff+0x10c>)
 80081ce:	f000 fc07 	bl	80089e0 <__assert_func>
 80081d2:	2301      	movs	r3, #1
 80081d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80081d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081dc:	bfa4      	itt	ge
 80081de:	463b      	movge	r3, r7
 80081e0:	4627      	movge	r7, r4
 80081e2:	4630      	mov	r0, r6
 80081e4:	6879      	ldr	r1, [r7, #4]
 80081e6:	bfa6      	itte	ge
 80081e8:	461c      	movge	r4, r3
 80081ea:	2500      	movge	r5, #0
 80081ec:	2501      	movlt	r5, #1
 80081ee:	f7ff fd3f 	bl	8007c70 <_Balloc>
 80081f2:	b920      	cbnz	r0, 80081fe <__mdiff+0x5a>
 80081f4:	4b2d      	ldr	r3, [pc, #180]	; (80082ac <__mdiff+0x108>)
 80081f6:	4602      	mov	r2, r0
 80081f8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80081fc:	e7e6      	b.n	80081cc <__mdiff+0x28>
 80081fe:	693e      	ldr	r6, [r7, #16]
 8008200:	60c5      	str	r5, [r0, #12]
 8008202:	6925      	ldr	r5, [r4, #16]
 8008204:	f107 0114 	add.w	r1, r7, #20
 8008208:	f104 0914 	add.w	r9, r4, #20
 800820c:	f100 0e14 	add.w	lr, r0, #20
 8008210:	f107 0210 	add.w	r2, r7, #16
 8008214:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008218:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800821c:	46f2      	mov	sl, lr
 800821e:	2700      	movs	r7, #0
 8008220:	f859 3b04 	ldr.w	r3, [r9], #4
 8008224:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008228:	fa1f f883 	uxth.w	r8, r3
 800822c:	fa17 f78b 	uxtah	r7, r7, fp
 8008230:	0c1b      	lsrs	r3, r3, #16
 8008232:	eba7 0808 	sub.w	r8, r7, r8
 8008236:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800823a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800823e:	fa1f f888 	uxth.w	r8, r8
 8008242:	141f      	asrs	r7, r3, #16
 8008244:	454d      	cmp	r5, r9
 8008246:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800824a:	f84a 3b04 	str.w	r3, [sl], #4
 800824e:	d8e7      	bhi.n	8008220 <__mdiff+0x7c>
 8008250:	1b2b      	subs	r3, r5, r4
 8008252:	3b15      	subs	r3, #21
 8008254:	f023 0303 	bic.w	r3, r3, #3
 8008258:	3304      	adds	r3, #4
 800825a:	3415      	adds	r4, #21
 800825c:	42a5      	cmp	r5, r4
 800825e:	bf38      	it	cc
 8008260:	2304      	movcc	r3, #4
 8008262:	4419      	add	r1, r3
 8008264:	4473      	add	r3, lr
 8008266:	469e      	mov	lr, r3
 8008268:	460d      	mov	r5, r1
 800826a:	4565      	cmp	r5, ip
 800826c:	d30e      	bcc.n	800828c <__mdiff+0xe8>
 800826e:	f10c 0203 	add.w	r2, ip, #3
 8008272:	1a52      	subs	r2, r2, r1
 8008274:	f022 0203 	bic.w	r2, r2, #3
 8008278:	3903      	subs	r1, #3
 800827a:	458c      	cmp	ip, r1
 800827c:	bf38      	it	cc
 800827e:	2200      	movcc	r2, #0
 8008280:	441a      	add	r2, r3
 8008282:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008286:	b17b      	cbz	r3, 80082a8 <__mdiff+0x104>
 8008288:	6106      	str	r6, [r0, #16]
 800828a:	e7a5      	b.n	80081d8 <__mdiff+0x34>
 800828c:	f855 8b04 	ldr.w	r8, [r5], #4
 8008290:	fa17 f488 	uxtah	r4, r7, r8
 8008294:	1422      	asrs	r2, r4, #16
 8008296:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800829a:	b2a4      	uxth	r4, r4
 800829c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80082a0:	f84e 4b04 	str.w	r4, [lr], #4
 80082a4:	1417      	asrs	r7, r2, #16
 80082a6:	e7e0      	b.n	800826a <__mdiff+0xc6>
 80082a8:	3e01      	subs	r6, #1
 80082aa:	e7ea      	b.n	8008282 <__mdiff+0xde>
 80082ac:	08009027 	.word	0x08009027
 80082b0:	08009098 	.word	0x08009098

080082b4 <__d2b>:
 80082b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80082b8:	4689      	mov	r9, r1
 80082ba:	2101      	movs	r1, #1
 80082bc:	ec57 6b10 	vmov	r6, r7, d0
 80082c0:	4690      	mov	r8, r2
 80082c2:	f7ff fcd5 	bl	8007c70 <_Balloc>
 80082c6:	4604      	mov	r4, r0
 80082c8:	b930      	cbnz	r0, 80082d8 <__d2b+0x24>
 80082ca:	4602      	mov	r2, r0
 80082cc:	4b25      	ldr	r3, [pc, #148]	; (8008364 <__d2b+0xb0>)
 80082ce:	4826      	ldr	r0, [pc, #152]	; (8008368 <__d2b+0xb4>)
 80082d0:	f240 310a 	movw	r1, #778	; 0x30a
 80082d4:	f000 fb84 	bl	80089e0 <__assert_func>
 80082d8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80082dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80082e0:	bb35      	cbnz	r5, 8008330 <__d2b+0x7c>
 80082e2:	2e00      	cmp	r6, #0
 80082e4:	9301      	str	r3, [sp, #4]
 80082e6:	d028      	beq.n	800833a <__d2b+0x86>
 80082e8:	4668      	mov	r0, sp
 80082ea:	9600      	str	r6, [sp, #0]
 80082ec:	f7ff fd8c 	bl	8007e08 <__lo0bits>
 80082f0:	9900      	ldr	r1, [sp, #0]
 80082f2:	b300      	cbz	r0, 8008336 <__d2b+0x82>
 80082f4:	9a01      	ldr	r2, [sp, #4]
 80082f6:	f1c0 0320 	rsb	r3, r0, #32
 80082fa:	fa02 f303 	lsl.w	r3, r2, r3
 80082fe:	430b      	orrs	r3, r1
 8008300:	40c2      	lsrs	r2, r0
 8008302:	6163      	str	r3, [r4, #20]
 8008304:	9201      	str	r2, [sp, #4]
 8008306:	9b01      	ldr	r3, [sp, #4]
 8008308:	61a3      	str	r3, [r4, #24]
 800830a:	2b00      	cmp	r3, #0
 800830c:	bf14      	ite	ne
 800830e:	2202      	movne	r2, #2
 8008310:	2201      	moveq	r2, #1
 8008312:	6122      	str	r2, [r4, #16]
 8008314:	b1d5      	cbz	r5, 800834c <__d2b+0x98>
 8008316:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800831a:	4405      	add	r5, r0
 800831c:	f8c9 5000 	str.w	r5, [r9]
 8008320:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008324:	f8c8 0000 	str.w	r0, [r8]
 8008328:	4620      	mov	r0, r4
 800832a:	b003      	add	sp, #12
 800832c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008330:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008334:	e7d5      	b.n	80082e2 <__d2b+0x2e>
 8008336:	6161      	str	r1, [r4, #20]
 8008338:	e7e5      	b.n	8008306 <__d2b+0x52>
 800833a:	a801      	add	r0, sp, #4
 800833c:	f7ff fd64 	bl	8007e08 <__lo0bits>
 8008340:	9b01      	ldr	r3, [sp, #4]
 8008342:	6163      	str	r3, [r4, #20]
 8008344:	2201      	movs	r2, #1
 8008346:	6122      	str	r2, [r4, #16]
 8008348:	3020      	adds	r0, #32
 800834a:	e7e3      	b.n	8008314 <__d2b+0x60>
 800834c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008350:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008354:	f8c9 0000 	str.w	r0, [r9]
 8008358:	6918      	ldr	r0, [r3, #16]
 800835a:	f7ff fd35 	bl	8007dc8 <__hi0bits>
 800835e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008362:	e7df      	b.n	8008324 <__d2b+0x70>
 8008364:	08009027 	.word	0x08009027
 8008368:	08009098 	.word	0x08009098

0800836c <_calloc_r>:
 800836c:	b513      	push	{r0, r1, r4, lr}
 800836e:	434a      	muls	r2, r1
 8008370:	4611      	mov	r1, r2
 8008372:	9201      	str	r2, [sp, #4]
 8008374:	f000 f85a 	bl	800842c <_malloc_r>
 8008378:	4604      	mov	r4, r0
 800837a:	b118      	cbz	r0, 8008384 <_calloc_r+0x18>
 800837c:	9a01      	ldr	r2, [sp, #4]
 800837e:	2100      	movs	r1, #0
 8008380:	f7fe f85e 	bl	8006440 <memset>
 8008384:	4620      	mov	r0, r4
 8008386:	b002      	add	sp, #8
 8008388:	bd10      	pop	{r4, pc}
	...

0800838c <_free_r>:
 800838c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800838e:	2900      	cmp	r1, #0
 8008390:	d048      	beq.n	8008424 <_free_r+0x98>
 8008392:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008396:	9001      	str	r0, [sp, #4]
 8008398:	2b00      	cmp	r3, #0
 800839a:	f1a1 0404 	sub.w	r4, r1, #4
 800839e:	bfb8      	it	lt
 80083a0:	18e4      	addlt	r4, r4, r3
 80083a2:	f000 fca7 	bl	8008cf4 <__malloc_lock>
 80083a6:	4a20      	ldr	r2, [pc, #128]	; (8008428 <_free_r+0x9c>)
 80083a8:	9801      	ldr	r0, [sp, #4]
 80083aa:	6813      	ldr	r3, [r2, #0]
 80083ac:	4615      	mov	r5, r2
 80083ae:	b933      	cbnz	r3, 80083be <_free_r+0x32>
 80083b0:	6063      	str	r3, [r4, #4]
 80083b2:	6014      	str	r4, [r2, #0]
 80083b4:	b003      	add	sp, #12
 80083b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083ba:	f000 bca1 	b.w	8008d00 <__malloc_unlock>
 80083be:	42a3      	cmp	r3, r4
 80083c0:	d90b      	bls.n	80083da <_free_r+0x4e>
 80083c2:	6821      	ldr	r1, [r4, #0]
 80083c4:	1862      	adds	r2, r4, r1
 80083c6:	4293      	cmp	r3, r2
 80083c8:	bf04      	itt	eq
 80083ca:	681a      	ldreq	r2, [r3, #0]
 80083cc:	685b      	ldreq	r3, [r3, #4]
 80083ce:	6063      	str	r3, [r4, #4]
 80083d0:	bf04      	itt	eq
 80083d2:	1852      	addeq	r2, r2, r1
 80083d4:	6022      	streq	r2, [r4, #0]
 80083d6:	602c      	str	r4, [r5, #0]
 80083d8:	e7ec      	b.n	80083b4 <_free_r+0x28>
 80083da:	461a      	mov	r2, r3
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	b10b      	cbz	r3, 80083e4 <_free_r+0x58>
 80083e0:	42a3      	cmp	r3, r4
 80083e2:	d9fa      	bls.n	80083da <_free_r+0x4e>
 80083e4:	6811      	ldr	r1, [r2, #0]
 80083e6:	1855      	adds	r5, r2, r1
 80083e8:	42a5      	cmp	r5, r4
 80083ea:	d10b      	bne.n	8008404 <_free_r+0x78>
 80083ec:	6824      	ldr	r4, [r4, #0]
 80083ee:	4421      	add	r1, r4
 80083f0:	1854      	adds	r4, r2, r1
 80083f2:	42a3      	cmp	r3, r4
 80083f4:	6011      	str	r1, [r2, #0]
 80083f6:	d1dd      	bne.n	80083b4 <_free_r+0x28>
 80083f8:	681c      	ldr	r4, [r3, #0]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	6053      	str	r3, [r2, #4]
 80083fe:	4421      	add	r1, r4
 8008400:	6011      	str	r1, [r2, #0]
 8008402:	e7d7      	b.n	80083b4 <_free_r+0x28>
 8008404:	d902      	bls.n	800840c <_free_r+0x80>
 8008406:	230c      	movs	r3, #12
 8008408:	6003      	str	r3, [r0, #0]
 800840a:	e7d3      	b.n	80083b4 <_free_r+0x28>
 800840c:	6825      	ldr	r5, [r4, #0]
 800840e:	1961      	adds	r1, r4, r5
 8008410:	428b      	cmp	r3, r1
 8008412:	bf04      	itt	eq
 8008414:	6819      	ldreq	r1, [r3, #0]
 8008416:	685b      	ldreq	r3, [r3, #4]
 8008418:	6063      	str	r3, [r4, #4]
 800841a:	bf04      	itt	eq
 800841c:	1949      	addeq	r1, r1, r5
 800841e:	6021      	streq	r1, [r4, #0]
 8008420:	6054      	str	r4, [r2, #4]
 8008422:	e7c7      	b.n	80083b4 <_free_r+0x28>
 8008424:	b003      	add	sp, #12
 8008426:	bd30      	pop	{r4, r5, pc}
 8008428:	200001fc 	.word	0x200001fc

0800842c <_malloc_r>:
 800842c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800842e:	1ccd      	adds	r5, r1, #3
 8008430:	f025 0503 	bic.w	r5, r5, #3
 8008434:	3508      	adds	r5, #8
 8008436:	2d0c      	cmp	r5, #12
 8008438:	bf38      	it	cc
 800843a:	250c      	movcc	r5, #12
 800843c:	2d00      	cmp	r5, #0
 800843e:	4606      	mov	r6, r0
 8008440:	db01      	blt.n	8008446 <_malloc_r+0x1a>
 8008442:	42a9      	cmp	r1, r5
 8008444:	d903      	bls.n	800844e <_malloc_r+0x22>
 8008446:	230c      	movs	r3, #12
 8008448:	6033      	str	r3, [r6, #0]
 800844a:	2000      	movs	r0, #0
 800844c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800844e:	f000 fc51 	bl	8008cf4 <__malloc_lock>
 8008452:	4921      	ldr	r1, [pc, #132]	; (80084d8 <_malloc_r+0xac>)
 8008454:	680a      	ldr	r2, [r1, #0]
 8008456:	4614      	mov	r4, r2
 8008458:	b99c      	cbnz	r4, 8008482 <_malloc_r+0x56>
 800845a:	4f20      	ldr	r7, [pc, #128]	; (80084dc <_malloc_r+0xb0>)
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	b923      	cbnz	r3, 800846a <_malloc_r+0x3e>
 8008460:	4621      	mov	r1, r4
 8008462:	4630      	mov	r0, r6
 8008464:	f000 f996 	bl	8008794 <_sbrk_r>
 8008468:	6038      	str	r0, [r7, #0]
 800846a:	4629      	mov	r1, r5
 800846c:	4630      	mov	r0, r6
 800846e:	f000 f991 	bl	8008794 <_sbrk_r>
 8008472:	1c43      	adds	r3, r0, #1
 8008474:	d123      	bne.n	80084be <_malloc_r+0x92>
 8008476:	230c      	movs	r3, #12
 8008478:	6033      	str	r3, [r6, #0]
 800847a:	4630      	mov	r0, r6
 800847c:	f000 fc40 	bl	8008d00 <__malloc_unlock>
 8008480:	e7e3      	b.n	800844a <_malloc_r+0x1e>
 8008482:	6823      	ldr	r3, [r4, #0]
 8008484:	1b5b      	subs	r3, r3, r5
 8008486:	d417      	bmi.n	80084b8 <_malloc_r+0x8c>
 8008488:	2b0b      	cmp	r3, #11
 800848a:	d903      	bls.n	8008494 <_malloc_r+0x68>
 800848c:	6023      	str	r3, [r4, #0]
 800848e:	441c      	add	r4, r3
 8008490:	6025      	str	r5, [r4, #0]
 8008492:	e004      	b.n	800849e <_malloc_r+0x72>
 8008494:	6863      	ldr	r3, [r4, #4]
 8008496:	42a2      	cmp	r2, r4
 8008498:	bf0c      	ite	eq
 800849a:	600b      	streq	r3, [r1, #0]
 800849c:	6053      	strne	r3, [r2, #4]
 800849e:	4630      	mov	r0, r6
 80084a0:	f000 fc2e 	bl	8008d00 <__malloc_unlock>
 80084a4:	f104 000b 	add.w	r0, r4, #11
 80084a8:	1d23      	adds	r3, r4, #4
 80084aa:	f020 0007 	bic.w	r0, r0, #7
 80084ae:	1ac2      	subs	r2, r0, r3
 80084b0:	d0cc      	beq.n	800844c <_malloc_r+0x20>
 80084b2:	1a1b      	subs	r3, r3, r0
 80084b4:	50a3      	str	r3, [r4, r2]
 80084b6:	e7c9      	b.n	800844c <_malloc_r+0x20>
 80084b8:	4622      	mov	r2, r4
 80084ba:	6864      	ldr	r4, [r4, #4]
 80084bc:	e7cc      	b.n	8008458 <_malloc_r+0x2c>
 80084be:	1cc4      	adds	r4, r0, #3
 80084c0:	f024 0403 	bic.w	r4, r4, #3
 80084c4:	42a0      	cmp	r0, r4
 80084c6:	d0e3      	beq.n	8008490 <_malloc_r+0x64>
 80084c8:	1a21      	subs	r1, r4, r0
 80084ca:	4630      	mov	r0, r6
 80084cc:	f000 f962 	bl	8008794 <_sbrk_r>
 80084d0:	3001      	adds	r0, #1
 80084d2:	d1dd      	bne.n	8008490 <_malloc_r+0x64>
 80084d4:	e7cf      	b.n	8008476 <_malloc_r+0x4a>
 80084d6:	bf00      	nop
 80084d8:	200001fc 	.word	0x200001fc
 80084dc:	20000200 	.word	0x20000200

080084e0 <__sfputc_r>:
 80084e0:	6893      	ldr	r3, [r2, #8]
 80084e2:	3b01      	subs	r3, #1
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	b410      	push	{r4}
 80084e8:	6093      	str	r3, [r2, #8]
 80084ea:	da08      	bge.n	80084fe <__sfputc_r+0x1e>
 80084ec:	6994      	ldr	r4, [r2, #24]
 80084ee:	42a3      	cmp	r3, r4
 80084f0:	db01      	blt.n	80084f6 <__sfputc_r+0x16>
 80084f2:	290a      	cmp	r1, #10
 80084f4:	d103      	bne.n	80084fe <__sfputc_r+0x1e>
 80084f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084fa:	f000 b99f 	b.w	800883c <__swbuf_r>
 80084fe:	6813      	ldr	r3, [r2, #0]
 8008500:	1c58      	adds	r0, r3, #1
 8008502:	6010      	str	r0, [r2, #0]
 8008504:	7019      	strb	r1, [r3, #0]
 8008506:	4608      	mov	r0, r1
 8008508:	f85d 4b04 	ldr.w	r4, [sp], #4
 800850c:	4770      	bx	lr

0800850e <__sfputs_r>:
 800850e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008510:	4606      	mov	r6, r0
 8008512:	460f      	mov	r7, r1
 8008514:	4614      	mov	r4, r2
 8008516:	18d5      	adds	r5, r2, r3
 8008518:	42ac      	cmp	r4, r5
 800851a:	d101      	bne.n	8008520 <__sfputs_r+0x12>
 800851c:	2000      	movs	r0, #0
 800851e:	e007      	b.n	8008530 <__sfputs_r+0x22>
 8008520:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008524:	463a      	mov	r2, r7
 8008526:	4630      	mov	r0, r6
 8008528:	f7ff ffda 	bl	80084e0 <__sfputc_r>
 800852c:	1c43      	adds	r3, r0, #1
 800852e:	d1f3      	bne.n	8008518 <__sfputs_r+0xa>
 8008530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008534 <_vfiprintf_r>:
 8008534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008538:	460d      	mov	r5, r1
 800853a:	b09d      	sub	sp, #116	; 0x74
 800853c:	4614      	mov	r4, r2
 800853e:	4698      	mov	r8, r3
 8008540:	4606      	mov	r6, r0
 8008542:	b118      	cbz	r0, 800854c <_vfiprintf_r+0x18>
 8008544:	6983      	ldr	r3, [r0, #24]
 8008546:	b90b      	cbnz	r3, 800854c <_vfiprintf_r+0x18>
 8008548:	f7ff fad6 	bl	8007af8 <__sinit>
 800854c:	4b89      	ldr	r3, [pc, #548]	; (8008774 <_vfiprintf_r+0x240>)
 800854e:	429d      	cmp	r5, r3
 8008550:	d11b      	bne.n	800858a <_vfiprintf_r+0x56>
 8008552:	6875      	ldr	r5, [r6, #4]
 8008554:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008556:	07d9      	lsls	r1, r3, #31
 8008558:	d405      	bmi.n	8008566 <_vfiprintf_r+0x32>
 800855a:	89ab      	ldrh	r3, [r5, #12]
 800855c:	059a      	lsls	r2, r3, #22
 800855e:	d402      	bmi.n	8008566 <_vfiprintf_r+0x32>
 8008560:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008562:	f7ff fb6c 	bl	8007c3e <__retarget_lock_acquire_recursive>
 8008566:	89ab      	ldrh	r3, [r5, #12]
 8008568:	071b      	lsls	r3, r3, #28
 800856a:	d501      	bpl.n	8008570 <_vfiprintf_r+0x3c>
 800856c:	692b      	ldr	r3, [r5, #16]
 800856e:	b9eb      	cbnz	r3, 80085ac <_vfiprintf_r+0x78>
 8008570:	4629      	mov	r1, r5
 8008572:	4630      	mov	r0, r6
 8008574:	f000 f9c6 	bl	8008904 <__swsetup_r>
 8008578:	b1c0      	cbz	r0, 80085ac <_vfiprintf_r+0x78>
 800857a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800857c:	07dc      	lsls	r4, r3, #31
 800857e:	d50e      	bpl.n	800859e <_vfiprintf_r+0x6a>
 8008580:	f04f 30ff 	mov.w	r0, #4294967295
 8008584:	b01d      	add	sp, #116	; 0x74
 8008586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800858a:	4b7b      	ldr	r3, [pc, #492]	; (8008778 <_vfiprintf_r+0x244>)
 800858c:	429d      	cmp	r5, r3
 800858e:	d101      	bne.n	8008594 <_vfiprintf_r+0x60>
 8008590:	68b5      	ldr	r5, [r6, #8]
 8008592:	e7df      	b.n	8008554 <_vfiprintf_r+0x20>
 8008594:	4b79      	ldr	r3, [pc, #484]	; (800877c <_vfiprintf_r+0x248>)
 8008596:	429d      	cmp	r5, r3
 8008598:	bf08      	it	eq
 800859a:	68f5      	ldreq	r5, [r6, #12]
 800859c:	e7da      	b.n	8008554 <_vfiprintf_r+0x20>
 800859e:	89ab      	ldrh	r3, [r5, #12]
 80085a0:	0598      	lsls	r0, r3, #22
 80085a2:	d4ed      	bmi.n	8008580 <_vfiprintf_r+0x4c>
 80085a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085a6:	f7ff fb4b 	bl	8007c40 <__retarget_lock_release_recursive>
 80085aa:	e7e9      	b.n	8008580 <_vfiprintf_r+0x4c>
 80085ac:	2300      	movs	r3, #0
 80085ae:	9309      	str	r3, [sp, #36]	; 0x24
 80085b0:	2320      	movs	r3, #32
 80085b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80085ba:	2330      	movs	r3, #48	; 0x30
 80085bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008780 <_vfiprintf_r+0x24c>
 80085c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085c4:	f04f 0901 	mov.w	r9, #1
 80085c8:	4623      	mov	r3, r4
 80085ca:	469a      	mov	sl, r3
 80085cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085d0:	b10a      	cbz	r2, 80085d6 <_vfiprintf_r+0xa2>
 80085d2:	2a25      	cmp	r2, #37	; 0x25
 80085d4:	d1f9      	bne.n	80085ca <_vfiprintf_r+0x96>
 80085d6:	ebba 0b04 	subs.w	fp, sl, r4
 80085da:	d00b      	beq.n	80085f4 <_vfiprintf_r+0xc0>
 80085dc:	465b      	mov	r3, fp
 80085de:	4622      	mov	r2, r4
 80085e0:	4629      	mov	r1, r5
 80085e2:	4630      	mov	r0, r6
 80085e4:	f7ff ff93 	bl	800850e <__sfputs_r>
 80085e8:	3001      	adds	r0, #1
 80085ea:	f000 80aa 	beq.w	8008742 <_vfiprintf_r+0x20e>
 80085ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085f0:	445a      	add	r2, fp
 80085f2:	9209      	str	r2, [sp, #36]	; 0x24
 80085f4:	f89a 3000 	ldrb.w	r3, [sl]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	f000 80a2 	beq.w	8008742 <_vfiprintf_r+0x20e>
 80085fe:	2300      	movs	r3, #0
 8008600:	f04f 32ff 	mov.w	r2, #4294967295
 8008604:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008608:	f10a 0a01 	add.w	sl, sl, #1
 800860c:	9304      	str	r3, [sp, #16]
 800860e:	9307      	str	r3, [sp, #28]
 8008610:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008614:	931a      	str	r3, [sp, #104]	; 0x68
 8008616:	4654      	mov	r4, sl
 8008618:	2205      	movs	r2, #5
 800861a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800861e:	4858      	ldr	r0, [pc, #352]	; (8008780 <_vfiprintf_r+0x24c>)
 8008620:	f7f7 fdde 	bl	80001e0 <memchr>
 8008624:	9a04      	ldr	r2, [sp, #16]
 8008626:	b9d8      	cbnz	r0, 8008660 <_vfiprintf_r+0x12c>
 8008628:	06d1      	lsls	r1, r2, #27
 800862a:	bf44      	itt	mi
 800862c:	2320      	movmi	r3, #32
 800862e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008632:	0713      	lsls	r3, r2, #28
 8008634:	bf44      	itt	mi
 8008636:	232b      	movmi	r3, #43	; 0x2b
 8008638:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800863c:	f89a 3000 	ldrb.w	r3, [sl]
 8008640:	2b2a      	cmp	r3, #42	; 0x2a
 8008642:	d015      	beq.n	8008670 <_vfiprintf_r+0x13c>
 8008644:	9a07      	ldr	r2, [sp, #28]
 8008646:	4654      	mov	r4, sl
 8008648:	2000      	movs	r0, #0
 800864a:	f04f 0c0a 	mov.w	ip, #10
 800864e:	4621      	mov	r1, r4
 8008650:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008654:	3b30      	subs	r3, #48	; 0x30
 8008656:	2b09      	cmp	r3, #9
 8008658:	d94e      	bls.n	80086f8 <_vfiprintf_r+0x1c4>
 800865a:	b1b0      	cbz	r0, 800868a <_vfiprintf_r+0x156>
 800865c:	9207      	str	r2, [sp, #28]
 800865e:	e014      	b.n	800868a <_vfiprintf_r+0x156>
 8008660:	eba0 0308 	sub.w	r3, r0, r8
 8008664:	fa09 f303 	lsl.w	r3, r9, r3
 8008668:	4313      	orrs	r3, r2
 800866a:	9304      	str	r3, [sp, #16]
 800866c:	46a2      	mov	sl, r4
 800866e:	e7d2      	b.n	8008616 <_vfiprintf_r+0xe2>
 8008670:	9b03      	ldr	r3, [sp, #12]
 8008672:	1d19      	adds	r1, r3, #4
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	9103      	str	r1, [sp, #12]
 8008678:	2b00      	cmp	r3, #0
 800867a:	bfbb      	ittet	lt
 800867c:	425b      	neglt	r3, r3
 800867e:	f042 0202 	orrlt.w	r2, r2, #2
 8008682:	9307      	strge	r3, [sp, #28]
 8008684:	9307      	strlt	r3, [sp, #28]
 8008686:	bfb8      	it	lt
 8008688:	9204      	strlt	r2, [sp, #16]
 800868a:	7823      	ldrb	r3, [r4, #0]
 800868c:	2b2e      	cmp	r3, #46	; 0x2e
 800868e:	d10c      	bne.n	80086aa <_vfiprintf_r+0x176>
 8008690:	7863      	ldrb	r3, [r4, #1]
 8008692:	2b2a      	cmp	r3, #42	; 0x2a
 8008694:	d135      	bne.n	8008702 <_vfiprintf_r+0x1ce>
 8008696:	9b03      	ldr	r3, [sp, #12]
 8008698:	1d1a      	adds	r2, r3, #4
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	9203      	str	r2, [sp, #12]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	bfb8      	it	lt
 80086a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80086a6:	3402      	adds	r4, #2
 80086a8:	9305      	str	r3, [sp, #20]
 80086aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008790 <_vfiprintf_r+0x25c>
 80086ae:	7821      	ldrb	r1, [r4, #0]
 80086b0:	2203      	movs	r2, #3
 80086b2:	4650      	mov	r0, sl
 80086b4:	f7f7 fd94 	bl	80001e0 <memchr>
 80086b8:	b140      	cbz	r0, 80086cc <_vfiprintf_r+0x198>
 80086ba:	2340      	movs	r3, #64	; 0x40
 80086bc:	eba0 000a 	sub.w	r0, r0, sl
 80086c0:	fa03 f000 	lsl.w	r0, r3, r0
 80086c4:	9b04      	ldr	r3, [sp, #16]
 80086c6:	4303      	orrs	r3, r0
 80086c8:	3401      	adds	r4, #1
 80086ca:	9304      	str	r3, [sp, #16]
 80086cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086d0:	482c      	ldr	r0, [pc, #176]	; (8008784 <_vfiprintf_r+0x250>)
 80086d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086d6:	2206      	movs	r2, #6
 80086d8:	f7f7 fd82 	bl	80001e0 <memchr>
 80086dc:	2800      	cmp	r0, #0
 80086de:	d03f      	beq.n	8008760 <_vfiprintf_r+0x22c>
 80086e0:	4b29      	ldr	r3, [pc, #164]	; (8008788 <_vfiprintf_r+0x254>)
 80086e2:	bb1b      	cbnz	r3, 800872c <_vfiprintf_r+0x1f8>
 80086e4:	9b03      	ldr	r3, [sp, #12]
 80086e6:	3307      	adds	r3, #7
 80086e8:	f023 0307 	bic.w	r3, r3, #7
 80086ec:	3308      	adds	r3, #8
 80086ee:	9303      	str	r3, [sp, #12]
 80086f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086f2:	443b      	add	r3, r7
 80086f4:	9309      	str	r3, [sp, #36]	; 0x24
 80086f6:	e767      	b.n	80085c8 <_vfiprintf_r+0x94>
 80086f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80086fc:	460c      	mov	r4, r1
 80086fe:	2001      	movs	r0, #1
 8008700:	e7a5      	b.n	800864e <_vfiprintf_r+0x11a>
 8008702:	2300      	movs	r3, #0
 8008704:	3401      	adds	r4, #1
 8008706:	9305      	str	r3, [sp, #20]
 8008708:	4619      	mov	r1, r3
 800870a:	f04f 0c0a 	mov.w	ip, #10
 800870e:	4620      	mov	r0, r4
 8008710:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008714:	3a30      	subs	r2, #48	; 0x30
 8008716:	2a09      	cmp	r2, #9
 8008718:	d903      	bls.n	8008722 <_vfiprintf_r+0x1ee>
 800871a:	2b00      	cmp	r3, #0
 800871c:	d0c5      	beq.n	80086aa <_vfiprintf_r+0x176>
 800871e:	9105      	str	r1, [sp, #20]
 8008720:	e7c3      	b.n	80086aa <_vfiprintf_r+0x176>
 8008722:	fb0c 2101 	mla	r1, ip, r1, r2
 8008726:	4604      	mov	r4, r0
 8008728:	2301      	movs	r3, #1
 800872a:	e7f0      	b.n	800870e <_vfiprintf_r+0x1da>
 800872c:	ab03      	add	r3, sp, #12
 800872e:	9300      	str	r3, [sp, #0]
 8008730:	462a      	mov	r2, r5
 8008732:	4b16      	ldr	r3, [pc, #88]	; (800878c <_vfiprintf_r+0x258>)
 8008734:	a904      	add	r1, sp, #16
 8008736:	4630      	mov	r0, r6
 8008738:	f7fd ff2a 	bl	8006590 <_printf_float>
 800873c:	4607      	mov	r7, r0
 800873e:	1c78      	adds	r0, r7, #1
 8008740:	d1d6      	bne.n	80086f0 <_vfiprintf_r+0x1bc>
 8008742:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008744:	07d9      	lsls	r1, r3, #31
 8008746:	d405      	bmi.n	8008754 <_vfiprintf_r+0x220>
 8008748:	89ab      	ldrh	r3, [r5, #12]
 800874a:	059a      	lsls	r2, r3, #22
 800874c:	d402      	bmi.n	8008754 <_vfiprintf_r+0x220>
 800874e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008750:	f7ff fa76 	bl	8007c40 <__retarget_lock_release_recursive>
 8008754:	89ab      	ldrh	r3, [r5, #12]
 8008756:	065b      	lsls	r3, r3, #25
 8008758:	f53f af12 	bmi.w	8008580 <_vfiprintf_r+0x4c>
 800875c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800875e:	e711      	b.n	8008584 <_vfiprintf_r+0x50>
 8008760:	ab03      	add	r3, sp, #12
 8008762:	9300      	str	r3, [sp, #0]
 8008764:	462a      	mov	r2, r5
 8008766:	4b09      	ldr	r3, [pc, #36]	; (800878c <_vfiprintf_r+0x258>)
 8008768:	a904      	add	r1, sp, #16
 800876a:	4630      	mov	r0, r6
 800876c:	f7fe f9b4 	bl	8006ad8 <_printf_i>
 8008770:	e7e4      	b.n	800873c <_vfiprintf_r+0x208>
 8008772:	bf00      	nop
 8008774:	08009058 	.word	0x08009058
 8008778:	08009078 	.word	0x08009078
 800877c:	08009038 	.word	0x08009038
 8008780:	080091f4 	.word	0x080091f4
 8008784:	080091fe 	.word	0x080091fe
 8008788:	08006591 	.word	0x08006591
 800878c:	0800850f 	.word	0x0800850f
 8008790:	080091fa 	.word	0x080091fa

08008794 <_sbrk_r>:
 8008794:	b538      	push	{r3, r4, r5, lr}
 8008796:	4d06      	ldr	r5, [pc, #24]	; (80087b0 <_sbrk_r+0x1c>)
 8008798:	2300      	movs	r3, #0
 800879a:	4604      	mov	r4, r0
 800879c:	4608      	mov	r0, r1
 800879e:	602b      	str	r3, [r5, #0]
 80087a0:	f7fa fdba 	bl	8003318 <_sbrk>
 80087a4:	1c43      	adds	r3, r0, #1
 80087a6:	d102      	bne.n	80087ae <_sbrk_r+0x1a>
 80087a8:	682b      	ldr	r3, [r5, #0]
 80087aa:	b103      	cbz	r3, 80087ae <_sbrk_r+0x1a>
 80087ac:	6023      	str	r3, [r4, #0]
 80087ae:	bd38      	pop	{r3, r4, r5, pc}
 80087b0:	20000304 	.word	0x20000304

080087b4 <__sread>:
 80087b4:	b510      	push	{r4, lr}
 80087b6:	460c      	mov	r4, r1
 80087b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087bc:	f000 faa6 	bl	8008d0c <_read_r>
 80087c0:	2800      	cmp	r0, #0
 80087c2:	bfab      	itete	ge
 80087c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80087c6:	89a3      	ldrhlt	r3, [r4, #12]
 80087c8:	181b      	addge	r3, r3, r0
 80087ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80087ce:	bfac      	ite	ge
 80087d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80087d2:	81a3      	strhlt	r3, [r4, #12]
 80087d4:	bd10      	pop	{r4, pc}

080087d6 <__swrite>:
 80087d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087da:	461f      	mov	r7, r3
 80087dc:	898b      	ldrh	r3, [r1, #12]
 80087de:	05db      	lsls	r3, r3, #23
 80087e0:	4605      	mov	r5, r0
 80087e2:	460c      	mov	r4, r1
 80087e4:	4616      	mov	r6, r2
 80087e6:	d505      	bpl.n	80087f4 <__swrite+0x1e>
 80087e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087ec:	2302      	movs	r3, #2
 80087ee:	2200      	movs	r2, #0
 80087f0:	f000 f9f8 	bl	8008be4 <_lseek_r>
 80087f4:	89a3      	ldrh	r3, [r4, #12]
 80087f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087fe:	81a3      	strh	r3, [r4, #12]
 8008800:	4632      	mov	r2, r6
 8008802:	463b      	mov	r3, r7
 8008804:	4628      	mov	r0, r5
 8008806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800880a:	f000 b869 	b.w	80088e0 <_write_r>

0800880e <__sseek>:
 800880e:	b510      	push	{r4, lr}
 8008810:	460c      	mov	r4, r1
 8008812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008816:	f000 f9e5 	bl	8008be4 <_lseek_r>
 800881a:	1c43      	adds	r3, r0, #1
 800881c:	89a3      	ldrh	r3, [r4, #12]
 800881e:	bf15      	itete	ne
 8008820:	6560      	strne	r0, [r4, #84]	; 0x54
 8008822:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008826:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800882a:	81a3      	strheq	r3, [r4, #12]
 800882c:	bf18      	it	ne
 800882e:	81a3      	strhne	r3, [r4, #12]
 8008830:	bd10      	pop	{r4, pc}

08008832 <__sclose>:
 8008832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008836:	f000 b8f1 	b.w	8008a1c <_close_r>
	...

0800883c <__swbuf_r>:
 800883c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800883e:	460e      	mov	r6, r1
 8008840:	4614      	mov	r4, r2
 8008842:	4605      	mov	r5, r0
 8008844:	b118      	cbz	r0, 800884e <__swbuf_r+0x12>
 8008846:	6983      	ldr	r3, [r0, #24]
 8008848:	b90b      	cbnz	r3, 800884e <__swbuf_r+0x12>
 800884a:	f7ff f955 	bl	8007af8 <__sinit>
 800884e:	4b21      	ldr	r3, [pc, #132]	; (80088d4 <__swbuf_r+0x98>)
 8008850:	429c      	cmp	r4, r3
 8008852:	d12b      	bne.n	80088ac <__swbuf_r+0x70>
 8008854:	686c      	ldr	r4, [r5, #4]
 8008856:	69a3      	ldr	r3, [r4, #24]
 8008858:	60a3      	str	r3, [r4, #8]
 800885a:	89a3      	ldrh	r3, [r4, #12]
 800885c:	071a      	lsls	r2, r3, #28
 800885e:	d52f      	bpl.n	80088c0 <__swbuf_r+0x84>
 8008860:	6923      	ldr	r3, [r4, #16]
 8008862:	b36b      	cbz	r3, 80088c0 <__swbuf_r+0x84>
 8008864:	6923      	ldr	r3, [r4, #16]
 8008866:	6820      	ldr	r0, [r4, #0]
 8008868:	1ac0      	subs	r0, r0, r3
 800886a:	6963      	ldr	r3, [r4, #20]
 800886c:	b2f6      	uxtb	r6, r6
 800886e:	4283      	cmp	r3, r0
 8008870:	4637      	mov	r7, r6
 8008872:	dc04      	bgt.n	800887e <__swbuf_r+0x42>
 8008874:	4621      	mov	r1, r4
 8008876:	4628      	mov	r0, r5
 8008878:	f000 f966 	bl	8008b48 <_fflush_r>
 800887c:	bb30      	cbnz	r0, 80088cc <__swbuf_r+0x90>
 800887e:	68a3      	ldr	r3, [r4, #8]
 8008880:	3b01      	subs	r3, #1
 8008882:	60a3      	str	r3, [r4, #8]
 8008884:	6823      	ldr	r3, [r4, #0]
 8008886:	1c5a      	adds	r2, r3, #1
 8008888:	6022      	str	r2, [r4, #0]
 800888a:	701e      	strb	r6, [r3, #0]
 800888c:	6963      	ldr	r3, [r4, #20]
 800888e:	3001      	adds	r0, #1
 8008890:	4283      	cmp	r3, r0
 8008892:	d004      	beq.n	800889e <__swbuf_r+0x62>
 8008894:	89a3      	ldrh	r3, [r4, #12]
 8008896:	07db      	lsls	r3, r3, #31
 8008898:	d506      	bpl.n	80088a8 <__swbuf_r+0x6c>
 800889a:	2e0a      	cmp	r6, #10
 800889c:	d104      	bne.n	80088a8 <__swbuf_r+0x6c>
 800889e:	4621      	mov	r1, r4
 80088a0:	4628      	mov	r0, r5
 80088a2:	f000 f951 	bl	8008b48 <_fflush_r>
 80088a6:	b988      	cbnz	r0, 80088cc <__swbuf_r+0x90>
 80088a8:	4638      	mov	r0, r7
 80088aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088ac:	4b0a      	ldr	r3, [pc, #40]	; (80088d8 <__swbuf_r+0x9c>)
 80088ae:	429c      	cmp	r4, r3
 80088b0:	d101      	bne.n	80088b6 <__swbuf_r+0x7a>
 80088b2:	68ac      	ldr	r4, [r5, #8]
 80088b4:	e7cf      	b.n	8008856 <__swbuf_r+0x1a>
 80088b6:	4b09      	ldr	r3, [pc, #36]	; (80088dc <__swbuf_r+0xa0>)
 80088b8:	429c      	cmp	r4, r3
 80088ba:	bf08      	it	eq
 80088bc:	68ec      	ldreq	r4, [r5, #12]
 80088be:	e7ca      	b.n	8008856 <__swbuf_r+0x1a>
 80088c0:	4621      	mov	r1, r4
 80088c2:	4628      	mov	r0, r5
 80088c4:	f000 f81e 	bl	8008904 <__swsetup_r>
 80088c8:	2800      	cmp	r0, #0
 80088ca:	d0cb      	beq.n	8008864 <__swbuf_r+0x28>
 80088cc:	f04f 37ff 	mov.w	r7, #4294967295
 80088d0:	e7ea      	b.n	80088a8 <__swbuf_r+0x6c>
 80088d2:	bf00      	nop
 80088d4:	08009058 	.word	0x08009058
 80088d8:	08009078 	.word	0x08009078
 80088dc:	08009038 	.word	0x08009038

080088e0 <_write_r>:
 80088e0:	b538      	push	{r3, r4, r5, lr}
 80088e2:	4d07      	ldr	r5, [pc, #28]	; (8008900 <_write_r+0x20>)
 80088e4:	4604      	mov	r4, r0
 80088e6:	4608      	mov	r0, r1
 80088e8:	4611      	mov	r1, r2
 80088ea:	2200      	movs	r2, #0
 80088ec:	602a      	str	r2, [r5, #0]
 80088ee:	461a      	mov	r2, r3
 80088f0:	f7fa f9fe 	bl	8002cf0 <_write>
 80088f4:	1c43      	adds	r3, r0, #1
 80088f6:	d102      	bne.n	80088fe <_write_r+0x1e>
 80088f8:	682b      	ldr	r3, [r5, #0]
 80088fa:	b103      	cbz	r3, 80088fe <_write_r+0x1e>
 80088fc:	6023      	str	r3, [r4, #0]
 80088fe:	bd38      	pop	{r3, r4, r5, pc}
 8008900:	20000304 	.word	0x20000304

08008904 <__swsetup_r>:
 8008904:	4b32      	ldr	r3, [pc, #200]	; (80089d0 <__swsetup_r+0xcc>)
 8008906:	b570      	push	{r4, r5, r6, lr}
 8008908:	681d      	ldr	r5, [r3, #0]
 800890a:	4606      	mov	r6, r0
 800890c:	460c      	mov	r4, r1
 800890e:	b125      	cbz	r5, 800891a <__swsetup_r+0x16>
 8008910:	69ab      	ldr	r3, [r5, #24]
 8008912:	b913      	cbnz	r3, 800891a <__swsetup_r+0x16>
 8008914:	4628      	mov	r0, r5
 8008916:	f7ff f8ef 	bl	8007af8 <__sinit>
 800891a:	4b2e      	ldr	r3, [pc, #184]	; (80089d4 <__swsetup_r+0xd0>)
 800891c:	429c      	cmp	r4, r3
 800891e:	d10f      	bne.n	8008940 <__swsetup_r+0x3c>
 8008920:	686c      	ldr	r4, [r5, #4]
 8008922:	89a3      	ldrh	r3, [r4, #12]
 8008924:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008928:	0719      	lsls	r1, r3, #28
 800892a:	d42c      	bmi.n	8008986 <__swsetup_r+0x82>
 800892c:	06dd      	lsls	r5, r3, #27
 800892e:	d411      	bmi.n	8008954 <__swsetup_r+0x50>
 8008930:	2309      	movs	r3, #9
 8008932:	6033      	str	r3, [r6, #0]
 8008934:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008938:	81a3      	strh	r3, [r4, #12]
 800893a:	f04f 30ff 	mov.w	r0, #4294967295
 800893e:	e03e      	b.n	80089be <__swsetup_r+0xba>
 8008940:	4b25      	ldr	r3, [pc, #148]	; (80089d8 <__swsetup_r+0xd4>)
 8008942:	429c      	cmp	r4, r3
 8008944:	d101      	bne.n	800894a <__swsetup_r+0x46>
 8008946:	68ac      	ldr	r4, [r5, #8]
 8008948:	e7eb      	b.n	8008922 <__swsetup_r+0x1e>
 800894a:	4b24      	ldr	r3, [pc, #144]	; (80089dc <__swsetup_r+0xd8>)
 800894c:	429c      	cmp	r4, r3
 800894e:	bf08      	it	eq
 8008950:	68ec      	ldreq	r4, [r5, #12]
 8008952:	e7e6      	b.n	8008922 <__swsetup_r+0x1e>
 8008954:	0758      	lsls	r0, r3, #29
 8008956:	d512      	bpl.n	800897e <__swsetup_r+0x7a>
 8008958:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800895a:	b141      	cbz	r1, 800896e <__swsetup_r+0x6a>
 800895c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008960:	4299      	cmp	r1, r3
 8008962:	d002      	beq.n	800896a <__swsetup_r+0x66>
 8008964:	4630      	mov	r0, r6
 8008966:	f7ff fd11 	bl	800838c <_free_r>
 800896a:	2300      	movs	r3, #0
 800896c:	6363      	str	r3, [r4, #52]	; 0x34
 800896e:	89a3      	ldrh	r3, [r4, #12]
 8008970:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008974:	81a3      	strh	r3, [r4, #12]
 8008976:	2300      	movs	r3, #0
 8008978:	6063      	str	r3, [r4, #4]
 800897a:	6923      	ldr	r3, [r4, #16]
 800897c:	6023      	str	r3, [r4, #0]
 800897e:	89a3      	ldrh	r3, [r4, #12]
 8008980:	f043 0308 	orr.w	r3, r3, #8
 8008984:	81a3      	strh	r3, [r4, #12]
 8008986:	6923      	ldr	r3, [r4, #16]
 8008988:	b94b      	cbnz	r3, 800899e <__swsetup_r+0x9a>
 800898a:	89a3      	ldrh	r3, [r4, #12]
 800898c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008994:	d003      	beq.n	800899e <__swsetup_r+0x9a>
 8008996:	4621      	mov	r1, r4
 8008998:	4630      	mov	r0, r6
 800899a:	f000 f959 	bl	8008c50 <__smakebuf_r>
 800899e:	89a0      	ldrh	r0, [r4, #12]
 80089a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089a4:	f010 0301 	ands.w	r3, r0, #1
 80089a8:	d00a      	beq.n	80089c0 <__swsetup_r+0xbc>
 80089aa:	2300      	movs	r3, #0
 80089ac:	60a3      	str	r3, [r4, #8]
 80089ae:	6963      	ldr	r3, [r4, #20]
 80089b0:	425b      	negs	r3, r3
 80089b2:	61a3      	str	r3, [r4, #24]
 80089b4:	6923      	ldr	r3, [r4, #16]
 80089b6:	b943      	cbnz	r3, 80089ca <__swsetup_r+0xc6>
 80089b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80089bc:	d1ba      	bne.n	8008934 <__swsetup_r+0x30>
 80089be:	bd70      	pop	{r4, r5, r6, pc}
 80089c0:	0781      	lsls	r1, r0, #30
 80089c2:	bf58      	it	pl
 80089c4:	6963      	ldrpl	r3, [r4, #20]
 80089c6:	60a3      	str	r3, [r4, #8]
 80089c8:	e7f4      	b.n	80089b4 <__swsetup_r+0xb0>
 80089ca:	2000      	movs	r0, #0
 80089cc:	e7f7      	b.n	80089be <__swsetup_r+0xba>
 80089ce:	bf00      	nop
 80089d0:	2000000c 	.word	0x2000000c
 80089d4:	08009058 	.word	0x08009058
 80089d8:	08009078 	.word	0x08009078
 80089dc:	08009038 	.word	0x08009038

080089e0 <__assert_func>:
 80089e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80089e2:	4614      	mov	r4, r2
 80089e4:	461a      	mov	r2, r3
 80089e6:	4b09      	ldr	r3, [pc, #36]	; (8008a0c <__assert_func+0x2c>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4605      	mov	r5, r0
 80089ec:	68d8      	ldr	r0, [r3, #12]
 80089ee:	b14c      	cbz	r4, 8008a04 <__assert_func+0x24>
 80089f0:	4b07      	ldr	r3, [pc, #28]	; (8008a10 <__assert_func+0x30>)
 80089f2:	9100      	str	r1, [sp, #0]
 80089f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80089f8:	4906      	ldr	r1, [pc, #24]	; (8008a14 <__assert_func+0x34>)
 80089fa:	462b      	mov	r3, r5
 80089fc:	f000 f8e0 	bl	8008bc0 <fiprintf>
 8008a00:	f000 f9a3 	bl	8008d4a <abort>
 8008a04:	4b04      	ldr	r3, [pc, #16]	; (8008a18 <__assert_func+0x38>)
 8008a06:	461c      	mov	r4, r3
 8008a08:	e7f3      	b.n	80089f2 <__assert_func+0x12>
 8008a0a:	bf00      	nop
 8008a0c:	2000000c 	.word	0x2000000c
 8008a10:	08009205 	.word	0x08009205
 8008a14:	08009212 	.word	0x08009212
 8008a18:	08009240 	.word	0x08009240

08008a1c <_close_r>:
 8008a1c:	b538      	push	{r3, r4, r5, lr}
 8008a1e:	4d06      	ldr	r5, [pc, #24]	; (8008a38 <_close_r+0x1c>)
 8008a20:	2300      	movs	r3, #0
 8008a22:	4604      	mov	r4, r0
 8008a24:	4608      	mov	r0, r1
 8008a26:	602b      	str	r3, [r5, #0]
 8008a28:	f7fa fc41 	bl	80032ae <_close>
 8008a2c:	1c43      	adds	r3, r0, #1
 8008a2e:	d102      	bne.n	8008a36 <_close_r+0x1a>
 8008a30:	682b      	ldr	r3, [r5, #0]
 8008a32:	b103      	cbz	r3, 8008a36 <_close_r+0x1a>
 8008a34:	6023      	str	r3, [r4, #0]
 8008a36:	bd38      	pop	{r3, r4, r5, pc}
 8008a38:	20000304 	.word	0x20000304

08008a3c <__sflush_r>:
 8008a3c:	898a      	ldrh	r2, [r1, #12]
 8008a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a42:	4605      	mov	r5, r0
 8008a44:	0710      	lsls	r0, r2, #28
 8008a46:	460c      	mov	r4, r1
 8008a48:	d458      	bmi.n	8008afc <__sflush_r+0xc0>
 8008a4a:	684b      	ldr	r3, [r1, #4]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	dc05      	bgt.n	8008a5c <__sflush_r+0x20>
 8008a50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	dc02      	bgt.n	8008a5c <__sflush_r+0x20>
 8008a56:	2000      	movs	r0, #0
 8008a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a5e:	2e00      	cmp	r6, #0
 8008a60:	d0f9      	beq.n	8008a56 <__sflush_r+0x1a>
 8008a62:	2300      	movs	r3, #0
 8008a64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a68:	682f      	ldr	r7, [r5, #0]
 8008a6a:	602b      	str	r3, [r5, #0]
 8008a6c:	d032      	beq.n	8008ad4 <__sflush_r+0x98>
 8008a6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a70:	89a3      	ldrh	r3, [r4, #12]
 8008a72:	075a      	lsls	r2, r3, #29
 8008a74:	d505      	bpl.n	8008a82 <__sflush_r+0x46>
 8008a76:	6863      	ldr	r3, [r4, #4]
 8008a78:	1ac0      	subs	r0, r0, r3
 8008a7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a7c:	b10b      	cbz	r3, 8008a82 <__sflush_r+0x46>
 8008a7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a80:	1ac0      	subs	r0, r0, r3
 8008a82:	2300      	movs	r3, #0
 8008a84:	4602      	mov	r2, r0
 8008a86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a88:	6a21      	ldr	r1, [r4, #32]
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	47b0      	blx	r6
 8008a8e:	1c43      	adds	r3, r0, #1
 8008a90:	89a3      	ldrh	r3, [r4, #12]
 8008a92:	d106      	bne.n	8008aa2 <__sflush_r+0x66>
 8008a94:	6829      	ldr	r1, [r5, #0]
 8008a96:	291d      	cmp	r1, #29
 8008a98:	d82c      	bhi.n	8008af4 <__sflush_r+0xb8>
 8008a9a:	4a2a      	ldr	r2, [pc, #168]	; (8008b44 <__sflush_r+0x108>)
 8008a9c:	40ca      	lsrs	r2, r1
 8008a9e:	07d6      	lsls	r6, r2, #31
 8008aa0:	d528      	bpl.n	8008af4 <__sflush_r+0xb8>
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	6062      	str	r2, [r4, #4]
 8008aa6:	04d9      	lsls	r1, r3, #19
 8008aa8:	6922      	ldr	r2, [r4, #16]
 8008aaa:	6022      	str	r2, [r4, #0]
 8008aac:	d504      	bpl.n	8008ab8 <__sflush_r+0x7c>
 8008aae:	1c42      	adds	r2, r0, #1
 8008ab0:	d101      	bne.n	8008ab6 <__sflush_r+0x7a>
 8008ab2:	682b      	ldr	r3, [r5, #0]
 8008ab4:	b903      	cbnz	r3, 8008ab8 <__sflush_r+0x7c>
 8008ab6:	6560      	str	r0, [r4, #84]	; 0x54
 8008ab8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008aba:	602f      	str	r7, [r5, #0]
 8008abc:	2900      	cmp	r1, #0
 8008abe:	d0ca      	beq.n	8008a56 <__sflush_r+0x1a>
 8008ac0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ac4:	4299      	cmp	r1, r3
 8008ac6:	d002      	beq.n	8008ace <__sflush_r+0x92>
 8008ac8:	4628      	mov	r0, r5
 8008aca:	f7ff fc5f 	bl	800838c <_free_r>
 8008ace:	2000      	movs	r0, #0
 8008ad0:	6360      	str	r0, [r4, #52]	; 0x34
 8008ad2:	e7c1      	b.n	8008a58 <__sflush_r+0x1c>
 8008ad4:	6a21      	ldr	r1, [r4, #32]
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	4628      	mov	r0, r5
 8008ada:	47b0      	blx	r6
 8008adc:	1c41      	adds	r1, r0, #1
 8008ade:	d1c7      	bne.n	8008a70 <__sflush_r+0x34>
 8008ae0:	682b      	ldr	r3, [r5, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d0c4      	beq.n	8008a70 <__sflush_r+0x34>
 8008ae6:	2b1d      	cmp	r3, #29
 8008ae8:	d001      	beq.n	8008aee <__sflush_r+0xb2>
 8008aea:	2b16      	cmp	r3, #22
 8008aec:	d101      	bne.n	8008af2 <__sflush_r+0xb6>
 8008aee:	602f      	str	r7, [r5, #0]
 8008af0:	e7b1      	b.n	8008a56 <__sflush_r+0x1a>
 8008af2:	89a3      	ldrh	r3, [r4, #12]
 8008af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008af8:	81a3      	strh	r3, [r4, #12]
 8008afa:	e7ad      	b.n	8008a58 <__sflush_r+0x1c>
 8008afc:	690f      	ldr	r7, [r1, #16]
 8008afe:	2f00      	cmp	r7, #0
 8008b00:	d0a9      	beq.n	8008a56 <__sflush_r+0x1a>
 8008b02:	0793      	lsls	r3, r2, #30
 8008b04:	680e      	ldr	r6, [r1, #0]
 8008b06:	bf08      	it	eq
 8008b08:	694b      	ldreq	r3, [r1, #20]
 8008b0a:	600f      	str	r7, [r1, #0]
 8008b0c:	bf18      	it	ne
 8008b0e:	2300      	movne	r3, #0
 8008b10:	eba6 0807 	sub.w	r8, r6, r7
 8008b14:	608b      	str	r3, [r1, #8]
 8008b16:	f1b8 0f00 	cmp.w	r8, #0
 8008b1a:	dd9c      	ble.n	8008a56 <__sflush_r+0x1a>
 8008b1c:	6a21      	ldr	r1, [r4, #32]
 8008b1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b20:	4643      	mov	r3, r8
 8008b22:	463a      	mov	r2, r7
 8008b24:	4628      	mov	r0, r5
 8008b26:	47b0      	blx	r6
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	dc06      	bgt.n	8008b3a <__sflush_r+0xfe>
 8008b2c:	89a3      	ldrh	r3, [r4, #12]
 8008b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b32:	81a3      	strh	r3, [r4, #12]
 8008b34:	f04f 30ff 	mov.w	r0, #4294967295
 8008b38:	e78e      	b.n	8008a58 <__sflush_r+0x1c>
 8008b3a:	4407      	add	r7, r0
 8008b3c:	eba8 0800 	sub.w	r8, r8, r0
 8008b40:	e7e9      	b.n	8008b16 <__sflush_r+0xda>
 8008b42:	bf00      	nop
 8008b44:	20400001 	.word	0x20400001

08008b48 <_fflush_r>:
 8008b48:	b538      	push	{r3, r4, r5, lr}
 8008b4a:	690b      	ldr	r3, [r1, #16]
 8008b4c:	4605      	mov	r5, r0
 8008b4e:	460c      	mov	r4, r1
 8008b50:	b913      	cbnz	r3, 8008b58 <_fflush_r+0x10>
 8008b52:	2500      	movs	r5, #0
 8008b54:	4628      	mov	r0, r5
 8008b56:	bd38      	pop	{r3, r4, r5, pc}
 8008b58:	b118      	cbz	r0, 8008b62 <_fflush_r+0x1a>
 8008b5a:	6983      	ldr	r3, [r0, #24]
 8008b5c:	b90b      	cbnz	r3, 8008b62 <_fflush_r+0x1a>
 8008b5e:	f7fe ffcb 	bl	8007af8 <__sinit>
 8008b62:	4b14      	ldr	r3, [pc, #80]	; (8008bb4 <_fflush_r+0x6c>)
 8008b64:	429c      	cmp	r4, r3
 8008b66:	d11b      	bne.n	8008ba0 <_fflush_r+0x58>
 8008b68:	686c      	ldr	r4, [r5, #4]
 8008b6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d0ef      	beq.n	8008b52 <_fflush_r+0xa>
 8008b72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b74:	07d0      	lsls	r0, r2, #31
 8008b76:	d404      	bmi.n	8008b82 <_fflush_r+0x3a>
 8008b78:	0599      	lsls	r1, r3, #22
 8008b7a:	d402      	bmi.n	8008b82 <_fflush_r+0x3a>
 8008b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b7e:	f7ff f85e 	bl	8007c3e <__retarget_lock_acquire_recursive>
 8008b82:	4628      	mov	r0, r5
 8008b84:	4621      	mov	r1, r4
 8008b86:	f7ff ff59 	bl	8008a3c <__sflush_r>
 8008b8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b8c:	07da      	lsls	r2, r3, #31
 8008b8e:	4605      	mov	r5, r0
 8008b90:	d4e0      	bmi.n	8008b54 <_fflush_r+0xc>
 8008b92:	89a3      	ldrh	r3, [r4, #12]
 8008b94:	059b      	lsls	r3, r3, #22
 8008b96:	d4dd      	bmi.n	8008b54 <_fflush_r+0xc>
 8008b98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b9a:	f7ff f851 	bl	8007c40 <__retarget_lock_release_recursive>
 8008b9e:	e7d9      	b.n	8008b54 <_fflush_r+0xc>
 8008ba0:	4b05      	ldr	r3, [pc, #20]	; (8008bb8 <_fflush_r+0x70>)
 8008ba2:	429c      	cmp	r4, r3
 8008ba4:	d101      	bne.n	8008baa <_fflush_r+0x62>
 8008ba6:	68ac      	ldr	r4, [r5, #8]
 8008ba8:	e7df      	b.n	8008b6a <_fflush_r+0x22>
 8008baa:	4b04      	ldr	r3, [pc, #16]	; (8008bbc <_fflush_r+0x74>)
 8008bac:	429c      	cmp	r4, r3
 8008bae:	bf08      	it	eq
 8008bb0:	68ec      	ldreq	r4, [r5, #12]
 8008bb2:	e7da      	b.n	8008b6a <_fflush_r+0x22>
 8008bb4:	08009058 	.word	0x08009058
 8008bb8:	08009078 	.word	0x08009078
 8008bbc:	08009038 	.word	0x08009038

08008bc0 <fiprintf>:
 8008bc0:	b40e      	push	{r1, r2, r3}
 8008bc2:	b503      	push	{r0, r1, lr}
 8008bc4:	4601      	mov	r1, r0
 8008bc6:	ab03      	add	r3, sp, #12
 8008bc8:	4805      	ldr	r0, [pc, #20]	; (8008be0 <fiprintf+0x20>)
 8008bca:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bce:	6800      	ldr	r0, [r0, #0]
 8008bd0:	9301      	str	r3, [sp, #4]
 8008bd2:	f7ff fcaf 	bl	8008534 <_vfiprintf_r>
 8008bd6:	b002      	add	sp, #8
 8008bd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bdc:	b003      	add	sp, #12
 8008bde:	4770      	bx	lr
 8008be0:	2000000c 	.word	0x2000000c

08008be4 <_lseek_r>:
 8008be4:	b538      	push	{r3, r4, r5, lr}
 8008be6:	4d07      	ldr	r5, [pc, #28]	; (8008c04 <_lseek_r+0x20>)
 8008be8:	4604      	mov	r4, r0
 8008bea:	4608      	mov	r0, r1
 8008bec:	4611      	mov	r1, r2
 8008bee:	2200      	movs	r2, #0
 8008bf0:	602a      	str	r2, [r5, #0]
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	f7fa fb82 	bl	80032fc <_lseek>
 8008bf8:	1c43      	adds	r3, r0, #1
 8008bfa:	d102      	bne.n	8008c02 <_lseek_r+0x1e>
 8008bfc:	682b      	ldr	r3, [r5, #0]
 8008bfe:	b103      	cbz	r3, 8008c02 <_lseek_r+0x1e>
 8008c00:	6023      	str	r3, [r4, #0]
 8008c02:	bd38      	pop	{r3, r4, r5, pc}
 8008c04:	20000304 	.word	0x20000304

08008c08 <__swhatbuf_r>:
 8008c08:	b570      	push	{r4, r5, r6, lr}
 8008c0a:	460e      	mov	r6, r1
 8008c0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c10:	2900      	cmp	r1, #0
 8008c12:	b096      	sub	sp, #88	; 0x58
 8008c14:	4614      	mov	r4, r2
 8008c16:	461d      	mov	r5, r3
 8008c18:	da07      	bge.n	8008c2a <__swhatbuf_r+0x22>
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	602b      	str	r3, [r5, #0]
 8008c1e:	89b3      	ldrh	r3, [r6, #12]
 8008c20:	061a      	lsls	r2, r3, #24
 8008c22:	d410      	bmi.n	8008c46 <__swhatbuf_r+0x3e>
 8008c24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c28:	e00e      	b.n	8008c48 <__swhatbuf_r+0x40>
 8008c2a:	466a      	mov	r2, sp
 8008c2c:	f000 f894 	bl	8008d58 <_fstat_r>
 8008c30:	2800      	cmp	r0, #0
 8008c32:	dbf2      	blt.n	8008c1a <__swhatbuf_r+0x12>
 8008c34:	9a01      	ldr	r2, [sp, #4]
 8008c36:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c3a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008c3e:	425a      	negs	r2, r3
 8008c40:	415a      	adcs	r2, r3
 8008c42:	602a      	str	r2, [r5, #0]
 8008c44:	e7ee      	b.n	8008c24 <__swhatbuf_r+0x1c>
 8008c46:	2340      	movs	r3, #64	; 0x40
 8008c48:	2000      	movs	r0, #0
 8008c4a:	6023      	str	r3, [r4, #0]
 8008c4c:	b016      	add	sp, #88	; 0x58
 8008c4e:	bd70      	pop	{r4, r5, r6, pc}

08008c50 <__smakebuf_r>:
 8008c50:	898b      	ldrh	r3, [r1, #12]
 8008c52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c54:	079d      	lsls	r5, r3, #30
 8008c56:	4606      	mov	r6, r0
 8008c58:	460c      	mov	r4, r1
 8008c5a:	d507      	bpl.n	8008c6c <__smakebuf_r+0x1c>
 8008c5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c60:	6023      	str	r3, [r4, #0]
 8008c62:	6123      	str	r3, [r4, #16]
 8008c64:	2301      	movs	r3, #1
 8008c66:	6163      	str	r3, [r4, #20]
 8008c68:	b002      	add	sp, #8
 8008c6a:	bd70      	pop	{r4, r5, r6, pc}
 8008c6c:	ab01      	add	r3, sp, #4
 8008c6e:	466a      	mov	r2, sp
 8008c70:	f7ff ffca 	bl	8008c08 <__swhatbuf_r>
 8008c74:	9900      	ldr	r1, [sp, #0]
 8008c76:	4605      	mov	r5, r0
 8008c78:	4630      	mov	r0, r6
 8008c7a:	f7ff fbd7 	bl	800842c <_malloc_r>
 8008c7e:	b948      	cbnz	r0, 8008c94 <__smakebuf_r+0x44>
 8008c80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c84:	059a      	lsls	r2, r3, #22
 8008c86:	d4ef      	bmi.n	8008c68 <__smakebuf_r+0x18>
 8008c88:	f023 0303 	bic.w	r3, r3, #3
 8008c8c:	f043 0302 	orr.w	r3, r3, #2
 8008c90:	81a3      	strh	r3, [r4, #12]
 8008c92:	e7e3      	b.n	8008c5c <__smakebuf_r+0xc>
 8008c94:	4b0d      	ldr	r3, [pc, #52]	; (8008ccc <__smakebuf_r+0x7c>)
 8008c96:	62b3      	str	r3, [r6, #40]	; 0x28
 8008c98:	89a3      	ldrh	r3, [r4, #12]
 8008c9a:	6020      	str	r0, [r4, #0]
 8008c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ca0:	81a3      	strh	r3, [r4, #12]
 8008ca2:	9b00      	ldr	r3, [sp, #0]
 8008ca4:	6163      	str	r3, [r4, #20]
 8008ca6:	9b01      	ldr	r3, [sp, #4]
 8008ca8:	6120      	str	r0, [r4, #16]
 8008caa:	b15b      	cbz	r3, 8008cc4 <__smakebuf_r+0x74>
 8008cac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cb0:	4630      	mov	r0, r6
 8008cb2:	f000 f863 	bl	8008d7c <_isatty_r>
 8008cb6:	b128      	cbz	r0, 8008cc4 <__smakebuf_r+0x74>
 8008cb8:	89a3      	ldrh	r3, [r4, #12]
 8008cba:	f023 0303 	bic.w	r3, r3, #3
 8008cbe:	f043 0301 	orr.w	r3, r3, #1
 8008cc2:	81a3      	strh	r3, [r4, #12]
 8008cc4:	89a0      	ldrh	r0, [r4, #12]
 8008cc6:	4305      	orrs	r5, r0
 8008cc8:	81a5      	strh	r5, [r4, #12]
 8008cca:	e7cd      	b.n	8008c68 <__smakebuf_r+0x18>
 8008ccc:	08007a91 	.word	0x08007a91

08008cd0 <__ascii_mbtowc>:
 8008cd0:	b082      	sub	sp, #8
 8008cd2:	b901      	cbnz	r1, 8008cd6 <__ascii_mbtowc+0x6>
 8008cd4:	a901      	add	r1, sp, #4
 8008cd6:	b142      	cbz	r2, 8008cea <__ascii_mbtowc+0x1a>
 8008cd8:	b14b      	cbz	r3, 8008cee <__ascii_mbtowc+0x1e>
 8008cda:	7813      	ldrb	r3, [r2, #0]
 8008cdc:	600b      	str	r3, [r1, #0]
 8008cde:	7812      	ldrb	r2, [r2, #0]
 8008ce0:	1e10      	subs	r0, r2, #0
 8008ce2:	bf18      	it	ne
 8008ce4:	2001      	movne	r0, #1
 8008ce6:	b002      	add	sp, #8
 8008ce8:	4770      	bx	lr
 8008cea:	4610      	mov	r0, r2
 8008cec:	e7fb      	b.n	8008ce6 <__ascii_mbtowc+0x16>
 8008cee:	f06f 0001 	mvn.w	r0, #1
 8008cf2:	e7f8      	b.n	8008ce6 <__ascii_mbtowc+0x16>

08008cf4 <__malloc_lock>:
 8008cf4:	4801      	ldr	r0, [pc, #4]	; (8008cfc <__malloc_lock+0x8>)
 8008cf6:	f7fe bfa2 	b.w	8007c3e <__retarget_lock_acquire_recursive>
 8008cfa:	bf00      	nop
 8008cfc:	200002fc 	.word	0x200002fc

08008d00 <__malloc_unlock>:
 8008d00:	4801      	ldr	r0, [pc, #4]	; (8008d08 <__malloc_unlock+0x8>)
 8008d02:	f7fe bf9d 	b.w	8007c40 <__retarget_lock_release_recursive>
 8008d06:	bf00      	nop
 8008d08:	200002fc 	.word	0x200002fc

08008d0c <_read_r>:
 8008d0c:	b538      	push	{r3, r4, r5, lr}
 8008d0e:	4d07      	ldr	r5, [pc, #28]	; (8008d2c <_read_r+0x20>)
 8008d10:	4604      	mov	r4, r0
 8008d12:	4608      	mov	r0, r1
 8008d14:	4611      	mov	r1, r2
 8008d16:	2200      	movs	r2, #0
 8008d18:	602a      	str	r2, [r5, #0]
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	f7fa faaa 	bl	8003274 <_read>
 8008d20:	1c43      	adds	r3, r0, #1
 8008d22:	d102      	bne.n	8008d2a <_read_r+0x1e>
 8008d24:	682b      	ldr	r3, [r5, #0]
 8008d26:	b103      	cbz	r3, 8008d2a <_read_r+0x1e>
 8008d28:	6023      	str	r3, [r4, #0]
 8008d2a:	bd38      	pop	{r3, r4, r5, pc}
 8008d2c:	20000304 	.word	0x20000304

08008d30 <__ascii_wctomb>:
 8008d30:	b149      	cbz	r1, 8008d46 <__ascii_wctomb+0x16>
 8008d32:	2aff      	cmp	r2, #255	; 0xff
 8008d34:	bf85      	ittet	hi
 8008d36:	238a      	movhi	r3, #138	; 0x8a
 8008d38:	6003      	strhi	r3, [r0, #0]
 8008d3a:	700a      	strbls	r2, [r1, #0]
 8008d3c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008d40:	bf98      	it	ls
 8008d42:	2001      	movls	r0, #1
 8008d44:	4770      	bx	lr
 8008d46:	4608      	mov	r0, r1
 8008d48:	4770      	bx	lr

08008d4a <abort>:
 8008d4a:	b508      	push	{r3, lr}
 8008d4c:	2006      	movs	r0, #6
 8008d4e:	f000 f84d 	bl	8008dec <raise>
 8008d52:	2001      	movs	r0, #1
 8008d54:	f7fa fa84 	bl	8003260 <_exit>

08008d58 <_fstat_r>:
 8008d58:	b538      	push	{r3, r4, r5, lr}
 8008d5a:	4d07      	ldr	r5, [pc, #28]	; (8008d78 <_fstat_r+0x20>)
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	4604      	mov	r4, r0
 8008d60:	4608      	mov	r0, r1
 8008d62:	4611      	mov	r1, r2
 8008d64:	602b      	str	r3, [r5, #0]
 8008d66:	f7fa faae 	bl	80032c6 <_fstat>
 8008d6a:	1c43      	adds	r3, r0, #1
 8008d6c:	d102      	bne.n	8008d74 <_fstat_r+0x1c>
 8008d6e:	682b      	ldr	r3, [r5, #0]
 8008d70:	b103      	cbz	r3, 8008d74 <_fstat_r+0x1c>
 8008d72:	6023      	str	r3, [r4, #0]
 8008d74:	bd38      	pop	{r3, r4, r5, pc}
 8008d76:	bf00      	nop
 8008d78:	20000304 	.word	0x20000304

08008d7c <_isatty_r>:
 8008d7c:	b538      	push	{r3, r4, r5, lr}
 8008d7e:	4d06      	ldr	r5, [pc, #24]	; (8008d98 <_isatty_r+0x1c>)
 8008d80:	2300      	movs	r3, #0
 8008d82:	4604      	mov	r4, r0
 8008d84:	4608      	mov	r0, r1
 8008d86:	602b      	str	r3, [r5, #0]
 8008d88:	f7fa faad 	bl	80032e6 <_isatty>
 8008d8c:	1c43      	adds	r3, r0, #1
 8008d8e:	d102      	bne.n	8008d96 <_isatty_r+0x1a>
 8008d90:	682b      	ldr	r3, [r5, #0]
 8008d92:	b103      	cbz	r3, 8008d96 <_isatty_r+0x1a>
 8008d94:	6023      	str	r3, [r4, #0]
 8008d96:	bd38      	pop	{r3, r4, r5, pc}
 8008d98:	20000304 	.word	0x20000304

08008d9c <_raise_r>:
 8008d9c:	291f      	cmp	r1, #31
 8008d9e:	b538      	push	{r3, r4, r5, lr}
 8008da0:	4604      	mov	r4, r0
 8008da2:	460d      	mov	r5, r1
 8008da4:	d904      	bls.n	8008db0 <_raise_r+0x14>
 8008da6:	2316      	movs	r3, #22
 8008da8:	6003      	str	r3, [r0, #0]
 8008daa:	f04f 30ff 	mov.w	r0, #4294967295
 8008dae:	bd38      	pop	{r3, r4, r5, pc}
 8008db0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008db2:	b112      	cbz	r2, 8008dba <_raise_r+0x1e>
 8008db4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008db8:	b94b      	cbnz	r3, 8008dce <_raise_r+0x32>
 8008dba:	4620      	mov	r0, r4
 8008dbc:	f000 f830 	bl	8008e20 <_getpid_r>
 8008dc0:	462a      	mov	r2, r5
 8008dc2:	4601      	mov	r1, r0
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008dca:	f000 b817 	b.w	8008dfc <_kill_r>
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d00a      	beq.n	8008de8 <_raise_r+0x4c>
 8008dd2:	1c59      	adds	r1, r3, #1
 8008dd4:	d103      	bne.n	8008dde <_raise_r+0x42>
 8008dd6:	2316      	movs	r3, #22
 8008dd8:	6003      	str	r3, [r0, #0]
 8008dda:	2001      	movs	r0, #1
 8008ddc:	e7e7      	b.n	8008dae <_raise_r+0x12>
 8008dde:	2400      	movs	r4, #0
 8008de0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008de4:	4628      	mov	r0, r5
 8008de6:	4798      	blx	r3
 8008de8:	2000      	movs	r0, #0
 8008dea:	e7e0      	b.n	8008dae <_raise_r+0x12>

08008dec <raise>:
 8008dec:	4b02      	ldr	r3, [pc, #8]	; (8008df8 <raise+0xc>)
 8008dee:	4601      	mov	r1, r0
 8008df0:	6818      	ldr	r0, [r3, #0]
 8008df2:	f7ff bfd3 	b.w	8008d9c <_raise_r>
 8008df6:	bf00      	nop
 8008df8:	2000000c 	.word	0x2000000c

08008dfc <_kill_r>:
 8008dfc:	b538      	push	{r3, r4, r5, lr}
 8008dfe:	4d07      	ldr	r5, [pc, #28]	; (8008e1c <_kill_r+0x20>)
 8008e00:	2300      	movs	r3, #0
 8008e02:	4604      	mov	r4, r0
 8008e04:	4608      	mov	r0, r1
 8008e06:	4611      	mov	r1, r2
 8008e08:	602b      	str	r3, [r5, #0]
 8008e0a:	f7fa fa19 	bl	8003240 <_kill>
 8008e0e:	1c43      	adds	r3, r0, #1
 8008e10:	d102      	bne.n	8008e18 <_kill_r+0x1c>
 8008e12:	682b      	ldr	r3, [r5, #0]
 8008e14:	b103      	cbz	r3, 8008e18 <_kill_r+0x1c>
 8008e16:	6023      	str	r3, [r4, #0]
 8008e18:	bd38      	pop	{r3, r4, r5, pc}
 8008e1a:	bf00      	nop
 8008e1c:	20000304 	.word	0x20000304

08008e20 <_getpid_r>:
 8008e20:	f7fa ba06 	b.w	8003230 <_getpid>

08008e24 <_init>:
 8008e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e26:	bf00      	nop
 8008e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e2a:	bc08      	pop	{r3}
 8008e2c:	469e      	mov	lr, r3
 8008e2e:	4770      	bx	lr

08008e30 <_fini>:
 8008e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e32:	bf00      	nop
 8008e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e36:	bc08      	pop	{r3}
 8008e38:	469e      	mov	lr, r3
 8008e3a:	4770      	bx	lr
